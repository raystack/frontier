version: 1

# logging configuration
log:
  # debug, info, warning, error, fatal - default 'info'
  level: debug
  #  none(default), stdout, db
  audit_events: none
  # list of audit events to be ignored
  # e.g. ["app.user.created", "app.permission.checked"]
  ignored_audit_events: []

new_relic:
  # enable new relic for tracing and metrics
  enabled: false
  # name of the application in new relic
  app_name: "Frontier"
  # license key for new relic
  license: "NEWRELIC_LICENSE_KEY"

# Admin UI configuration
ui:
  # port to serve the UI
  port: 8100
  # title to show on the browser tab
  title: "Frontier Admin"
  # logo to show on login page
  logo: ""
  # url to use for showing user the full org url
  app_url: ""
  # product id to use for adding credits
  token_product_id: ""
  # list of organization industry types
  organization_types: []

app:
  port: 8000
  grpc:
    port: 8001
    # gRPC message size limits
    # max_recv_msg_size: 33554432
    # max_send_msg_size: 33554432
    # optional tls config
    # tls_cert_file: "temp/server-cert.pem"
    # tls_key_file: "temp/server-key.pem"
    # tls_client_ca_file: "temp/ca-cert.pem"
  connect:
    port: 8002
  # port for application metrics
  metrics_port: 9000
  # enable pprof endpoints for cpu/mem/mutex profiling
  profiler: false
  host: "127.0.0.1"
  # WARNING: identity_proxy_header bypass all authorization checks and shouldn't be used in production
  identity_proxy_header: X-Frontier-Email
  # full path prefixed with scheme where resources config yaml files are kept
  # e.g.:
  # local storage file "file:///tmp/resources_config"
  # GCS Bucket "gs://frontier/resources_config"
  resources_config_path: file:///tmp/resources_config\
  # secret required to access resources config
  # e.g.:
  # system environment variable "env://TEST_RULESET_SECRET"
  # local file "file:///opt/auth.json"
  # secret string "val://user:password"
  # optional
  resources_config_path_secret: env://TEST_RESOURCE_CONFIG_SECRET

  # cross-origin resource sharing configuration
  cors:
    # allowed_origins is origin value from where we want to allow cors
    allowed_origins:
      - "https://example.com" # use "*" to allow all origins
    allowed_methods:
      - POST
      - GET
      - PUT
      - PATCH
      - DELETE
    allowed_headers:
      - Authorization
    exposed_headers:
      - Content-Type
  # configuration to allow authentication in frontier
  authentication:
    # Public facing host used for oidc redirect uri and mail link redirection
    # after user credentials are verified.
    # If frontier is exposed behind a proxy, this should set as proxy endpoint
    # e.g. http://localhost:7400/v1beta1/auth/callback
    # Only the first host is used for callback by default, if multiple hosts are provided
    # they can be used to override the callback host for specific strategies using query param
    callback_urls: ["http://localhost:8000/v1beta1/auth/callback"]
    # by default, after successful authentication(flow completes) no operation will be performed,
    # to apply redirection in case of browsers, provide a list of urls one of which will be used
    # after authentication where users will be redirected to.
    # this is optional
    authorized_redirect_urls: []
    # to use frontier as session store
    session:
      # both of them should be 32 chars long
      # hash helps identify if the value is tampered with
      hash_secret_key: "hash-secret-should-be-32-chars--"
      # block helps in encryption
      block_secret_key: "block-secret-should-be-32-chars-"
      # domain used for setting cookies, if not set defaults to request origin host
      domain: ""
      # same site policy for cookies
      # can be one of: "", "lax"(default value), "strict", "none"
      same_site: "lax"
      # validity of the session
      validity: "720h"
      # secure flag for cookies
      secure: false
      client_ip: "x-frontier-ip"
      client_country: "x-frontier-country"
      client_city: "x-frontier-city"
    # once authenticated, server responds with a jwt with user context
    # this jwt works as a bearer access token for all APIs
    token:
      # generate key file via "./frontier server keygen"
      # if not specified, access tokens will be disabled
      # example: /opt/rsa
      rsa_path: ""
      # if rsa_path is not specified, rsa_base64 can be used to provide the rsa key in base64 encoded format
      rsa_base64: ""
      # issuer claim to be added to the jwt
      iss: "http://localhost.frontier"
      # validity of the token
      validity: "1h"
      # custom claims configuration for the jwt
      claims:
        # if set to true, the jwt will contain the org ids of the user in the claim
        add_org_ids: true
        # if set to true, the jwt will contain the user email in the claim
        add_user_email: true
        # if set to true, the jwt will contain session id in the claim
        add_session_id: true
    # oidc auth server configs
    oidc_config:
      google:
        client_id: "xxxxx.apps.googleusercontent.com"
        client_secret: "xxxxx"
        issuer_url: "https://accounts.google.com"
        # validity of the verification duration
        validity: "10m"
    mail_otp:
      subject: "Frontier - Login Link"
      # body is a go template with `Otp` as a variable
      body: "Please copy/paste the OneTimePassword in login form.<h2>{{.Otp}}</h2>This code will expire in 15 minutes."
      validity: 15m
    mail_link:
      subject: "Frontier Login - One time link"
      # body is a go template with `Otp` as a variable
      body: "Click on the following link or copy/paste the url in browser to login.<br><h2><a href='{{.Link}}' target='_blank'>Login</a></h2><br>Address: {{.Link}} <br>This link will expire in 15 minutes."
      validity: 15m
    passkey:
      # the display name for the Relying Party Server. This can be any string.
      rpdisplayname: ""
      # the Relying Party Server ID. This should generally be the origin without a scheme and port.
      rpid: ""
      # list of Relying Party Server Origins that are permitted. These should be fully
      # qualified origins.
      rporigins: []
    test_users:
      enabled: false
      domain: example.com
      otp: ""

  # platform level administration
  admin:
    # Email list of users which needs to be converted as superusers
    # if the user is already present in the system, it is promoted to su
    # if not, a new account is created with provided email id and promoted to su.
    # UUIDs/slugs of existing users can also be provided instead of email ids
    # but in that case a new user will not be created.
    users: []
  # smtp configuration for sending emails
  mailer:
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_username: "username"
    smtp_password: "password"
    smtp_insecure: true
    headers:
      from: "username@acme.org"
    # policy to use when establishing a connection. Defaults to mandatory_start.
    # Possible values are:
    # opportunistic: Use STARTTLS if the server supports it, otherwise connect without encryption.
    # mandatory: Always use STARTTLS.
    # no: Never use STARTTLS.
    smtp_tls_policy: "mandatory"

  webhook:
    # encryption key to be used for encrypting webhook payloads
    # this is used to validate the webhook payloads
    encryption_key: "hash-secret-should-be-32-chars--"

db:
  driver: postgres
  url: postgres://frontier:@localhost:5432/frontier?sslmode=disable
  max_query_timeout: 500ms
  max_idle_conns: 10
  max_open_conns: 10
  conn_max_life_time: 15m

spicedb:
  host: spicedb.localhost
  port: 50051
  pre_shared_key: randomkey
  # consistency ensures Authz server consistency guarantees for various operations
  # Possible values are:
  # - "full": Guarantees that the data is always fresh although API calls might be slower than usual
  # - "best_effort": Guarantees that the data is the best effort fresh [default]
  # - "minimize_latency": Tries to prioritise minimal latency
  consistency: "best_effort"
  # check_trace enables tracing in check api for spicedb, it adds considerable
  # latency to the check calls and shouldn't be enabled in production
  check_trace: false

billing:
  # stripe key to be used for billing
  # e.g. sk_test_XXXXXXXXXXX
  stripe_key: ""
  # if true, tax will be calculated automatically by stripe
  # before turning it on, make sure you have configured tax rates in stripe
  stripe_auto_tax: false
  # webhook secret to be used for validating stripe webhooks events
  # all the secrets are used to validate the events useful in case of key rotation
  stripe_webhook_secrets: []
  # path to plans spec file that will be used to create plans in billing engine
  # e.g. file:///tmp/plans
  plans_path: ""
  # default currency to be used for billing if not provided by the user
  # e.g. usd, inr, eur
  default_currency: ""
  # payment method configuration, allows to set min and max that the method
  #should be allowed for. Supported types are card, customer_balance
  payment_method_config:
    - type: card
    #   max: 500000
    - type: customer_balance
    #   min: 100000
  # billing customer account configuration
  customer:
    # automatically create a default customer account when an org is created
    auto_create_with_org: true
    # name of the plan that should be used subscribed automatically when the org is created
    # it also automatically creates an empty billing account under the org
    default_plan: ""
    # default offline status for the customer account, if true the customer account
    # will not be registered in billing provider
    default_offline: false
    # free credits to be added to the customer account when created as a part of the org
    onboard_credits_with_org: 0
    # credit_overdraft_product is the product name that should be used to calculate per unit cost
    # of the overdraft credits, it uses the first price available for the product
    credit_overdraft_product: ""
    # credit_overdraft_invoice_day is the day of the range(month) when the overdraft credits are invoiced
    credit_overdraft_invoice_day: 1
    # credit_overdraft_invoice_range_shift is the number of months to shift the invoice range
    # positive value will shift the invoice range to the future and negative value will shift to the past
    credit_overdraft_invoice_range_shift: 0
  # plan change configuration applied when a user changes their subscription plan
  plan_change:
    # proration_behavior can be one of "create_prorations", "none", "always_invoice"
    proration_behavior: "create_prorations"
    # immediate_proration_behavior can be one of "create_prorations", "none", "always_invoice"
    # this is applied when the plan is changed immediately instead of waiting for the next billing cycle
    immediate_proration_behavior: "create_prorations"
    # collection_method can be one of "charge_automatically", "send_invoice"
    collection_method: "charge_automatically"
  subscription:
    behaviour_after_trial: release
  # product configuration
  product:
    # seat_change_behavior can be one of "exact", "incremental"
    # "exact" will change the seat count to the exact number of users within the organization
    # "incremental" will change the seat count to the number of users within the organization
    # but will not decrease the seat count if reduced
    seat_change_behavior: "exact"
  # refresh interval for billing engine to sync with the billing provider
  # e.g. 60s, 2m, 30m
  refresh_interval:
    customer: 1m
    subscription: 1m
    invoice: 5m
    checkout: 1m
