// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	product "github.com/raystack/frontier/billing/product"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

type ProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductService) EXPECT() *ProductService_Expecter {
	return &ProductService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ProductService) GetByID(ctx context.Context, id string) (product.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (product.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) product.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(product.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProductService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProductService_Expecter) GetByID(ctx interface{}, id interface{}) *ProductService_GetByID_Call {
	return &ProductService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ProductService_GetByID_Call) Run(run func(ctx context.Context, id string)) *ProductService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductService_GetByID_Call) Return(_a0 product.Product, _a1 error) *ProductService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetByID_Call) RunAndReturn(run func(context.Context, string) (product.Product, error)) *ProductService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatureByID provides a mock function with given fields: ctx, id
func (_m *ProductService) GetFeatureByID(ctx context.Context, id string) (product.Feature, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatureByID")
	}

	var r0 product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (product.Feature, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) product.Feature); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(product.Feature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetFeatureByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureByID'
type ProductService_GetFeatureByID_Call struct {
	*mock.Call
}

// GetFeatureByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProductService_Expecter) GetFeatureByID(ctx interface{}, id interface{}) *ProductService_GetFeatureByID_Call {
	return &ProductService_GetFeatureByID_Call{Call: _e.mock.On("GetFeatureByID", ctx, id)}
}

func (_c *ProductService_GetFeatureByID_Call) Run(run func(ctx context.Context, id string)) *ProductService_GetFeatureByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductService_GetFeatureByID_Call) Return(_a0 product.Feature, _a1 error) *ProductService_GetFeatureByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetFeatureByID_Call) RunAndReturn(run func(context.Context, string) (product.Feature, error)) *ProductService_GetFeatureByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, f
func (_m *ProductService) List(ctx context.Context, f product.Filter) ([]product.Product, error) {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []product.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, product.Filter) ([]product.Product, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.Filter) []product.Product); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.Filter) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ProductService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - f product.Filter
func (_e *ProductService_Expecter) List(ctx interface{}, f interface{}) *ProductService_List_Call {
	return &ProductService_List_Call{Call: _e.mock.On("List", ctx, f)}
}

func (_c *ProductService_List_Call) Run(run func(ctx context.Context, f product.Filter)) *ProductService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(product.Filter))
	})
	return _c
}

func (_c *ProductService_List_Call) Return(_a0 []product.Product, _a1 error) *ProductService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_List_Call) RunAndReturn(run func(context.Context, product.Filter) ([]product.Product, error)) *ProductService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
