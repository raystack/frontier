// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OrganizationService is an autogenerated mock type for the OrganizationService type
type OrganizationService struct {
	mock.Mock
}

type OrganizationService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationService) EXPECT() *OrganizationService_Expecter {
	return &OrganizationService_Expecter{mock: &_m.Mock}
}

// MemberCount provides a mock function with given fields: ctx, orgID
func (_m *OrganizationService) MemberCount(ctx context.Context, orgID string) (int64, error) {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for MemberCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, orgID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationService_MemberCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemberCount'
type OrganizationService_MemberCount_Call struct {
	*mock.Call
}

// MemberCount is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *OrganizationService_Expecter) MemberCount(ctx interface{}, orgID interface{}) *OrganizationService_MemberCount_Call {
	return &OrganizationService_MemberCount_Call{Call: _e.mock.On("MemberCount", ctx, orgID)}
}

func (_c *OrganizationService_MemberCount_Call) Run(run func(ctx context.Context, orgID string)) *OrganizationService_MemberCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrganizationService_MemberCount_Call) Return(_a0 int64, _a1 error) *OrganizationService_MemberCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationService_MemberCount_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *OrganizationService_MemberCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrganizationService creates a new instance of OrganizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationService {
	mock := &OrganizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
