// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	product "github.com/raystack/frontier/billing/product"
	mock "github.com/stretchr/testify/mock"
)

// FeatureRepository is an autogenerated mock type for the FeatureRepository type
type FeatureRepository struct {
	mock.Mock
}

type FeatureRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FeatureRepository) EXPECT() *FeatureRepository_Expecter {
	return &FeatureRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, feature
func (_m *FeatureRepository) Create(ctx context.Context, feature product.Feature) (product.Feature, error) {
	ret := _m.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, product.Feature) (product.Feature, error)); ok {
		return rf(ctx, feature)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.Feature) product.Feature); ok {
		r0 = rf(ctx, feature)
	} else {
		r0 = ret.Get(0).(product.Feature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.Feature) error); ok {
		r1 = rf(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FeatureRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - feature product.Feature
func (_e *FeatureRepository_Expecter) Create(ctx interface{}, feature interface{}) *FeatureRepository_Create_Call {
	return &FeatureRepository_Create_Call{Call: _e.mock.On("Create", ctx, feature)}
}

func (_c *FeatureRepository_Create_Call) Run(run func(ctx context.Context, feature product.Feature)) *FeatureRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(product.Feature))
	})
	return _c
}

func (_c *FeatureRepository_Create_Call) Return(_a0 product.Feature, _a1 error) *FeatureRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureRepository_Create_Call) RunAndReturn(run func(context.Context, product.Feature) (product.Feature, error)) *FeatureRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *FeatureRepository) GetByID(ctx context.Context, id string) (product.Feature, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (product.Feature, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) product.Feature); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(product.Feature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type FeatureRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FeatureRepository_Expecter) GetByID(ctx interface{}, id interface{}) *FeatureRepository_GetByID_Call {
	return &FeatureRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *FeatureRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *FeatureRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FeatureRepository_GetByID_Call) Return(_a0 product.Feature, _a1 error) *FeatureRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (product.Feature, error)) *FeatureRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *FeatureRepository) GetByName(ctx context.Context, name string) (product.Feature, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (product.Feature, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) product.Feature); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(product.Feature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type FeatureRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *FeatureRepository_Expecter) GetByName(ctx interface{}, name interface{}) *FeatureRepository_GetByName_Call {
	return &FeatureRepository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *FeatureRepository_GetByName_Call) Run(run func(ctx context.Context, name string)) *FeatureRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FeatureRepository_GetByName_Call) Return(_a0 product.Feature, _a1 error) *FeatureRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (product.Feature, error)) *FeatureRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *FeatureRepository) List(ctx context.Context, flt product.Filter) ([]product.Feature, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, product.Filter) ([]product.Feature, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.Filter) []product.Feature); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FeatureRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt product.Filter
func (_e *FeatureRepository_Expecter) List(ctx interface{}, flt interface{}) *FeatureRepository_List_Call {
	return &FeatureRepository_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *FeatureRepository_List_Call) Run(run func(ctx context.Context, flt product.Filter)) *FeatureRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(product.Filter))
	})
	return _c
}

func (_c *FeatureRepository_List_Call) Return(_a0 []product.Feature, _a1 error) *FeatureRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureRepository_List_Call) RunAndReturn(run func(context.Context, product.Filter) ([]product.Feature, error)) *FeatureRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByName provides a mock function with given fields: ctx, feature
func (_m *FeatureRepository) UpdateByName(ctx context.Context, feature product.Feature) (product.Feature, error) {
	ret := _m.Called(ctx, feature)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByName")
	}

	var r0 product.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, product.Feature) (product.Feature, error)); ok {
		return rf(ctx, feature)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.Feature) product.Feature); ok {
		r0 = rf(ctx, feature)
	} else {
		r0 = ret.Get(0).(product.Feature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.Feature) error); ok {
		r1 = rf(ctx, feature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureRepository_UpdateByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByName'
type FeatureRepository_UpdateByName_Call struct {
	*mock.Call
}

// UpdateByName is a helper method to define mock.On call
//   - ctx context.Context
//   - feature product.Feature
func (_e *FeatureRepository_Expecter) UpdateByName(ctx interface{}, feature interface{}) *FeatureRepository_UpdateByName_Call {
	return &FeatureRepository_UpdateByName_Call{Call: _e.mock.On("UpdateByName", ctx, feature)}
}

func (_c *FeatureRepository_UpdateByName_Call) Run(run func(ctx context.Context, feature product.Feature)) *FeatureRepository_UpdateByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(product.Feature))
	})
	return _c
}

func (_c *FeatureRepository_UpdateByName_Call) Return(_a0 product.Feature, _a1 error) *FeatureRepository_UpdateByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeatureRepository_UpdateByName_Call) RunAndReturn(run func(context.Context, product.Feature) (product.Feature, error)) *FeatureRepository_UpdateByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeatureRepository creates a new instance of FeatureRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeatureRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeatureRepository {
	mock := &FeatureRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
