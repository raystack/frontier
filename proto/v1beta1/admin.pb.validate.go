// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: raystack/frontier/v1beta1/admin.proto

package frontierv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _admin_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllUsersRequestMultiError, or nil if none found.
func (m *ListAllUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListAllUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListAllUsersRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Keyword

	// no validation rules for OrgId

	// no validation rules for GroupId

	// no validation rules for State

	if len(errors) > 0 {
		return ListAllUsersRequestMultiError(errors)
	}

	return nil
}

// ListAllUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllUsersRequestMultiError) AllErrors() []error { return m }

// ListAllUsersRequestValidationError is the validation error returned by
// ListAllUsersRequest.Validate if the designated constraints aren't met.
type ListAllUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllUsersRequestValidationError) ErrorName() string {
	return "ListAllUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllUsersRequestValidationError{}

// Validate checks the field values on ListAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllUsersResponseMultiError, or nil if none found.
func (m *ListAllUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllUsersResponseMultiError(errors)
	}

	return nil
}

// ListAllUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllUsersResponseMultiError) AllErrors() []error { return m }

// ListAllUsersResponseValidationError is the validation error returned by
// ListAllUsersResponse.Validate if the designated constraints aren't met.
type ListAllUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllUsersResponseValidationError) ErrorName() string {
	return "ListAllUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllUsersResponseValidationError{}

// Validate checks the field values on ListGroupsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsRequestMultiError, or nil if none found.
func (m *ListGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for State

	if len(errors) > 0 {
		return ListGroupsRequestMultiError(errors)
	}

	return nil
}

// ListGroupsRequestMultiError is an error wrapping multiple validation errors
// returned by ListGroupsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsRequestMultiError) AllErrors() []error { return m }

// ListGroupsRequestValidationError is the validation error returned by
// ListGroupsRequest.Validate if the designated constraints aren't met.
type ListGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsRequestValidationError) ErrorName() string {
	return "ListGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsRequestValidationError{}

// Validate checks the field values on ListGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsResponseMultiError, or nil if none found.
func (m *ListGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupsResponseMultiError(errors)
	}

	return nil
}

// ListGroupsResponseMultiError is an error wrapping multiple validation errors
// returned by ListGroupsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsResponseMultiError) AllErrors() []error { return m }

// ListGroupsResponseValidationError is the validation error returned by
// ListGroupsResponse.Validate if the designated constraints aren't met.
type ListGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsResponseValidationError) ErrorName() string {
	return "ListGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsResponseValidationError{}

// Validate checks the field values on ListAllOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOrganizationsRequestMultiError, or nil if none found.
func (m *ListAllOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for State

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListAllOrganizationsRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListAllOrganizationsRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListAllOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListAllOrganizationsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllOrganizationsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAllOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListAllOrganizationsRequestValidationError is the validation error returned
// by ListAllOrganizationsRequest.Validate if the designated constraints
// aren't met.
type ListAllOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOrganizationsRequestValidationError) ErrorName() string {
	return "ListAllOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOrganizationsRequestValidationError{}

// Validate checks the field values on ListAllOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOrganizationsResponseMultiError, or nil if none found.
func (m *ListAllOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListAllOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListAllOrganizationsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAllOrganizationsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAllOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListAllOrganizationsResponseValidationError is the validation error returned
// by ListAllOrganizationsResponse.Validate if the designated constraints
// aren't met.
type ListAllOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOrganizationsResponseValidationError) ErrorName() string {
	return "ListAllOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOrganizationsResponseValidationError{}

// Validate checks the field values on ListProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsRequestMultiError, or nil if none found.
func (m *ListProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for State

	if len(errors) > 0 {
		return ListProjectsRequestMultiError(errors)
	}

	return nil
}

// ListProjectsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsRequestMultiError) AllErrors() []error { return m }

// ListProjectsRequestValidationError is the validation error returned by
// ListProjectsRequest.Validate if the designated constraints aren't met.
type ListProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsRequestValidationError) ErrorName() string {
	return "ListProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsRequestValidationError{}

// Validate checks the field values on ListProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsResponseMultiError, or nil if none found.
func (m *ListProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectsResponseMultiError(errors)
	}

	return nil
}

// ListProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsResponseMultiError) AllErrors() []error { return m }

// ListProjectsResponseValidationError is the validation error returned by
// ListProjectsResponse.Validate if the designated constraints aren't met.
type ListProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsResponseValidationError) ErrorName() string {
	return "ListProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsResponseValidationError{}

// Validate checks the field values on ListRelationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRelationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRelationsRequestMultiError, or nil if none found.
func (m *ListRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Object

	if len(errors) > 0 {
		return ListRelationsRequestMultiError(errors)
	}

	return nil
}

// ListRelationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListRelationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRelationsRequestMultiError) AllErrors() []error { return m }

// ListRelationsRequestValidationError is the validation error returned by
// ListRelationsRequest.Validate if the designated constraints aren't met.
type ListRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelationsRequestValidationError) ErrorName() string {
	return "ListRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelationsRequestValidationError{}

// Validate checks the field values on ListRelationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRelationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRelationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRelationsResponseMultiError, or nil if none found.
func (m *ListRelationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRelationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRelationsResponseMultiError(errors)
	}

	return nil
}

// ListRelationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRelationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRelationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRelationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRelationsResponseMultiError) AllErrors() []error { return m }

// ListRelationsResponseValidationError is the validation error returned by
// ListRelationsResponse.Validate if the designated constraints aren't met.
type ListRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelationsResponseValidationError) ErrorName() string {
	return "ListRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelationsResponseValidationError{}

// Validate checks the field values on ListResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcesRequestMultiError, or nil if none found.
func (m *ListResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProjectId

	// no validation rules for OrganizationId

	if utf8.RuneCountInString(m.GetNamespace()) < 3 {
		err := ListResourcesRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListResourcesRequestMultiError(errors)
	}

	return nil
}

// ListResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by ListResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcesRequestMultiError) AllErrors() []error { return m }

// ListResourcesRequestValidationError is the validation error returned by
// ListResourcesRequest.Validate if the designated constraints aren't met.
type ListResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesRequestValidationError) ErrorName() string {
	return "ListResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesRequestValidationError{}

// Validate checks the field values on ListResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcesResponseMultiError, or nil if none found.
func (m *ListResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResourcesResponseMultiError(errors)
	}

	return nil
}

// ListResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by ListResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcesResponseMultiError) AllErrors() []error { return m }

// ListResourcesResponseValidationError is the validation error returned by
// ListResourcesResponse.Validate if the designated constraints aren't met.
type ListResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesResponseValidationError) ErrorName() string {
	return "ListResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on PermissionRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionRequestBodyMultiError, or nil if none found.
func (m *PermissionRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PermissionRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PermissionRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Key

	if len(errors) > 0 {
		return PermissionRequestBodyMultiError(errors)
	}

	return nil
}

// PermissionRequestBodyMultiError is an error wrapping multiple validation
// errors returned by PermissionRequestBody.ValidateAll() if the designated
// constraints aren't met.
type PermissionRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionRequestBodyMultiError) AllErrors() []error { return m }

// PermissionRequestBodyValidationError is the validation error returned by
// PermissionRequestBody.Validate if the designated constraints aren't met.
type PermissionRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionRequestBodyValidationError) ErrorName() string {
	return "PermissionRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionRequestBodyValidationError{}

// Validate checks the field values on CreatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionRequestMultiError, or nil if none found.
func (m *CreatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePermissionRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePermissionRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePermissionRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePermissionRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionRequestMultiError) AllErrors() []error { return m }

// CreatePermissionRequestValidationError is the validation error returned by
// CreatePermissionRequest.Validate if the designated constraints aren't met.
type CreatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionRequestValidationError) ErrorName() string {
	return "CreatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionRequestValidationError{}

// Validate checks the field values on CreatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionResponseMultiError, or nil if none found.
func (m *CreatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePermissionResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePermissionResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePermissionResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePermissionResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionResponseMultiError) AllErrors() []error { return m }

// CreatePermissionResponseValidationError is the validation error returned by
// CreatePermissionResponse.Validate if the designated constraints aren't met.
type CreatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionResponseValidationError) ErrorName() string {
	return "CreatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionResponseValidationError{}

// Validate checks the field values on UpdatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionRequestMultiError, or nil if none found.
func (m *UpdatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePermissionRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePermissionRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePermissionRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePermissionRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionRequestValidationError is the validation error returned by
// UpdatePermissionRequest.Validate if the designated constraints aren't met.
type UpdatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionRequestValidationError) ErrorName() string {
	return "UpdatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionRequestValidationError{}

// Validate checks the field values on UpdatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionResponseMultiError, or nil if none found.
func (m *UpdatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePermissionResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePermissionResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionResponseValidationError is the validation error returned by
// UpdatePermissionResponse.Validate if the designated constraints aren't met.
type UpdatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionResponseValidationError) ErrorName() string {
	return "UpdatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionResponseValidationError{}

// Validate checks the field values on DeletePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionRequestMultiError, or nil if none found.
func (m *DeletePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePermissionRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionRequestMultiError) AllErrors() []error { return m }

// DeletePermissionRequestValidationError is the validation error returned by
// DeletePermissionRequest.Validate if the designated constraints aren't met.
type DeletePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionRequestValidationError) ErrorName() string {
	return "DeletePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionRequestValidationError{}

// Validate checks the field values on DeletePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionResponseMultiError, or nil if none found.
func (m *DeletePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePermissionResponseMultiError(errors)
	}

	return nil
}

// DeletePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionResponseMultiError) AllErrors() []error { return m }

// DeletePermissionResponseValidationError is the validation error returned by
// DeletePermissionResponse.Validate if the designated constraints aren't met.
type DeletePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionResponseValidationError) ErrorName() string {
	return "DeletePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionResponseValidationError{}

// Validate checks the field values on ListPreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPreferencesRequestMultiError, or nil if none found.
func (m *ListPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListPreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPreferencesRequestMultiError) AllErrors() []error { return m }

// ListPreferencesRequestValidationError is the validation error returned by
// ListPreferencesRequest.Validate if the designated constraints aren't met.
type ListPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPreferencesRequestValidationError) ErrorName() string {
	return "ListPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPreferencesRequestValidationError{}

// Validate checks the field values on ListPreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPreferencesResponseMultiError, or nil if none found.
func (m *ListPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListPreferencesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPreferencesResponseMultiError) AllErrors() []error { return m }

// ListPreferencesResponseValidationError is the validation error returned by
// ListPreferencesResponse.Validate if the designated constraints aren't met.
type ListPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPreferencesResponseValidationError) ErrorName() string {
	return "ListPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPreferencesResponseValidationError{}

// Validate checks the field values on CreatePreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePreferencesRequestMultiError, or nil if none found.
func (m *CreatePreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePreferencesRequestValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePreferencesRequestValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePreferencesRequestValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePreferencesRequestMultiError(errors)
	}

	return nil
}

// CreatePreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePreferencesRequestMultiError) AllErrors() []error { return m }

// CreatePreferencesRequestValidationError is the validation error returned by
// CreatePreferencesRequest.Validate if the designated constraints aren't met.
type CreatePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePreferencesRequestValidationError) ErrorName() string {
	return "CreatePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePreferencesRequestValidationError{}

// Validate checks the field values on CreatePreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePreferencesResponseMultiError, or nil if none found.
func (m *CreatePreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreference() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePreferencesResponseValidationError{
						field:  fmt.Sprintf("Preference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePreferencesResponseValidationError{
						field:  fmt.Sprintf("Preference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePreferencesResponseValidationError{
					field:  fmt.Sprintf("Preference[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePreferencesResponseMultiError(errors)
	}

	return nil
}

// CreatePreferencesResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePreferencesResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePreferencesResponseMultiError) AllErrors() []error { return m }

// CreatePreferencesResponseValidationError is the validation error returned by
// CreatePreferencesResponse.Validate if the designated constraints aren't met.
type CreatePreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePreferencesResponseValidationError) ErrorName() string {
	return "CreatePreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePreferencesResponseValidationError{}

// Validate checks the field values on CheckFederatedResourcePermissionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckFederatedResourcePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckFederatedResourcePermissionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CheckFederatedResourcePermissionRequestMultiError, or nil if none found.
func (m *CheckFederatedResourcePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckFederatedResourcePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Resource

	if !_CheckFederatedResourcePermissionRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		err := CheckFederatedResourcePermissionRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[A-Za-z0-9._-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckFederatedResourcePermissionRequestMultiError(errors)
	}

	return nil
}

// CheckFederatedResourcePermissionRequestMultiError is an error wrapping
// multiple validation errors returned by
// CheckFederatedResourcePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckFederatedResourcePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckFederatedResourcePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckFederatedResourcePermissionRequestMultiError) AllErrors() []error { return m }

// CheckFederatedResourcePermissionRequestValidationError is the validation
// error returned by CheckFederatedResourcePermissionRequest.Validate if the
// designated constraints aren't met.
type CheckFederatedResourcePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFederatedResourcePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFederatedResourcePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFederatedResourcePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFederatedResourcePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFederatedResourcePermissionRequestValidationError) ErrorName() string {
	return "CheckFederatedResourcePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFederatedResourcePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFederatedResourcePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFederatedResourcePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFederatedResourcePermissionRequestValidationError{}

var _CheckFederatedResourcePermissionRequest_Permission_Pattern = regexp.MustCompile("^[A-Za-z0-9._-]+$")

// Validate checks the field values on CheckFederatedResourcePermissionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckFederatedResourcePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckFederatedResourcePermissionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckFederatedResourcePermissionResponseMultiError, or nil if none found.
func (m *CheckFederatedResourcePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckFederatedResourcePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckFederatedResourcePermissionResponseMultiError(errors)
	}

	return nil
}

// CheckFederatedResourcePermissionResponseMultiError is an error wrapping
// multiple validation errors returned by
// CheckFederatedResourcePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckFederatedResourcePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckFederatedResourcePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckFederatedResourcePermissionResponseMultiError) AllErrors() []error { return m }

// CheckFederatedResourcePermissionResponseValidationError is the validation
// error returned by CheckFederatedResourcePermissionResponse.Validate if the
// designated constraints aren't met.
type CheckFederatedResourcePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFederatedResourcePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFederatedResourcePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFederatedResourcePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFederatedResourcePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFederatedResourcePermissionResponseValidationError) ErrorName() string {
	return "CheckFederatedResourcePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFederatedResourcePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFederatedResourcePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFederatedResourcePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFederatedResourcePermissionResponseValidationError{}

// Validate checks the field values on AddPlatformUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPlatformUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlatformUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPlatformUserRequestMultiError, or nil if none found.
func (m *AddPlatformUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlatformUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ServiceuserId

	// no validation rules for Relation

	if len(errors) > 0 {
		return AddPlatformUserRequestMultiError(errors)
	}

	return nil
}

// AddPlatformUserRequestMultiError is an error wrapping multiple validation
// errors returned by AddPlatformUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPlatformUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlatformUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlatformUserRequestMultiError) AllErrors() []error { return m }

// AddPlatformUserRequestValidationError is the validation error returned by
// AddPlatformUserRequest.Validate if the designated constraints aren't met.
type AddPlatformUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlatformUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlatformUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlatformUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlatformUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlatformUserRequestValidationError) ErrorName() string {
	return "AddPlatformUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPlatformUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlatformUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlatformUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlatformUserRequestValidationError{}

// Validate checks the field values on AddPlatformUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPlatformUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPlatformUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPlatformUserResponseMultiError, or nil if none found.
func (m *AddPlatformUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPlatformUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddPlatformUserResponseMultiError(errors)
	}

	return nil
}

// AddPlatformUserResponseMultiError is an error wrapping multiple validation
// errors returned by AddPlatformUserResponse.ValidateAll() if the designated
// constraints aren't met.
type AddPlatformUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPlatformUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPlatformUserResponseMultiError) AllErrors() []error { return m }

// AddPlatformUserResponseValidationError is the validation error returned by
// AddPlatformUserResponse.Validate if the designated constraints aren't met.
type AddPlatformUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPlatformUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPlatformUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPlatformUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPlatformUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPlatformUserResponseValidationError) ErrorName() string {
	return "AddPlatformUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPlatformUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPlatformUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPlatformUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPlatformUserResponseValidationError{}

// Validate checks the field values on ListPlatformUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPlatformUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlatformUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlatformUsersRequestMultiError, or nil if none found.
func (m *ListPlatformUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlatformUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPlatformUsersRequestMultiError(errors)
	}

	return nil
}

// ListPlatformUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListPlatformUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPlatformUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlatformUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlatformUsersRequestMultiError) AllErrors() []error { return m }

// ListPlatformUsersRequestValidationError is the validation error returned by
// ListPlatformUsersRequest.Validate if the designated constraints aren't met.
type ListPlatformUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformUsersRequestValidationError) ErrorName() string {
	return "ListPlatformUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformUsersRequestValidationError{}

// Validate checks the field values on ListPlatformUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPlatformUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlatformUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlatformUsersResponseMultiError, or nil if none found.
func (m *ListPlatformUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlatformUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPlatformUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPlatformUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlatformUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceusers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPlatformUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPlatformUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlatformUsersResponseValidationError{
					field:  fmt.Sprintf("Serviceusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPlatformUsersResponseMultiError(errors)
	}

	return nil
}

// ListPlatformUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListPlatformUsersResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPlatformUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlatformUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlatformUsersResponseMultiError) AllErrors() []error { return m }

// ListPlatformUsersResponseValidationError is the validation error returned by
// ListPlatformUsersResponse.Validate if the designated constraints aren't met.
type ListPlatformUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformUsersResponseValidationError) ErrorName() string {
	return "ListPlatformUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformUsersResponseValidationError{}

// Validate checks the field values on RemovePlatformUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePlatformUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePlatformUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePlatformUserRequestMultiError, or nil if none found.
func (m *RemovePlatformUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePlatformUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ServiceuserId

	if len(errors) > 0 {
		return RemovePlatformUserRequestMultiError(errors)
	}

	return nil
}

// RemovePlatformUserRequestMultiError is an error wrapping multiple validation
// errors returned by RemovePlatformUserRequest.ValidateAll() if the
// designated constraints aren't met.
type RemovePlatformUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePlatformUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePlatformUserRequestMultiError) AllErrors() []error { return m }

// RemovePlatformUserRequestValidationError is the validation error returned by
// RemovePlatformUserRequest.Validate if the designated constraints aren't met.
type RemovePlatformUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePlatformUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePlatformUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePlatformUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePlatformUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePlatformUserRequestValidationError) ErrorName() string {
	return "RemovePlatformUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePlatformUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePlatformUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePlatformUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePlatformUserRequestValidationError{}

// Validate checks the field values on RemovePlatformUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePlatformUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePlatformUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePlatformUserResponseMultiError, or nil if none found.
func (m *RemovePlatformUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePlatformUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemovePlatformUserResponseMultiError(errors)
	}

	return nil
}

// RemovePlatformUserResponseMultiError is an error wrapping multiple
// validation errors returned by RemovePlatformUserResponse.ValidateAll() if
// the designated constraints aren't met.
type RemovePlatformUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePlatformUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePlatformUserResponseMultiError) AllErrors() []error { return m }

// RemovePlatformUserResponseValidationError is the validation error returned
// by RemovePlatformUserResponse.Validate if the designated constraints aren't met.
type RemovePlatformUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePlatformUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePlatformUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePlatformUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePlatformUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePlatformUserResponseValidationError) ErrorName() string {
	return "RemovePlatformUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePlatformUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePlatformUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePlatformUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePlatformUserResponseValidationError{}

// Validate checks the field values on DelegatedCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelegatedCheckoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelegatedCheckoutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelegatedCheckoutRequestMultiError, or nil if none found.
func (m *DelegatedCheckoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelegatedCheckoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DelegatedCheckoutRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = DelegatedCheckoutRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetSubscriptionBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelegatedCheckoutRequestValidationError{
					field:  "SubscriptionBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelegatedCheckoutRequestValidationError{
					field:  "SubscriptionBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscriptionBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelegatedCheckoutRequestValidationError{
				field:  "SubscriptionBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProductBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelegatedCheckoutRequestValidationError{
					field:  "ProductBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelegatedCheckoutRequestValidationError{
					field:  "ProductBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelegatedCheckoutRequestValidationError{
				field:  "ProductBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelegatedCheckoutRequestMultiError(errors)
	}

	return nil
}

func (m *DelegatedCheckoutRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DelegatedCheckoutRequestMultiError is an error wrapping multiple validation
// errors returned by DelegatedCheckoutRequest.ValidateAll() if the designated
// constraints aren't met.
type DelegatedCheckoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelegatedCheckoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelegatedCheckoutRequestMultiError) AllErrors() []error { return m }

// DelegatedCheckoutRequestValidationError is the validation error returned by
// DelegatedCheckoutRequest.Validate if the designated constraints aren't met.
type DelegatedCheckoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelegatedCheckoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelegatedCheckoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelegatedCheckoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelegatedCheckoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelegatedCheckoutRequestValidationError) ErrorName() string {
	return "DelegatedCheckoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelegatedCheckoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelegatedCheckoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelegatedCheckoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelegatedCheckoutRequestValidationError{}

// Validate checks the field values on DelegatedCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelegatedCheckoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelegatedCheckoutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelegatedCheckoutResponseMultiError, or nil if none found.
func (m *DelegatedCheckoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelegatedCheckoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelegatedCheckoutResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelegatedCheckoutResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelegatedCheckoutResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DelegatedCheckoutResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DelegatedCheckoutResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DelegatedCheckoutResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DelegatedCheckoutResponseMultiError(errors)
	}

	return nil
}

// DelegatedCheckoutResponseMultiError is an error wrapping multiple validation
// errors returned by DelegatedCheckoutResponse.ValidateAll() if the
// designated constraints aren't met.
type DelegatedCheckoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelegatedCheckoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelegatedCheckoutResponseMultiError) AllErrors() []error { return m }

// DelegatedCheckoutResponseValidationError is the validation error returned by
// DelegatedCheckoutResponse.Validate if the designated constraints aren't met.
type DelegatedCheckoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelegatedCheckoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelegatedCheckoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelegatedCheckoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelegatedCheckoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelegatedCheckoutResponseValidationError) ErrorName() string {
	return "DelegatedCheckoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelegatedCheckoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelegatedCheckoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelegatedCheckoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelegatedCheckoutResponseValidationError{}

// Validate checks the field values on ListAllInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllInvoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllInvoicesRequestMultiError, or nil if none found.
func (m *ListAllInvoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllInvoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListAllInvoicesRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListAllInvoicesRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListAllInvoicesRequestMultiError(errors)
	}

	return nil
}

// ListAllInvoicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllInvoicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllInvoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllInvoicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllInvoicesRequestMultiError) AllErrors() []error { return m }

// ListAllInvoicesRequestValidationError is the validation error returned by
// ListAllInvoicesRequest.Validate if the designated constraints aren't met.
type ListAllInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllInvoicesRequestValidationError) ErrorName() string {
	return "ListAllInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllInvoicesRequestValidationError{}

// Validate checks the field values on ListAllInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllInvoicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllInvoicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllInvoicesResponseMultiError, or nil if none found.
func (m *ListAllInvoicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllInvoicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllInvoicesResponseValidationError{
					field:  fmt.Sprintf("Invoices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListAllInvoicesResponseMultiError(errors)
	}

	return nil
}

// ListAllInvoicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllInvoicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllInvoicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllInvoicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllInvoicesResponseMultiError) AllErrors() []error { return m }

// ListAllInvoicesResponseValidationError is the validation error returned by
// ListAllInvoicesResponse.Validate if the designated constraints aren't met.
type ListAllInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllInvoicesResponseValidationError) ErrorName() string {
	return "ListAllInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllInvoicesResponseValidationError{}

// Validate checks the field values on GenerateInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateInvoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInvoicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateInvoicesRequestMultiError, or nil if none found.
func (m *GenerateInvoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInvoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateInvoicesRequestMultiError(errors)
	}

	return nil
}

// GenerateInvoicesRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateInvoicesRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateInvoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInvoicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInvoicesRequestMultiError) AllErrors() []error { return m }

// GenerateInvoicesRequestValidationError is the validation error returned by
// GenerateInvoicesRequest.Validate if the designated constraints aren't met.
type GenerateInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInvoicesRequestValidationError) ErrorName() string {
	return "GenerateInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInvoicesRequestValidationError{}

// Validate checks the field values on GenerateInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateInvoicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInvoicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateInvoicesResponseMultiError, or nil if none found.
func (m *GenerateInvoicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInvoicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateInvoicesResponseMultiError(errors)
	}

	return nil
}

// GenerateInvoicesResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateInvoicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateInvoicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInvoicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInvoicesResponseMultiError) AllErrors() []error { return m }

// GenerateInvoicesResponseValidationError is the validation error returned by
// GenerateInvoicesResponse.Validate if the designated constraints aren't met.
type GenerateInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInvoicesResponseValidationError) ErrorName() string {
	return "GenerateInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInvoicesResponseValidationError{}

// Validate checks the field values on ListAllBillingAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllBillingAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllBillingAccountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAllBillingAccountsRequestMultiError, or nil if none found.
func (m *ListAllBillingAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllBillingAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if len(errors) > 0 {
		return ListAllBillingAccountsRequestMultiError(errors)
	}

	return nil
}

// ListAllBillingAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllBillingAccountsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAllBillingAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllBillingAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllBillingAccountsRequestMultiError) AllErrors() []error { return m }

// ListAllBillingAccountsRequestValidationError is the validation error
// returned by ListAllBillingAccountsRequest.Validate if the designated
// constraints aren't met.
type ListAllBillingAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllBillingAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllBillingAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllBillingAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllBillingAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllBillingAccountsRequestValidationError) ErrorName() string {
	return "ListAllBillingAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllBillingAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllBillingAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllBillingAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllBillingAccountsRequestValidationError{}

// Validate checks the field values on ListAllBillingAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllBillingAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllBillingAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAllBillingAccountsResponseMultiError, or nil if none found.
func (m *ListAllBillingAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllBillingAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBillingAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllBillingAccountsResponseValidationError{
						field:  fmt.Sprintf("BillingAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllBillingAccountsResponseValidationError{
						field:  fmt.Sprintf("BillingAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllBillingAccountsResponseValidationError{
					field:  fmt.Sprintf("BillingAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllBillingAccountsResponseMultiError(errors)
	}

	return nil
}

// ListAllBillingAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAllBillingAccountsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAllBillingAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllBillingAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllBillingAccountsResponseMultiError) AllErrors() []error { return m }

// ListAllBillingAccountsResponseValidationError is the validation error
// returned by ListAllBillingAccountsResponse.Validate if the designated
// constraints aren't met.
type ListAllBillingAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllBillingAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllBillingAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllBillingAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllBillingAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllBillingAccountsResponseValidationError) ErrorName() string {
	return "ListAllBillingAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllBillingAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllBillingAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllBillingAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllBillingAccountsResponseValidationError{}

// Validate checks the field values on RevertBillingUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertBillingUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertBillingUsageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertBillingUsageRequestMultiError, or nil if none found.
func (m *RevertBillingUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertBillingUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = RevertBillingUsageRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if err := m._validateUuid(m.GetUsageId()); err != nil {
		err = RevertBillingUsageRequestValidationError{
			field:  "UsageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() < 0 {
		err := RevertBillingUsageRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevertBillingUsageRequestMultiError(errors)
	}

	return nil
}

func (m *RevertBillingUsageRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RevertBillingUsageRequestMultiError is an error wrapping multiple validation
// errors returned by RevertBillingUsageRequest.ValidateAll() if the
// designated constraints aren't met.
type RevertBillingUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertBillingUsageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertBillingUsageRequestMultiError) AllErrors() []error { return m }

// RevertBillingUsageRequestValidationError is the validation error returned by
// RevertBillingUsageRequest.Validate if the designated constraints aren't met.
type RevertBillingUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertBillingUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertBillingUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertBillingUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertBillingUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertBillingUsageRequestValidationError) ErrorName() string {
	return "RevertBillingUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevertBillingUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertBillingUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertBillingUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertBillingUsageRequestValidationError{}

// Validate checks the field values on RevertBillingUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertBillingUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertBillingUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertBillingUsageResponseMultiError, or nil if none found.
func (m *RevertBillingUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertBillingUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevertBillingUsageResponseMultiError(errors)
	}

	return nil
}

// RevertBillingUsageResponseMultiError is an error wrapping multiple
// validation errors returned by RevertBillingUsageResponse.ValidateAll() if
// the designated constraints aren't met.
type RevertBillingUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertBillingUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertBillingUsageResponseMultiError) AllErrors() []error { return m }

// RevertBillingUsageResponseValidationError is the validation error returned
// by RevertBillingUsageResponse.Validate if the designated constraints aren't met.
type RevertBillingUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertBillingUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertBillingUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertBillingUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertBillingUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertBillingUsageResponseValidationError) ErrorName() string {
	return "RevertBillingUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevertBillingUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertBillingUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertBillingUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertBillingUsageResponseValidationError{}

// Validate checks the field values on WebhookRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebhookRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebhookRequestBodyMultiError, or nil if none found.
func (m *WebhookRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = WebhookRequestBodyValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := WebhookRequestBodyValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Headers

	if m.GetState() != "" {

		if _, ok := _WebhookRequestBody_State_InLookup[m.GetState()]; !ok {
			err := WebhookRequestBodyValidationError{
				field:  "State",
				reason: "value must be in list [enabled disabled]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebhookRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebhookRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebhookRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebhookRequestBodyMultiError(errors)
	}

	return nil
}

// WebhookRequestBodyMultiError is an error wrapping multiple validation errors
// returned by WebhookRequestBody.ValidateAll() if the designated constraints
// aren't met.
type WebhookRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookRequestBodyMultiError) AllErrors() []error { return m }

// WebhookRequestBodyValidationError is the validation error returned by
// WebhookRequestBody.Validate if the designated constraints aren't met.
type WebhookRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookRequestBodyValidationError) ErrorName() string {
	return "WebhookRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e WebhookRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookRequestBodyValidationError{}

var _WebhookRequestBody_State_InLookup = map[string]struct{}{
	"enabled":  {},
	"disabled": {},
}

// Validate checks the field values on CreateWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWebhookRequestMultiError, or nil if none found.
func (m *CreateWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWebhookRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWebhookRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWebhookRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWebhookRequestMultiError(errors)
	}

	return nil
}

// CreateWebhookRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWebhookRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebhookRequestMultiError) AllErrors() []error { return m }

// CreateWebhookRequestValidationError is the validation error returned by
// CreateWebhookRequest.Validate if the designated constraints aren't met.
type CreateWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebhookRequestValidationError) ErrorName() string {
	return "CreateWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebhookRequestValidationError{}

// Validate checks the field values on CreateWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWebhookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWebhookResponseMultiError, or nil if none found.
func (m *CreateWebhookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebhookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWebhookResponseValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWebhookResponseValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWebhookResponseValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWebhookResponseMultiError(errors)
	}

	return nil
}

// CreateWebhookResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWebhookResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWebhookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebhookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebhookResponseMultiError) AllErrors() []error { return m }

// CreateWebhookResponseValidationError is the validation error returned by
// CreateWebhookResponse.Validate if the designated constraints aren't met.
type CreateWebhookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebhookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebhookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebhookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebhookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebhookResponseValidationError) ErrorName() string {
	return "CreateWebhookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebhookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebhookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebhookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebhookResponseValidationError{}

// Validate checks the field values on UpdateWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWebhookRequestMultiError, or nil if none found.
func (m *UpdateWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateWebhookRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWebhookRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWebhookRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWebhookRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWebhookRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateWebhookRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateWebhookRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWebhookRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebhookRequestMultiError) AllErrors() []error { return m }

// UpdateWebhookRequestValidationError is the validation error returned by
// UpdateWebhookRequest.Validate if the designated constraints aren't met.
type UpdateWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebhookRequestValidationError) ErrorName() string {
	return "UpdateWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebhookRequestValidationError{}

// Validate checks the field values on UpdateWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWebhookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWebhookResponseMultiError, or nil if none found.
func (m *UpdateWebhookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebhookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWebhookResponseValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWebhookResponseValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWebhookResponseValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWebhookResponseMultiError(errors)
	}

	return nil
}

// UpdateWebhookResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWebhookResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWebhookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebhookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebhookResponseMultiError) AllErrors() []error { return m }

// UpdateWebhookResponseValidationError is the validation error returned by
// UpdateWebhookResponse.Validate if the designated constraints aren't met.
type UpdateWebhookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebhookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebhookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebhookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebhookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebhookResponseValidationError) ErrorName() string {
	return "UpdateWebhookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebhookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebhookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebhookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebhookResponseValidationError{}

// Validate checks the field values on DeleteWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWebhookRequestMultiError, or nil if none found.
func (m *DeleteWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteWebhookRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWebhookRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteWebhookRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteWebhookRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWebhookRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWebhookRequestMultiError) AllErrors() []error { return m }

// DeleteWebhookRequestValidationError is the validation error returned by
// DeleteWebhookRequest.Validate if the designated constraints aren't met.
type DeleteWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWebhookRequestValidationError) ErrorName() string {
	return "DeleteWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWebhookRequestValidationError{}

// Validate checks the field values on DeleteWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWebhookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWebhookResponseMultiError, or nil if none found.
func (m *DeleteWebhookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWebhookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWebhookResponseMultiError(errors)
	}

	return nil
}

// DeleteWebhookResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWebhookResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWebhookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWebhookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWebhookResponseMultiError) AllErrors() []error { return m }

// DeleteWebhookResponseValidationError is the validation error returned by
// DeleteWebhookResponse.Validate if the designated constraints aren't met.
type DeleteWebhookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWebhookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWebhookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWebhookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWebhookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWebhookResponseValidationError) ErrorName() string {
	return "DeleteWebhookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWebhookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWebhookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWebhookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWebhookResponseValidationError{}

// Validate checks the field values on ListWebhooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWebhooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWebhooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWebhooksRequestMultiError, or nil if none found.
func (m *ListWebhooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWebhooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListWebhooksRequestMultiError(errors)
	}

	return nil
}

// ListWebhooksRequestMultiError is an error wrapping multiple validation
// errors returned by ListWebhooksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWebhooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWebhooksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWebhooksRequestMultiError) AllErrors() []error { return m }

// ListWebhooksRequestValidationError is the validation error returned by
// ListWebhooksRequest.Validate if the designated constraints aren't met.
type ListWebhooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWebhooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWebhooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWebhooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWebhooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWebhooksRequestValidationError) ErrorName() string {
	return "ListWebhooksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWebhooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWebhooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWebhooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWebhooksRequestValidationError{}

// Validate checks the field values on ListWebhooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWebhooksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWebhooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWebhooksResponseMultiError, or nil if none found.
func (m *ListWebhooksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWebhooksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWebhooks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWebhooksResponseValidationError{
						field:  fmt.Sprintf("Webhooks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWebhooksResponseValidationError{
						field:  fmt.Sprintf("Webhooks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWebhooksResponseValidationError{
					field:  fmt.Sprintf("Webhooks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWebhooksResponseMultiError(errors)
	}

	return nil
}

// ListWebhooksResponseMultiError is an error wrapping multiple validation
// errors returned by ListWebhooksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWebhooksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWebhooksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWebhooksResponseMultiError) AllErrors() []error { return m }

// ListWebhooksResponseValidationError is the validation error returned by
// ListWebhooksResponse.Validate if the designated constraints aren't met.
type ListWebhooksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWebhooksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWebhooksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWebhooksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWebhooksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWebhooksResponseValidationError) ErrorName() string {
	return "ListWebhooksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWebhooksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWebhooksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWebhooksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWebhooksResponseValidationError{}

// Validate checks the field values on UpdateBillingAccountLimitsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBillingAccountLimitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingAccountLimitsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBillingAccountLimitsRequestMultiError, or nil if none found.
func (m *UpdateBillingAccountLimitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingAccountLimitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := UpdateBillingAccountLimitsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = UpdateBillingAccountLimitsRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for CreditMin

	if len(errors) > 0 {
		return UpdateBillingAccountLimitsRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateBillingAccountLimitsRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateBillingAccountLimitsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBillingAccountLimitsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillingAccountLimitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingAccountLimitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingAccountLimitsRequestMultiError) AllErrors() []error { return m }

// UpdateBillingAccountLimitsRequestValidationError is the validation error
// returned by UpdateBillingAccountLimitsRequest.Validate if the designated
// constraints aren't met.
type UpdateBillingAccountLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingAccountLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingAccountLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingAccountLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingAccountLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingAccountLimitsRequestValidationError) ErrorName() string {
	return "UpdateBillingAccountLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingAccountLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingAccountLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingAccountLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingAccountLimitsRequestValidationError{}

// Validate checks the field values on UpdateBillingAccountLimitsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBillingAccountLimitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingAccountLimitsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBillingAccountLimitsResponseMultiError, or nil if none found.
func (m *UpdateBillingAccountLimitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingAccountLimitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBillingAccountLimitsResponseMultiError(errors)
	}

	return nil
}

// UpdateBillingAccountLimitsResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBillingAccountLimitsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBillingAccountLimitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingAccountLimitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingAccountLimitsResponseMultiError) AllErrors() []error { return m }

// UpdateBillingAccountLimitsResponseValidationError is the validation error
// returned by UpdateBillingAccountLimitsResponse.Validate if the designated
// constraints aren't met.
type UpdateBillingAccountLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingAccountLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingAccountLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingAccountLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingAccountLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingAccountLimitsResponseValidationError) ErrorName() string {
	return "UpdateBillingAccountLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingAccountLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingAccountLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingAccountLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingAccountLimitsResponseValidationError{}

// Validate checks the field values on SetOrganizationKycRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationKycRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationKycRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrganizationKycRequestMultiError, or nil if none found.
func (m *SetOrganizationKycRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationKycRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for Status

	// no validation rules for Link

	if len(errors) > 0 {
		return SetOrganizationKycRequestMultiError(errors)
	}

	return nil
}

// SetOrganizationKycRequestMultiError is an error wrapping multiple validation
// errors returned by SetOrganizationKycRequest.ValidateAll() if the
// designated constraints aren't met.
type SetOrganizationKycRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationKycRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationKycRequestMultiError) AllErrors() []error { return m }

// SetOrganizationKycRequestValidationError is the validation error returned by
// SetOrganizationKycRequest.Validate if the designated constraints aren't met.
type SetOrganizationKycRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationKycRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationKycRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationKycRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationKycRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationKycRequestValidationError) ErrorName() string {
	return "SetOrganizationKycRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationKycRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationKycRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationKycRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationKycRequestValidationError{}

// Validate checks the field values on SearchOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchOrganizationsRequestMultiError, or nil if none found.
func (m *SearchOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchOrganizationsRequestMultiError(errors)
	}

	return nil
}

// SearchOrganizationsRequestMultiError is an error wrapping multiple
// validation errors returned by SearchOrganizationsRequest.ValidateAll() if
// the designated constraints aren't met.
type SearchOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationsRequestMultiError) AllErrors() []error { return m }

// SearchOrganizationsRequestValidationError is the validation error returned
// by SearchOrganizationsRequest.Validate if the designated constraints aren't met.
type SearchOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationsRequestValidationError) ErrorName() string {
	return "SearchOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationsRequestValidationError{}

// Validate checks the field values on SetOrganizationKycResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrganizationKycResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationKycResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrganizationKycResponseMultiError, or nil if none found.
func (m *SetOrganizationKycResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationKycResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationKyc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOrganizationKycResponseValidationError{
					field:  "OrganizationKyc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOrganizationKycResponseValidationError{
					field:  "OrganizationKyc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationKyc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOrganizationKycResponseValidationError{
				field:  "OrganizationKyc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetOrganizationKycResponseMultiError(errors)
	}

	return nil
}

// SetOrganizationKycResponseMultiError is an error wrapping multiple
// validation errors returned by SetOrganizationKycResponse.ValidateAll() if
// the designated constraints aren't met.
type SetOrganizationKycResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationKycResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationKycResponseMultiError) AllErrors() []error { return m }

// SetOrganizationKycResponseValidationError is the validation error returned
// by SetOrganizationKycResponse.Validate if the designated constraints aren't met.
type SetOrganizationKycResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationKycResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationKycResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationKycResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationKycResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationKycResponseValidationError) ErrorName() string {
	return "SetOrganizationKycResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationKycResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationKycResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationKycResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationKycResponseValidationError{}

// Validate checks the field values on SearchOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchOrganizationsResponseMultiError, or nil if none found.
func (m *SearchOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchOrganizationsResponseMultiError(errors)
	}

	return nil
}

// SearchOrganizationsResponseMultiError is an error wrapping multiple
// validation errors returned by SearchOrganizationsResponse.ValidateAll() if
// the designated constraints aren't met.
type SearchOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationsResponseMultiError) AllErrors() []error { return m }

// SearchOrganizationsResponseValidationError is the validation error returned
// by SearchOrganizationsResponse.Validate if the designated constraints
// aren't met.
type SearchOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationsResponseValidationError) ErrorName() string {
	return "SearchOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationsResponseValidationError{}

// Validate checks the field values on
// SearchOrganizationsResponse_OrganizationResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchOrganizationsResponse_OrganizationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchOrganizationsResponse_OrganizationResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SearchOrganizationsResponse_OrganizationResultMultiError, or nil if none found.
func (m *SearchOrganizationsResponse_OrganizationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchOrganizationsResponse_OrganizationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsResponse_OrganizationResultValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsResponse_OrganizationResultValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsResponse_OrganizationResultValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for Avatar

	// no validation rules for CreatedBy

	// no validation rules for BillingPlanName

	if _, ok := _SearchOrganizationsResponse_OrganizationResult_PaymentMode_InLookup[m.GetPaymentMode()]; !ok {
		err := SearchOrganizationsResponse_OrganizationResultValidationError{
			field:  "PaymentMode",
			reason: "value must be in list [prepaid postpaid]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBillingCycleEndsAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "BillingCycleEndsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchOrganizationsResponse_OrganizationResultValidationError{
					field:  "BillingCycleEndsAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingCycleEndsAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchOrganizationsResponse_OrganizationResultValidationError{
				field:  "BillingCycleEndsAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	if len(errors) > 0 {
		return SearchOrganizationsResponse_OrganizationResultMultiError(errors)
	}

	return nil
}

// SearchOrganizationsResponse_OrganizationResultMultiError is an error
// wrapping multiple validation errors returned by
// SearchOrganizationsResponse_OrganizationResult.ValidateAll() if the
// designated constraints aren't met.
type SearchOrganizationsResponse_OrganizationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchOrganizationsResponse_OrganizationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchOrganizationsResponse_OrganizationResultMultiError) AllErrors() []error { return m }

// SearchOrganizationsResponse_OrganizationResultValidationError is the
// validation error returned by
// SearchOrganizationsResponse_OrganizationResult.Validate if the designated
// constraints aren't met.
type SearchOrganizationsResponse_OrganizationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchOrganizationsResponse_OrganizationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchOrganizationsResponse_OrganizationResultValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchOrganizationsResponse_OrganizationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchOrganizationsResponse_OrganizationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchOrganizationsResponse_OrganizationResultValidationError) ErrorName() string {
	return "SearchOrganizationsResponse_OrganizationResultValidationError"
}

// Error satisfies the builtin error interface
func (e SearchOrganizationsResponse_OrganizationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchOrganizationsResponse_OrganizationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchOrganizationsResponse_OrganizationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchOrganizationsResponse_OrganizationResultValidationError{}

var _SearchOrganizationsResponse_OrganizationResult_PaymentMode_InLookup = map[string]struct{}{
	"prepaid":  {},
	"postpaid": {},
}
