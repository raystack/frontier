// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: raystack/frontier/v1beta1/frontier.proto

package frontierv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _frontier_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on BillingAccountRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingAccountRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingAccountRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BillingAccountRequestBodyMultiError, or nil if none found.
func (m *BillingAccountRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingAccountRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingAccountRequestBodyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingAccountRequestBodyValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingAccountRequestBodyValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	for idx, item := range m.GetTaxData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BillingAccountRequestBodyValidationError{
						field:  fmt.Sprintf("TaxData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BillingAccountRequestBodyValidationError{
						field:  fmt.Sprintf("TaxData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BillingAccountRequestBodyValidationError{
					field:  fmt.Sprintf("TaxData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BillingAccountRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BillingAccountRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BillingAccountRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BillingAccountRequestBodyMultiError(errors)
	}

	return nil
}

// BillingAccountRequestBodyMultiError is an error wrapping multiple validation
// errors returned by BillingAccountRequestBody.ValidateAll() if the
// designated constraints aren't met.
type BillingAccountRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingAccountRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingAccountRequestBodyMultiError) AllErrors() []error { return m }

// BillingAccountRequestBodyValidationError is the validation error returned by
// BillingAccountRequestBody.Validate if the designated constraints aren't met.
type BillingAccountRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingAccountRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingAccountRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingAccountRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingAccountRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingAccountRequestBodyValidationError) ErrorName() string {
	return "BillingAccountRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e BillingAccountRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingAccountRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingAccountRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingAccountRequestBodyValidationError{}

// Validate checks the field values on CreateBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBillingAccountRequestMultiError, or nil if none found.
func (m *CreateBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := CreateBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBody() == nil {
		err := CreateBillingAccountRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBillingAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBillingAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBillingAccountRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offline

	if len(errors) > 0 {
		return CreateBillingAccountRequestMultiError(errors)
	}

	return nil
}

// CreateBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBillingAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBillingAccountRequestMultiError) AllErrors() []error { return m }

// CreateBillingAccountRequestValidationError is the validation error returned
// by CreateBillingAccountRequest.Validate if the designated constraints
// aren't met.
type CreateBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBillingAccountRequestValidationError) ErrorName() string {
	return "CreateBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBillingAccountRequestValidationError{}

// Validate checks the field values on CreateBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBillingAccountResponseMultiError, or nil if none found.
func (m *CreateBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBillingAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBillingAccountResponseValidationError{
				field:  "BillingAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBillingAccountResponseMultiError(errors)
	}

	return nil
}

// CreateBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CreateBillingAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBillingAccountResponseMultiError) AllErrors() []error { return m }

// CreateBillingAccountResponseValidationError is the validation error returned
// by CreateBillingAccountResponse.Validate if the designated constraints
// aren't met.
type CreateBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBillingAccountResponseValidationError) ErrorName() string {
	return "CreateBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBillingAccountResponseValidationError{}

// Validate checks the field values on GetBillingAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillingAccountRequestMultiError, or nil if none found.
func (m *GetBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := GetBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithPaymentMethods

	if len(errors) > 0 {
		return GetBillingAccountRequestMultiError(errors)
	}

	return nil
}

// GetBillingAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetBillingAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingAccountRequestMultiError) AllErrors() []error { return m }

// GetBillingAccountRequestValidationError is the validation error returned by
// GetBillingAccountRequest.Validate if the designated constraints aren't met.
type GetBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingAccountRequestValidationError) ErrorName() string {
	return "GetBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingAccountRequestValidationError{}

// Validate checks the field values on GetBillingAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillingAccountResponseMultiError, or nil if none found.
func (m *GetBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBillingAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillingAccountResponseValidationError{
				field:  "BillingAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBillingAccountResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBillingAccountResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBillingAccountResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBillingAccountResponseMultiError(errors)
	}

	return nil
}

// GetBillingAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetBillingAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingAccountResponseMultiError) AllErrors() []error { return m }

// GetBillingAccountResponseValidationError is the validation error returned by
// GetBillingAccountResponse.Validate if the designated constraints aren't met.
type GetBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingAccountResponseValidationError) ErrorName() string {
	return "GetBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingAccountResponseValidationError{}

// Validate checks the field values on UpdateBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillingAccountRequestMultiError, or nil if none found.
func (m *UpdateBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := UpdateBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillingAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillingAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillingAccountRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillingAccountRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateBillingAccountRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBillingAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingAccountRequestMultiError) AllErrors() []error { return m }

// UpdateBillingAccountRequestValidationError is the validation error returned
// by UpdateBillingAccountRequest.Validate if the designated constraints
// aren't met.
type UpdateBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingAccountRequestValidationError) ErrorName() string {
	return "UpdateBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingAccountRequestValidationError{}

// Validate checks the field values on UpdateBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBillingAccountResponseMultiError, or nil if none found.
func (m *UpdateBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBillingAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBillingAccountResponseValidationError{
					field:  "BillingAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBillingAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBillingAccountResponseValidationError{
				field:  "BillingAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBillingAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateBillingAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBillingAccountResponseMultiError) AllErrors() []error { return m }

// UpdateBillingAccountResponseValidationError is the validation error returned
// by UpdateBillingAccountResponse.Validate if the designated constraints
// aren't met.
type UpdateBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBillingAccountResponseValidationError) ErrorName() string {
	return "UpdateBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBillingAccountResponseValidationError{}

// Validate checks the field values on RegisterBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBillingAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterBillingAccountRequestMultiError, or nil if none found.
func (m *RegisterBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RegisterBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := RegisterBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterBillingAccountRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterBillingAccountRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterBillingAccountRequest.ValidateAll()
// if the designated constraints aren't met.
type RegisterBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBillingAccountRequestMultiError) AllErrors() []error { return m }

// RegisterBillingAccountRequestValidationError is the validation error
// returned by RegisterBillingAccountRequest.Validate if the designated
// constraints aren't met.
type RegisterBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBillingAccountRequestValidationError) ErrorName() string {
	return "RegisterBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBillingAccountRequestValidationError{}

// Validate checks the field values on RegisterBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterBillingAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterBillingAccountResponseMultiError, or nil if none found.
func (m *RegisterBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterBillingAccountResponseMultiError(errors)
	}

	return nil
}

// RegisterBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterBillingAccountResponse.ValidateAll()
// if the designated constraints aren't met.
type RegisterBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterBillingAccountResponseMultiError) AllErrors() []error { return m }

// RegisterBillingAccountResponseValidationError is the validation error
// returned by RegisterBillingAccountResponse.Validate if the designated
// constraints aren't met.
type RegisterBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterBillingAccountResponseValidationError) ErrorName() string {
	return "RegisterBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterBillingAccountResponseValidationError{}

// Validate checks the field values on ListBillingAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBillingAccountsRequestMultiError, or nil if none found.
func (m *ListBillingAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := ListBillingAccountsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListBillingAccountsRequestMultiError(errors)
	}

	return nil
}

// ListBillingAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBillingAccountsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBillingAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingAccountsRequestMultiError) AllErrors() []error { return m }

// ListBillingAccountsRequestValidationError is the validation error returned
// by ListBillingAccountsRequest.Validate if the designated constraints aren't met.
type ListBillingAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingAccountsRequestValidationError) ErrorName() string {
	return "ListBillingAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingAccountsRequestValidationError{}

// Validate checks the field values on ListBillingAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBillingAccountsResponseMultiError, or nil if none found.
func (m *ListBillingAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBillingAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBillingAccountsResponseValidationError{
						field:  fmt.Sprintf("BillingAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBillingAccountsResponseValidationError{
						field:  fmt.Sprintf("BillingAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBillingAccountsResponseValidationError{
					field:  fmt.Sprintf("BillingAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBillingAccountsResponseMultiError(errors)
	}

	return nil
}

// ListBillingAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBillingAccountsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBillingAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingAccountsResponseMultiError) AllErrors() []error { return m }

// ListBillingAccountsResponseValidationError is the validation error returned
// by ListBillingAccountsResponse.Validate if the designated constraints
// aren't met.
type ListBillingAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingAccountsResponseValidationError) ErrorName() string {
	return "ListBillingAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingAccountsResponseValidationError{}

// Validate checks the field values on DeleteBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBillingAccountRequestMultiError, or nil if none found.
func (m *DeleteBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := DeleteBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBillingAccountRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteBillingAccountRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBillingAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBillingAccountRequestMultiError) AllErrors() []error { return m }

// DeleteBillingAccountRequestValidationError is the validation error returned
// by DeleteBillingAccountRequest.Validate if the designated constraints
// aren't met.
type DeleteBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBillingAccountRequestValidationError) ErrorName() string {
	return "DeleteBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBillingAccountRequestValidationError{}

// Validate checks the field values on DeleteBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBillingAccountResponseMultiError, or nil if none found.
func (m *DeleteBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBillingAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBillingAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBillingAccountResponseMultiError) AllErrors() []error { return m }

// DeleteBillingAccountResponseValidationError is the validation error returned
// by DeleteBillingAccountResponse.Validate if the designated constraints
// aren't met.
type DeleteBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBillingAccountResponseValidationError) ErrorName() string {
	return "DeleteBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBillingAccountResponseValidationError{}

// Validate checks the field values on EnableBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableBillingAccountRequestMultiError, or nil if none found.
func (m *EnableBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = EnableBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := EnableBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableBillingAccountRequestMultiError(errors)
	}

	return nil
}

func (m *EnableBillingAccountRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EnableBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by EnableBillingAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type EnableBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableBillingAccountRequestMultiError) AllErrors() []error { return m }

// EnableBillingAccountRequestValidationError is the validation error returned
// by EnableBillingAccountRequest.Validate if the designated constraints
// aren't met.
type EnableBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableBillingAccountRequestValidationError) ErrorName() string {
	return "EnableBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableBillingAccountRequestValidationError{}

// Validate checks the field values on EnableBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableBillingAccountResponseMultiError, or nil if none found.
func (m *EnableBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableBillingAccountResponseMultiError(errors)
	}

	return nil
}

// EnableBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by EnableBillingAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type EnableBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableBillingAccountResponseMultiError) AllErrors() []error { return m }

// EnableBillingAccountResponseValidationError is the validation error returned
// by EnableBillingAccountResponse.Validate if the designated constraints
// aren't met.
type EnableBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableBillingAccountResponseValidationError) ErrorName() string {
	return "EnableBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableBillingAccountResponseValidationError{}

// Validate checks the field values on DisableBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableBillingAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableBillingAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableBillingAccountRequestMultiError, or nil if none found.
func (m *DisableBillingAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableBillingAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DisableBillingAccountRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := DisableBillingAccountRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableBillingAccountRequestMultiError(errors)
	}

	return nil
}

func (m *DisableBillingAccountRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DisableBillingAccountRequestMultiError is an error wrapping multiple
// validation errors returned by DisableBillingAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type DisableBillingAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableBillingAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableBillingAccountRequestMultiError) AllErrors() []error { return m }

// DisableBillingAccountRequestValidationError is the validation error returned
// by DisableBillingAccountRequest.Validate if the designated constraints
// aren't met.
type DisableBillingAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableBillingAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableBillingAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableBillingAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableBillingAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableBillingAccountRequestValidationError) ErrorName() string {
	return "DisableBillingAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableBillingAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableBillingAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableBillingAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableBillingAccountRequestValidationError{}

// Validate checks the field values on DisableBillingAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableBillingAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableBillingAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisableBillingAccountResponseMultiError, or nil if none found.
func (m *DisableBillingAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableBillingAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableBillingAccountResponseMultiError(errors)
	}

	return nil
}

// DisableBillingAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DisableBillingAccountResponse.ValidateAll()
// if the designated constraints aren't met.
type DisableBillingAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableBillingAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableBillingAccountResponseMultiError) AllErrors() []error { return m }

// DisableBillingAccountResponseValidationError is the validation error
// returned by DisableBillingAccountResponse.Validate if the designated
// constraints aren't met.
type DisableBillingAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableBillingAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableBillingAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableBillingAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableBillingAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableBillingAccountResponseValidationError) ErrorName() string {
	return "DisableBillingAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableBillingAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableBillingAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableBillingAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableBillingAccountResponseValidationError{}

// Validate checks the field values on GetBillingBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillingBalanceRequestMultiError, or nil if none found.
func (m *GetBillingBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetBillingBalanceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := GetBillingBalanceRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBillingBalanceRequestMultiError(errors)
	}

	return nil
}

func (m *GetBillingBalanceRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBillingBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetBillingBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBillingBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingBalanceRequestMultiError) AllErrors() []error { return m }

// GetBillingBalanceRequestValidationError is the validation error returned by
// GetBillingBalanceRequest.Validate if the designated constraints aren't met.
type GetBillingBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingBalanceRequestValidationError) ErrorName() string {
	return "GetBillingBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingBalanceRequestValidationError{}

// Validate checks the field values on GetBillingBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBillingBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBillingBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBillingBalanceResponseMultiError, or nil if none found.
func (m *GetBillingBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBillingBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBalance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBillingBalanceResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBillingBalanceResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBalance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBillingBalanceResponseValidationError{
				field:  "Balance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBillingBalanceResponseMultiError(errors)
	}

	return nil
}

// GetBillingBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetBillingBalanceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBillingBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBillingBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBillingBalanceResponseMultiError) AllErrors() []error { return m }

// GetBillingBalanceResponseValidationError is the validation error returned by
// GetBillingBalanceResponse.Validate if the designated constraints aren't met.
type GetBillingBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBillingBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBillingBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBillingBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBillingBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBillingBalanceResponseValidationError) ErrorName() string {
	return "GetBillingBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBillingBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBillingBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBillingBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBillingBalanceResponseValidationError{}

// Validate checks the field values on HasTrialedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HasTrialedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasTrialedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasTrialedRequestMultiError, or nil if none found.
func (m *HasTrialedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasTrialedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = HasTrialedRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 1 {
		err := HasTrialedRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := HasTrialedRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HasTrialedRequestMultiError(errors)
	}

	return nil
}

func (m *HasTrialedRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// HasTrialedRequestMultiError is an error wrapping multiple validation errors
// returned by HasTrialedRequest.ValidateAll() if the designated constraints
// aren't met.
type HasTrialedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasTrialedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasTrialedRequestMultiError) AllErrors() []error { return m }

// HasTrialedRequestValidationError is the validation error returned by
// HasTrialedRequest.Validate if the designated constraints aren't met.
type HasTrialedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasTrialedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasTrialedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasTrialedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasTrialedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasTrialedRequestValidationError) ErrorName() string {
	return "HasTrialedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasTrialedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasTrialedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasTrialedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasTrialedRequestValidationError{}

// Validate checks the field values on HasTrialedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasTrialedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasTrialedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasTrialedResponseMultiError, or nil if none found.
func (m *HasTrialedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasTrialedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Trialed

	if len(errors) > 0 {
		return HasTrialedResponseMultiError(errors)
	}

	return nil
}

// HasTrialedResponseMultiError is an error wrapping multiple validation errors
// returned by HasTrialedResponse.ValidateAll() if the designated constraints
// aren't met.
type HasTrialedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasTrialedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasTrialedResponseMultiError) AllErrors() []error { return m }

// HasTrialedResponseValidationError is the validation error returned by
// HasTrialedResponse.Validate if the designated constraints aren't met.
type HasTrialedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasTrialedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasTrialedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasTrialedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasTrialedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasTrialedResponseValidationError) ErrorName() string {
	return "HasTrialedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasTrialedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasTrialedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasTrialedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasTrialedResponseValidationError{}

// Validate checks the field values on CreateBillingUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBillingUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBillingUsageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBillingUsageRequestMultiError, or nil if none found.
func (m *CreateBillingUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBillingUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = CreateBillingUsageRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ProjectId

	for idx, item := range m.GetUsages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBillingUsageRequestValidationError{
						field:  fmt.Sprintf("Usages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBillingUsageRequestValidationError{
						field:  fmt.Sprintf("Usages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBillingUsageRequestValidationError{
					field:  fmt.Sprintf("Usages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBillingUsageRequestMultiError(errors)
	}

	return nil
}

func (m *CreateBillingUsageRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateBillingUsageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBillingUsageRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateBillingUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBillingUsageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBillingUsageRequestMultiError) AllErrors() []error { return m }

// CreateBillingUsageRequestValidationError is the validation error returned by
// CreateBillingUsageRequest.Validate if the designated constraints aren't met.
type CreateBillingUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBillingUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBillingUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBillingUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBillingUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBillingUsageRequestValidationError) ErrorName() string {
	return "CreateBillingUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBillingUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBillingUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBillingUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBillingUsageRequestValidationError{}

// Validate checks the field values on CreateBillingUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBillingUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBillingUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBillingUsageResponseMultiError, or nil if none found.
func (m *CreateBillingUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBillingUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBillingUsageResponseMultiError(errors)
	}

	return nil
}

// CreateBillingUsageResponseMultiError is an error wrapping multiple
// validation errors returned by CreateBillingUsageResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateBillingUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBillingUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBillingUsageResponseMultiError) AllErrors() []error { return m }

// CreateBillingUsageResponseValidationError is the validation error returned
// by CreateBillingUsageResponse.Validate if the designated constraints aren't met.
type CreateBillingUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBillingUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBillingUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBillingUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBillingUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBillingUsageResponseValidationError) ErrorName() string {
	return "CreateBillingUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBillingUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBillingUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBillingUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBillingUsageResponseValidationError{}

// Validate checks the field values on ListBillingTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBillingTransactionsRequestMultiError, or nil if none found.
func (m *ListBillingTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListBillingTransactionsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = ListBillingTransactionsRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBillingTransactionsRequestValidationError{
				field:  "Since",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "StartRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "StartRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBillingTransactionsRequestValidationError{
				field:  "StartRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "EndRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBillingTransactionsRequestValidationError{
					field:  "EndRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBillingTransactionsRequestValidationError{
				field:  "EndRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListBillingTransactionsRequestMultiError(errors)
	}

	return nil
}

func (m *ListBillingTransactionsRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListBillingTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBillingTransactionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBillingTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingTransactionsRequestMultiError) AllErrors() []error { return m }

// ListBillingTransactionsRequestValidationError is the validation error
// returned by ListBillingTransactionsRequest.Validate if the designated
// constraints aren't met.
type ListBillingTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingTransactionsRequestValidationError) ErrorName() string {
	return "ListBillingTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingTransactionsRequestValidationError{}

// Validate checks the field values on ListBillingTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingTransactionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBillingTransactionsResponseMultiError, or nil if none found.
func (m *ListBillingTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBillingTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBillingTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBillingTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBillingTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListBillingTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBillingTransactionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListBillingTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingTransactionsResponseMultiError) AllErrors() []error { return m }

// ListBillingTransactionsResponseValidationError is the validation error
// returned by ListBillingTransactionsResponse.Validate if the designated
// constraints aren't met.
type ListBillingTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingTransactionsResponseValidationError) ErrorName() string {
	return "ListBillingTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingTransactionsResponseValidationError{}

// Validate checks the field values on GetSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionRequestMultiError, or nil if none found.
func (m *GetSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetSubscriptionRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = GetSubscriptionRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetSubscriptionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSubscriptionRequestMultiError(errors)
	}

	return nil
}

func (m *GetSubscriptionRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionRequestMultiError) AllErrors() []error { return m }

// GetSubscriptionRequestValidationError is the validation error returned by
// GetSubscriptionRequest.Validate if the designated constraints aren't met.
type GetSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionRequestValidationError) ErrorName() string {
	return "GetSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionRequestValidationError{}

// Validate checks the field values on GetSubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionResponseMultiError, or nil if none found.
func (m *GetSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSubscriptionResponseMultiError(errors)
	}

	return nil
}

// GetSubscriptionResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionResponseMultiError) AllErrors() []error { return m }

// GetSubscriptionResponseValidationError is the validation error returned by
// GetSubscriptionResponse.Validate if the designated constraints aren't met.
type GetSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionResponseValidationError) ErrorName() string {
	return "GetSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionResponseValidationError{}

// Validate checks the field values on ListSubscriptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsRequestMultiError, or nil if none found.
func (m *ListSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListSubscriptionsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = ListSubscriptionsRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for State

	// no validation rules for Plan

	if len(errors) > 0 {
		return ListSubscriptionsRequestMultiError(errors)
	}

	return nil
}

func (m *ListSubscriptionsRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListSubscriptionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsRequestMultiError) AllErrors() []error { return m }

// ListSubscriptionsRequestValidationError is the validation error returned by
// ListSubscriptionsRequest.Validate if the designated constraints aren't met.
type ListSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsRequestValidationError) ErrorName() string {
	return "ListSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsRequestValidationError{}

// Validate checks the field values on ListSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsResponseMultiError, or nil if none found.
func (m *ListSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("Subscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// ListSubscriptionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsResponseMultiError) AllErrors() []error { return m }

// ListSubscriptionsResponseValidationError is the validation error returned by
// ListSubscriptionsResponse.Validate if the designated constraints aren't met.
type ListSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsResponseValidationError) ErrorName() string {
	return "ListSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsResponseValidationError{}

// Validate checks the field values on UpdateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := UpdateSubscriptionRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = UpdateSubscriptionRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateSubscriptionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubscriptionRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubscriptionRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubscriptionRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubscriptionRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateSubscriptionRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionRequestValidationError is the validation error returned by
// UpdateSubscriptionRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionResponseMultiError, or nil if none found.
func (m *UpdateSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubscriptionResponseMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionResponseMultiError) AllErrors() []error { return m }

// UpdateSubscriptionResponseValidationError is the validation error returned
// by UpdateSubscriptionResponse.Validate if the designated constraints aren't met.
type UpdateSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionResponseValidationError{}

// Validate checks the field values on ChangeSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSubscriptionRequestMultiError, or nil if none found.
func (m *ChangeSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ChangeSubscriptionRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = ChangeSubscriptionRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ChangeSubscriptionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Plan

	// no validation rules for Immediate

	switch v := m.Change.(type) {
	case *ChangeSubscriptionRequest_PlanChange_:
		if v == nil {
			err := ChangeSubscriptionRequestValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlanChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeSubscriptionRequestValidationError{
						field:  "PlanChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeSubscriptionRequestValidationError{
						field:  "PlanChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlanChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeSubscriptionRequestValidationError{
					field:  "PlanChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChangeSubscriptionRequest_PhaseChange_:
		if v == nil {
			err := ChangeSubscriptionRequestValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhaseChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangeSubscriptionRequestValidationError{
						field:  "PhaseChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangeSubscriptionRequestValidationError{
						field:  "PhaseChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhaseChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangeSubscriptionRequestValidationError{
					field:  "PhaseChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChangeSubscriptionRequestMultiError(errors)
	}

	return nil
}

func (m *ChangeSubscriptionRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ChangeSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type ChangeSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSubscriptionRequestMultiError) AllErrors() []error { return m }

// ChangeSubscriptionRequestValidationError is the validation error returned by
// ChangeSubscriptionRequest.Validate if the designated constraints aren't met.
type ChangeSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionRequestValidationError) ErrorName() string {
	return "ChangeSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionRequestValidationError{}

// Validate checks the field values on ChangeSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSubscriptionResponseMultiError, or nil if none found.
func (m *ChangeSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPhase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeSubscriptionResponseValidationError{
					field:  "Phase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeSubscriptionResponseValidationError{
					field:  "Phase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeSubscriptionResponseValidationError{
				field:  "Phase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeSubscriptionResponseMultiError(errors)
	}

	return nil
}

// ChangeSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSubscriptionResponseMultiError) AllErrors() []error { return m }

// ChangeSubscriptionResponseValidationError is the validation error returned
// by ChangeSubscriptionResponse.Validate if the designated constraints aren't met.
type ChangeSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionResponseValidationError) ErrorName() string {
	return "ChangeSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionResponseValidationError{}

// Validate checks the field values on CancelSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSubscriptionRequestMultiError, or nil if none found.
func (m *CancelSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CancelSubscriptionRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = CancelSubscriptionRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CancelSubscriptionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immediate

	if len(errors) > 0 {
		return CancelSubscriptionRequestMultiError(errors)
	}

	return nil
}

func (m *CancelSubscriptionRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by CancelSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type CancelSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSubscriptionRequestMultiError) AllErrors() []error { return m }

// CancelSubscriptionRequestValidationError is the validation error returned by
// CancelSubscriptionRequest.Validate if the designated constraints aren't met.
type CancelSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSubscriptionRequestValidationError) ErrorName() string {
	return "CancelSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSubscriptionRequestValidationError{}

// Validate checks the field values on CancelSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSubscriptionResponseMultiError, or nil if none found.
func (m *CancelSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelSubscriptionResponseMultiError(errors)
	}

	return nil
}

// CancelSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by CancelSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type CancelSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSubscriptionResponseMultiError) AllErrors() []error { return m }

// CancelSubscriptionResponseValidationError is the validation error returned
// by CancelSubscriptionResponse.Validate if the designated constraints aren't met.
type CancelSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSubscriptionResponseValidationError) ErrorName() string {
	return "CancelSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSubscriptionResponseValidationError{}

// Validate checks the field values on ListPlansRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlansRequestMultiError, or nil if none found.
func (m *ListPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPlansRequestMultiError(errors)
	}

	return nil
}

// ListPlansRequestMultiError is an error wrapping multiple validation errors
// returned by ListPlansRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlansRequestMultiError) AllErrors() []error { return m }

// ListPlansRequestValidationError is the validation error returned by
// ListPlansRequest.Validate if the designated constraints aren't met.
type ListPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlansRequestValidationError) ErrorName() string { return "ListPlansRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlansRequestValidationError{}

// Validate checks the field values on ListPlansResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlansResponseMultiError, or nil if none found.
func (m *ListPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPlansResponseValidationError{
						field:  fmt.Sprintf("Plans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPlansResponseValidationError{
						field:  fmt.Sprintf("Plans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlansResponseValidationError{
					field:  fmt.Sprintf("Plans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPlansResponseMultiError(errors)
	}

	return nil
}

// ListPlansResponseMultiError is an error wrapping multiple validation errors
// returned by ListPlansResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlansResponseMultiError) AllErrors() []error { return m }

// ListPlansResponseValidationError is the validation error returned by
// ListPlansResponse.Validate if the designated constraints aren't met.
type ListPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlansResponseValidationError) ErrorName() string {
	return "ListPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlansResponseValidationError{}

// Validate checks the field values on CheckFeatureEntitlementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckFeatureEntitlementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckFeatureEntitlementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckFeatureEntitlementRequestMultiError, or nil if none found.
func (m *CheckFeatureEntitlementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckFeatureEntitlementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = CheckFeatureEntitlementRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ProjectId

	if utf8.RuneCountInString(m.GetFeature()) < 1 {
		err := CheckFeatureEntitlementRequestValidationError{
			field:  "Feature",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckFeatureEntitlementRequestMultiError(errors)
	}

	return nil
}

func (m *CheckFeatureEntitlementRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CheckFeatureEntitlementRequestMultiError is an error wrapping multiple
// validation errors returned by CheckFeatureEntitlementRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckFeatureEntitlementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckFeatureEntitlementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckFeatureEntitlementRequestMultiError) AllErrors() []error { return m }

// CheckFeatureEntitlementRequestValidationError is the validation error
// returned by CheckFeatureEntitlementRequest.Validate if the designated
// constraints aren't met.
type CheckFeatureEntitlementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFeatureEntitlementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFeatureEntitlementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFeatureEntitlementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFeatureEntitlementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFeatureEntitlementRequestValidationError) ErrorName() string {
	return "CheckFeatureEntitlementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFeatureEntitlementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFeatureEntitlementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFeatureEntitlementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFeatureEntitlementRequestValidationError{}

// Validate checks the field values on CheckFeatureEntitlementResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckFeatureEntitlementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckFeatureEntitlementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckFeatureEntitlementResponseMultiError, or nil if none found.
func (m *CheckFeatureEntitlementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckFeatureEntitlementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckFeatureEntitlementResponseMultiError(errors)
	}

	return nil
}

// CheckFeatureEntitlementResponseMultiError is an error wrapping multiple
// validation errors returned by CheckFeatureEntitlementResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckFeatureEntitlementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckFeatureEntitlementResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckFeatureEntitlementResponseMultiError) AllErrors() []error { return m }

// CheckFeatureEntitlementResponseValidationError is the validation error
// returned by CheckFeatureEntitlementResponse.Validate if the designated
// constraints aren't met.
type CheckFeatureEntitlementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckFeatureEntitlementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckFeatureEntitlementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckFeatureEntitlementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckFeatureEntitlementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckFeatureEntitlementResponseValidationError) ErrorName() string {
	return "CheckFeatureEntitlementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckFeatureEntitlementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckFeatureEntitlementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckFeatureEntitlementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckFeatureEntitlementResponseValidationError{}

// Validate checks the field values on CreateCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckoutRequestMultiError, or nil if none found.
func (m *CreateCheckoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateCheckoutRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = CreateCheckoutRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for SuccessUrl

	// no validation rules for CancelUrl

	if all {
		switch v := interface{}(m.GetSubscriptionBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "SubscriptionBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "SubscriptionBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscriptionBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckoutRequestValidationError{
				field:  "SubscriptionBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProductBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "ProductBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "ProductBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckoutRequestValidationError{
				field:  "ProductBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetupBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "SetupBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckoutRequestValidationError{
					field:  "SetupBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetupBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckoutRequestValidationError{
				field:  "SetupBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCheckoutRequestMultiError(errors)
	}

	return nil
}

func (m *CreateCheckoutRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCheckoutRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCheckoutRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckoutRequestMultiError) AllErrors() []error { return m }

// CreateCheckoutRequestValidationError is the validation error returned by
// CreateCheckoutRequest.Validate if the designated constraints aren't met.
type CreateCheckoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckoutRequestValidationError) ErrorName() string {
	return "CreateCheckoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckoutRequestValidationError{}

// Validate checks the field values on CreateCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckoutResponseMultiError, or nil if none found.
func (m *CreateCheckoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckoutSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckoutResponseValidationError{
					field:  "CheckoutSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckoutResponseValidationError{
					field:  "CheckoutSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckoutSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckoutResponseValidationError{
				field:  "CheckoutSession",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCheckoutResponseMultiError(errors)
	}

	return nil
}

// CreateCheckoutResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCheckoutResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckoutResponseMultiError) AllErrors() []error { return m }

// CreateCheckoutResponseValidationError is the validation error returned by
// CreateCheckoutResponse.Validate if the designated constraints aren't met.
type CreateCheckoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckoutResponseValidationError) ErrorName() string {
	return "CreateCheckoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckoutResponseValidationError{}

// Validate checks the field values on ListCheckoutsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckoutsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckoutsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckoutsRequestMultiError, or nil if none found.
func (m *ListCheckoutsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckoutsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListCheckoutsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = ListCheckoutsRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListCheckoutsRequestMultiError(errors)
	}

	return nil
}

func (m *ListCheckoutsRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListCheckoutsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCheckoutsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCheckoutsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckoutsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckoutsRequestMultiError) AllErrors() []error { return m }

// ListCheckoutsRequestValidationError is the validation error returned by
// ListCheckoutsRequest.Validate if the designated constraints aren't met.
type ListCheckoutsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckoutsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckoutsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckoutsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckoutsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckoutsRequestValidationError) ErrorName() string {
	return "ListCheckoutsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckoutsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckoutsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckoutsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckoutsRequestValidationError{}

// Validate checks the field values on ListCheckoutsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckoutsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckoutsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckoutsResponseMultiError, or nil if none found.
func (m *ListCheckoutsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckoutsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCheckoutSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCheckoutsResponseValidationError{
						field:  fmt.Sprintf("CheckoutSessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCheckoutsResponseValidationError{
						field:  fmt.Sprintf("CheckoutSessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCheckoutsResponseValidationError{
					field:  fmt.Sprintf("CheckoutSessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCheckoutsResponseMultiError(errors)
	}

	return nil
}

// ListCheckoutsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCheckoutsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCheckoutsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckoutsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckoutsResponseMultiError) AllErrors() []error { return m }

// ListCheckoutsResponseValidationError is the validation error returned by
// ListCheckoutsResponse.Validate if the designated constraints aren't met.
type ListCheckoutsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckoutsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckoutsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckoutsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckoutsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckoutsResponseValidationError) ErrorName() string {
	return "ListCheckoutsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckoutsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckoutsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckoutsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckoutsResponseValidationError{}

// Validate checks the field values on GetCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckoutRequestMultiError, or nil if none found.
func (m *GetCheckoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetCheckoutRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = GetCheckoutRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetCheckoutRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCheckoutRequestMultiError(errors)
	}

	return nil
}

func (m *GetCheckoutRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCheckoutRequestMultiError is an error wrapping multiple validation errors
// returned by GetCheckoutRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCheckoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckoutRequestMultiError) AllErrors() []error { return m }

// GetCheckoutRequestValidationError is the validation error returned by
// GetCheckoutRequest.Validate if the designated constraints aren't met.
type GetCheckoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckoutRequestValidationError) ErrorName() string {
	return "GetCheckoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckoutRequestValidationError{}

// Validate checks the field values on GetCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckoutResponseMultiError, or nil if none found.
func (m *GetCheckoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckoutSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCheckoutResponseValidationError{
					field:  "CheckoutSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCheckoutResponseValidationError{
					field:  "CheckoutSession",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckoutSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCheckoutResponseValidationError{
				field:  "CheckoutSession",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCheckoutResponseMultiError(errors)
	}

	return nil
}

// GetCheckoutResponseMultiError is an error wrapping multiple validation
// errors returned by GetCheckoutResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCheckoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckoutResponseMultiError) AllErrors() []error { return m }

// GetCheckoutResponseValidationError is the validation error returned by
// GetCheckoutResponse.Validate if the designated constraints aren't met.
type GetCheckoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckoutResponseValidationError) ErrorName() string {
	return "GetCheckoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckoutResponseValidationError{}

// Validate checks the field values on ProductRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductRequestBodyMultiError, or nil if none found.
func (m *ProductRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := ProductRequestBodyValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for PlanId

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductRequestBodyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductRequestBodyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductRequestBodyValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetBehavior() != "" {

		if _, ok := _ProductRequestBody_Behavior_InLookup[m.GetBehavior()]; !ok {
			err := ProductRequestBodyValidationError{
				field:  "Behavior",
				reason: "value must be in list [basic credits per_seat]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductRequestBodyValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductRequestBodyValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductRequestBodyValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBehaviorConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductRequestBodyValidationError{
					field:  "BehaviorConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductRequestBodyValidationError{
					field:  "BehaviorConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBehaviorConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductRequestBodyValidationError{
				field:  "BehaviorConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductRequestBodyMultiError(errors)
	}

	return nil
}

// ProductRequestBodyMultiError is an error wrapping multiple validation errors
// returned by ProductRequestBody.ValidateAll() if the designated constraints
// aren't met.
type ProductRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductRequestBodyMultiError) AllErrors() []error { return m }

// ProductRequestBodyValidationError is the validation error returned by
// ProductRequestBody.Validate if the designated constraints aren't met.
type ProductRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductRequestBodyValidationError) ErrorName() string {
	return "ProductRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ProductRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductRequestBodyValidationError{}

var _ProductRequestBody_Behavior_InLookup = map[string]struct{}{
	"basic":    {},
	"credits":  {},
	"per_seat": {},
}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateProductRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductRequestMultiError, or nil if none found.
func (m *GetProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetProductRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductRequestMultiError(errors)
	}

	return nil
}

// GetProductRequestMultiError is an error wrapping multiple validation errors
// returned by GetProductRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRequestMultiError) AllErrors() []error { return m }

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductResponseMultiError, or nil if none found.
func (m *GetProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductResponseMultiError(errors)
	}

	return nil
}

// GetProductResponseMultiError is an error wrapping multiple validation errors
// returned by GetProductResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductResponseMultiError) AllErrors() []error { return m }

// GetProductResponseValidationError is the validation error returned by
// GetProductResponse.Validate if the designated constraints aren't met.
type GetProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductResponseValidationError) ErrorName() string {
	return "GetProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductsRequestMultiError, or nil if none found.
func (m *ListProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProductsRequestMultiError(errors)
	}

	return nil
}

// ListProductsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductsRequestMultiError) AllErrors() []error { return m }

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductsResponseMultiError, or nil if none found.
func (m *ListProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductsResponseMultiError(errors)
	}

	return nil
}

// ListProductsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductsResponseMultiError) AllErrors() []error { return m }

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductRequestMultiError, or nil if none found.
func (m *UpdateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateProductRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductRequestMultiError(errors)
	}

	return nil
}

// UpdateProductRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductRequestMultiError) AllErrors() []error { return m }

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductResponseMultiError, or nil if none found.
func (m *UpdateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductResponseMultiError(errors)
	}

	return nil
}

// UpdateProductResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductResponseMultiError) AllErrors() []error { return m }

// UpdateProductResponseValidationError is the validation error returned by
// UpdateProductResponse.Validate if the designated constraints aren't met.
type UpdateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductResponseValidationError) ErrorName() string {
	return "UpdateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductResponseValidationError{}

// Validate checks the field values on FeatureRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeatureRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeatureRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeatureRequestBodyMultiError, or nil if none found.
func (m *FeatureRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *FeatureRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := FeatureRequestBodyValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeatureRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeatureRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeatureRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeatureRequestBodyMultiError(errors)
	}

	return nil
}

// FeatureRequestBodyMultiError is an error wrapping multiple validation errors
// returned by FeatureRequestBody.ValidateAll() if the designated constraints
// aren't met.
type FeatureRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeatureRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeatureRequestBodyMultiError) AllErrors() []error { return m }

// FeatureRequestBodyValidationError is the validation error returned by
// FeatureRequestBody.Validate if the designated constraints aren't met.
type FeatureRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureRequestBodyValidationError) ErrorName() string {
	return "FeatureRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e FeatureRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureRequestBodyValidationError{}

// Validate checks the field values on CreateFeatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeatureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeatureRequestMultiError, or nil if none found.
func (m *CreateFeatureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeatureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateFeatureRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFeatureRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFeatureRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeatureRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFeatureRequestMultiError(errors)
	}

	return nil
}

// CreateFeatureRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFeatureRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFeatureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeatureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeatureRequestMultiError) AllErrors() []error { return m }

// CreateFeatureRequestValidationError is the validation error returned by
// CreateFeatureRequest.Validate if the designated constraints aren't met.
type CreateFeatureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeatureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeatureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeatureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeatureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeatureRequestValidationError) ErrorName() string {
	return "CreateFeatureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeatureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeatureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeatureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeatureRequestValidationError{}

// Validate checks the field values on CreateFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeatureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeatureResponseMultiError, or nil if none found.
func (m *CreateFeatureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeatureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeatureResponseValidationError{
				field:  "Feature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFeatureResponseMultiError(errors)
	}

	return nil
}

// CreateFeatureResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFeatureResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFeatureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeatureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeatureResponseMultiError) AllErrors() []error { return m }

// CreateFeatureResponseValidationError is the validation error returned by
// CreateFeatureResponse.Validate if the designated constraints aren't met.
type CreateFeatureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeatureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeatureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeatureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeatureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeatureResponseValidationError) ErrorName() string {
	return "CreateFeatureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeatureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeatureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeatureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeatureResponseValidationError{}

// Validate checks the field values on GetFeatureRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFeatureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeatureRequestMultiError, or nil if none found.
func (m *GetFeatureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeatureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetFeatureRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFeatureRequestMultiError(errors)
	}

	return nil
}

// GetFeatureRequestMultiError is an error wrapping multiple validation errors
// returned by GetFeatureRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFeatureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeatureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeatureRequestMultiError) AllErrors() []error { return m }

// GetFeatureRequestValidationError is the validation error returned by
// GetFeatureRequest.Validate if the designated constraints aren't met.
type GetFeatureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeatureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeatureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeatureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeatureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeatureRequestValidationError) ErrorName() string {
	return "GetFeatureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeatureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeatureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeatureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeatureRequestValidationError{}

// Validate checks the field values on GetFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFeatureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeatureResponseMultiError, or nil if none found.
func (m *GetFeatureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeatureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFeatureResponseValidationError{
				field:  "Feature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFeatureResponseMultiError(errors)
	}

	return nil
}

// GetFeatureResponseMultiError is an error wrapping multiple validation errors
// returned by GetFeatureResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFeatureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeatureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeatureResponseMultiError) AllErrors() []error { return m }

// GetFeatureResponseValidationError is the validation error returned by
// GetFeatureResponse.Validate if the designated constraints aren't met.
type GetFeatureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeatureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeatureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeatureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeatureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeatureResponseValidationError) ErrorName() string {
	return "GetFeatureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeatureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeatureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeatureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeatureResponseValidationError{}

// Validate checks the field values on UpdateFeatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeatureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeatureRequestMultiError, or nil if none found.
func (m *UpdateFeatureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeatureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateFeatureRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFeatureRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFeatureRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeatureRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFeatureRequestMultiError(errors)
	}

	return nil
}

// UpdateFeatureRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFeatureRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFeatureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeatureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeatureRequestMultiError) AllErrors() []error { return m }

// UpdateFeatureRequestValidationError is the validation error returned by
// UpdateFeatureRequest.Validate if the designated constraints aren't met.
type UpdateFeatureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeatureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeatureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeatureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeatureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeatureRequestValidationError) ErrorName() string {
	return "UpdateFeatureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeatureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeatureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeatureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeatureRequestValidationError{}

// Validate checks the field values on UpdateFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeatureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeatureResponseMultiError, or nil if none found.
func (m *UpdateFeatureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeatureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFeatureResponseValidationError{
					field:  "Feature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeatureResponseValidationError{
				field:  "Feature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFeatureResponseMultiError(errors)
	}

	return nil
}

// UpdateFeatureResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFeatureResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFeatureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeatureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeatureResponseMultiError) AllErrors() []error { return m }

// UpdateFeatureResponseValidationError is the validation error returned by
// UpdateFeatureResponse.Validate if the designated constraints aren't met.
type UpdateFeatureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeatureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeatureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeatureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeatureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeatureResponseValidationError) ErrorName() string {
	return "UpdateFeatureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeatureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeatureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeatureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeatureResponseValidationError{}

// Validate checks the field values on ListFeaturesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeaturesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeaturesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeaturesRequestMultiError, or nil if none found.
func (m *ListFeaturesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeaturesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFeaturesRequestMultiError(errors)
	}

	return nil
}

// ListFeaturesRequestMultiError is an error wrapping multiple validation
// errors returned by ListFeaturesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFeaturesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeaturesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeaturesRequestMultiError) AllErrors() []error { return m }

// ListFeaturesRequestValidationError is the validation error returned by
// ListFeaturesRequest.Validate if the designated constraints aren't met.
type ListFeaturesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeaturesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeaturesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeaturesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeaturesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeaturesRequestValidationError) ErrorName() string {
	return "ListFeaturesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeaturesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeaturesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeaturesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeaturesRequestValidationError{}

// Validate checks the field values on ListFeaturesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeaturesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeaturesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeaturesResponseMultiError, or nil if none found.
func (m *ListFeaturesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeaturesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeaturesResponseValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeaturesResponseValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeaturesResponseValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFeaturesResponseMultiError(errors)
	}

	return nil
}

// ListFeaturesResponseMultiError is an error wrapping multiple validation
// errors returned by ListFeaturesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFeaturesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeaturesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeaturesResponseMultiError) AllErrors() []error { return m }

// ListFeaturesResponseValidationError is the validation error returned by
// ListFeaturesResponse.Validate if the designated constraints aren't met.
type ListFeaturesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeaturesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeaturesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeaturesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeaturesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeaturesResponseValidationError) ErrorName() string {
	return "ListFeaturesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeaturesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeaturesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeaturesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeaturesResponseValidationError{}

// Validate checks the field values on PlanRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlanRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanRequestBodyMultiError, or nil if none found.
func (m *PlanRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Description

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanRequestBodyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanRequestBodyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanRequestBodyValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := _PlanRequestBody_Interval_InLookup[m.GetInterval()]; !ok {
		err := PlanRequestBodyValidationError{
			field:  "Interval",
			reason: "value must be in list [day week month year]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OnStartCredits

	// no validation rules for TrialDays

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlanRequestBodyMultiError(errors)
	}

	return nil
}

// PlanRequestBodyMultiError is an error wrapping multiple validation errors
// returned by PlanRequestBody.ValidateAll() if the designated constraints
// aren't met.
type PlanRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanRequestBodyMultiError) AllErrors() []error { return m }

// PlanRequestBodyValidationError is the validation error returned by
// PlanRequestBody.Validate if the designated constraints aren't met.
type PlanRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanRequestBodyValidationError) ErrorName() string { return "PlanRequestBodyValidationError" }

// Error satisfies the builtin error interface
func (e PlanRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanRequestBodyValidationError{}

var _PlanRequestBody_Interval_InLookup = map[string]struct{}{
	"day":   {},
	"week":  {},
	"month": {},
	"year":  {},
}

// Validate checks the field values on CreatePlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlanRequestMultiError, or nil if none found.
func (m *CreatePlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreatePlanRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlanRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlanRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlanRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlanRequestMultiError(errors)
	}

	return nil
}

// CreatePlanRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePlanRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlanRequestMultiError) AllErrors() []error { return m }

// CreatePlanRequestValidationError is the validation error returned by
// CreatePlanRequest.Validate if the designated constraints aren't met.
type CreatePlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlanRequestValidationError) ErrorName() string {
	return "CreatePlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlanRequestValidationError{}

// Validate checks the field values on CreatePlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlanResponseMultiError, or nil if none found.
func (m *CreatePlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlanResponseValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlanResponseMultiError(errors)
	}

	return nil
}

// CreatePlanResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePlanResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlanResponseMultiError) AllErrors() []error { return m }

// CreatePlanResponseValidationError is the validation error returned by
// CreatePlanResponse.Validate if the designated constraints aren't met.
type CreatePlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlanResponseValidationError) ErrorName() string {
	return "CreatePlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlanResponseValidationError{}

// Validate checks the field values on GetPlanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPlanRequestMultiError,
// or nil if none found.
func (m *GetPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetPlanRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPlanRequestMultiError(errors)
	}

	return nil
}

// GetPlanRequestMultiError is an error wrapping multiple validation errors
// returned by GetPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlanRequestMultiError) AllErrors() []error { return m }

// GetPlanRequestValidationError is the validation error returned by
// GetPlanRequest.Validate if the designated constraints aren't met.
type GetPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlanRequestValidationError) ErrorName() string { return "GetPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlanRequestValidationError{}

// Validate checks the field values on GetPlanResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlanResponseMultiError, or nil if none found.
func (m *GetPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlanResponseValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPlanResponseMultiError(errors)
	}

	return nil
}

// GetPlanResponseMultiError is an error wrapping multiple validation errors
// returned by GetPlanResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlanResponseMultiError) AllErrors() []error { return m }

// GetPlanResponseValidationError is the validation error returned by
// GetPlanResponse.Validate if the designated constraints aren't met.
type GetPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlanResponseValidationError) ErrorName() string { return "GetPlanResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlanResponseValidationError{}

// Validate checks the field values on UpdatePlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlanRequestMultiError, or nil if none found.
func (m *UpdatePlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdatePlanRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePlanRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePlanRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePlanRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePlanRequestMultiError(errors)
	}

	return nil
}

// UpdatePlanRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePlanRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlanRequestMultiError) AllErrors() []error { return m }

// UpdatePlanRequestValidationError is the validation error returned by
// UpdatePlanRequest.Validate if the designated constraints aren't met.
type UpdatePlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlanRequestValidationError) ErrorName() string {
	return "UpdatePlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlanRequestValidationError{}

// Validate checks the field values on UpdatePlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePlanResponseMultiError, or nil if none found.
func (m *UpdatePlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePlanResponseValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePlanResponseMultiError(errors)
	}

	return nil
}

// UpdatePlanResponseMultiError is an error wrapping multiple validation errors
// returned by UpdatePlanResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdatePlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePlanResponseMultiError) AllErrors() []error { return m }

// UpdatePlanResponseValidationError is the validation error returned by
// UpdatePlanResponse.Validate if the designated constraints aren't met.
type UpdatePlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlanResponseValidationError) ErrorName() string {
	return "UpdatePlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlanResponseValidationError{}

// Validate checks the field values on ListInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvoicesRequestMultiError, or nil if none found.
func (m *ListInvoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListInvoicesRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = ListInvoicesRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for NonzeroAmountOnly

	if len(errors) > 0 {
		return ListInvoicesRequestMultiError(errors)
	}

	return nil
}

func (m *ListInvoicesRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListInvoicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInvoicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInvoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvoicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvoicesRequestMultiError) AllErrors() []error { return m }

// ListInvoicesRequestValidationError is the validation error returned by
// ListInvoicesRequest.Validate if the designated constraints aren't met.
type ListInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesRequestValidationError) ErrorName() string {
	return "ListInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesRequestValidationError{}

// Validate checks the field values on ListInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvoicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvoicesResponseMultiError, or nil if none found.
func (m *ListInvoicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvoicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvoicesResponseValidationError{
					field:  fmt.Sprintf("Invoices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInvoicesResponseMultiError(errors)
	}

	return nil
}

// ListInvoicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInvoicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInvoicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvoicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvoicesResponseMultiError) AllErrors() []error { return m }

// ListInvoicesResponseValidationError is the validation error returned by
// ListInvoicesResponse.Validate if the designated constraints aren't met.
type ListInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesResponseValidationError) ErrorName() string {
	return "ListInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesResponseValidationError{}

// Validate checks the field values on GetUpcomingInvoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingInvoiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingInvoiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingInvoiceRequestMultiError, or nil if none found.
func (m *GetUpcomingInvoiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingInvoiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetUpcomingInvoiceRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBillingId() != "" {

		if err := m._validateUuid(m.GetBillingId()); err != nil {
			err = GetUpcomingInvoiceRequestValidationError{
				field:  "BillingId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetUpcomingInvoiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetUpcomingInvoiceRequest) _validateUuid(uuid string) error {
	if matched := _frontier_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUpcomingInvoiceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUpcomingInvoiceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUpcomingInvoiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingInvoiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingInvoiceRequestMultiError) AllErrors() []error { return m }

// GetUpcomingInvoiceRequestValidationError is the validation error returned by
// GetUpcomingInvoiceRequest.Validate if the designated constraints aren't met.
type GetUpcomingInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingInvoiceRequestValidationError) ErrorName() string {
	return "GetUpcomingInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingInvoiceRequestValidationError{}

// Validate checks the field values on GetUpcomingInvoiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingInvoiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingInvoiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingInvoiceResponseMultiError, or nil if none found.
func (m *GetUpcomingInvoiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingInvoiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvoice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUpcomingInvoiceResponseValidationError{
					field:  "Invoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUpcomingInvoiceResponseValidationError{
					field:  "Invoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUpcomingInvoiceResponseValidationError{
				field:  "Invoice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUpcomingInvoiceResponseMultiError(errors)
	}

	return nil
}

// GetUpcomingInvoiceResponseMultiError is an error wrapping multiple
// validation errors returned by GetUpcomingInvoiceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUpcomingInvoiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingInvoiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingInvoiceResponseMultiError) AllErrors() []error { return m }

// GetUpcomingInvoiceResponseValidationError is the validation error returned
// by GetUpcomingInvoiceResponse.Validate if the designated constraints aren't met.
type GetUpcomingInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingInvoiceResponseValidationError) ErrorName() string {
	return "GetUpcomingInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingInvoiceResponseValidationError{}

// Validate checks the field values on GetJWKsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJWKsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJWKsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJWKsRequestMultiError,
// or nil if none found.
func (m *GetJWKsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJWKsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJWKsRequestMultiError(errors)
	}

	return nil
}

// GetJWKsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJWKsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJWKsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJWKsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJWKsRequestMultiError) AllErrors() []error { return m }

// GetJWKsRequestValidationError is the validation error returned by
// GetJWKsRequest.Validate if the designated constraints aren't met.
type GetJWKsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJWKsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJWKsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJWKsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJWKsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJWKsRequestValidationError) ErrorName() string { return "GetJWKsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJWKsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJWKsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJWKsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJWKsRequestValidationError{}

// Validate checks the field values on GetJWKsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJWKsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJWKsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJWKsResponseMultiError, or nil if none found.
func (m *GetJWKsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJWKsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJWKsResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJWKsResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJWKsResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJWKsResponseMultiError(errors)
	}

	return nil
}

// GetJWKsResponseMultiError is an error wrapping multiple validation errors
// returned by GetJWKsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJWKsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJWKsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJWKsResponseMultiError) AllErrors() []error { return m }

// GetJWKsResponseValidationError is the validation error returned by
// GetJWKsResponse.Validate if the designated constraints aren't met.
type GetJWKsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJWKsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJWKsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJWKsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJWKsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJWKsResponseValidationError) ErrorName() string { return "GetJWKsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJWKsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJWKsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJWKsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJWKsResponseValidationError{}

// Validate checks the field values on AuthLogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutRequestMultiError, or nil if none found.
func (m *AuthLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutRequestMultiError(errors)
	}

	return nil
}

// AuthLogoutRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutRequestMultiError) AllErrors() []error { return m }

// AuthLogoutRequestValidationError is the validation error returned by
// AuthLogoutRequest.Validate if the designated constraints aren't met.
type AuthLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutRequestValidationError) ErrorName() string {
	return "AuthLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutRequestValidationError{}

// Validate checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutResponseMultiError, or nil if none found.
func (m *AuthLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutResponseMultiError(errors)
	}

	return nil
}

// AuthLogoutResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutResponseMultiError) AllErrors() []error { return m }

// AuthLogoutResponseValidationError is the validation error returned by
// AuthLogoutResponse.Validate if the designated constraints aren't met.
type AuthLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutResponseValidationError) ErrorName() string {
	return "AuthLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutResponseValidationError{}

// Validate checks the field values on AuthCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCallbackRequestMultiError, or nil if none found.
func (m *AuthCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StrategyName

	// no validation rules for State

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetStateOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthCallbackRequestValidationError{
					field:  "StateOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthCallbackRequestValidationError{
					field:  "StateOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStateOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthCallbackRequestValidationError{
				field:  "StateOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthCallbackRequestMultiError(errors)
	}

	return nil
}

// AuthCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by AuthCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCallbackRequestMultiError) AllErrors() []error { return m }

// AuthCallbackRequestValidationError is the validation error returned by
// AuthCallbackRequest.Validate if the designated constraints aren't met.
type AuthCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCallbackRequestValidationError) ErrorName() string {
	return "AuthCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCallbackRequestValidationError{}

// Validate checks the field values on AuthCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCallbackResponseMultiError, or nil if none found.
func (m *AuthCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthCallbackResponseMultiError(errors)
	}

	return nil
}

// AuthCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by AuthCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCallbackResponseMultiError) AllErrors() []error { return m }

// AuthCallbackResponseValidationError is the validation error returned by
// AuthCallbackResponse.Validate if the designated constraints aren't met.
type AuthCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCallbackResponseValidationError) ErrorName() string {
	return "AuthCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCallbackResponseValidationError{}

// Validate checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateRequestMultiError, or nil if none found.
func (m *AuthenticateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StrategyName

	// no validation rules for RedirectOnstart

	// no validation rules for ReturnTo

	// no validation rules for Email

	// no validation rules for CallbackUrl

	if len(errors) > 0 {
		return AuthenticateRequestMultiError(errors)
	}

	return nil
}

// AuthenticateRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticateRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateRequestMultiError) AllErrors() []error { return m }

// AuthenticateRequestValidationError is the validation error returned by
// AuthenticateRequest.Validate if the designated constraints aren't met.
type AuthenticateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateRequestValidationError) ErrorName() string {
	return "AuthenticateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateRequestValidationError{}

// Validate checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateResponseMultiError, or nil if none found.
func (m *AuthenticateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetStateOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticateResponseValidationError{
					field:  "StateOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticateResponseValidationError{
					field:  "StateOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStateOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticateResponseValidationError{
				field:  "StateOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthenticateResponseMultiError(errors)
	}

	return nil
}

// AuthenticateResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticateResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateResponseMultiError) AllErrors() []error { return m }

// AuthenticateResponseValidationError is the validation error returned by
// AuthenticateResponse.Validate if the designated constraints aren't met.
type AuthenticateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateResponseValidationError) ErrorName() string {
	return "AuthenticateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateResponseValidationError{}

// Validate checks the field values on AuthStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthStrategyMultiError, or
// nil if none found.
func (m *AuthStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthStrategyValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthStrategyValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthStrategyValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthStrategyMultiError(errors)
	}

	return nil
}

// AuthStrategyMultiError is an error wrapping multiple validation errors
// returned by AuthStrategy.ValidateAll() if the designated constraints aren't met.
type AuthStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthStrategyMultiError) AllErrors() []error { return m }

// AuthStrategyValidationError is the validation error returned by
// AuthStrategy.Validate if the designated constraints aren't met.
type AuthStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStrategyValidationError) ErrorName() string { return "AuthStrategyValidationError" }

// Error satisfies the builtin error interface
func (e AuthStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStrategyValidationError{}

// Validate checks the field values on ListAuthStrategiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthStrategiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthStrategiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthStrategiesRequestMultiError, or nil if none found.
func (m *ListAuthStrategiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthStrategiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuthStrategiesRequestMultiError(errors)
	}

	return nil
}

// ListAuthStrategiesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuthStrategiesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListAuthStrategiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthStrategiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthStrategiesRequestMultiError) AllErrors() []error { return m }

// ListAuthStrategiesRequestValidationError is the validation error returned by
// ListAuthStrategiesRequest.Validate if the designated constraints aren't met.
type ListAuthStrategiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthStrategiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthStrategiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthStrategiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthStrategiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthStrategiesRequestValidationError) ErrorName() string {
	return "ListAuthStrategiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthStrategiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthStrategiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthStrategiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthStrategiesRequestValidationError{}

// Validate checks the field values on ListAuthStrategiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthStrategiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthStrategiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthStrategiesResponseMultiError, or nil if none found.
func (m *ListAuthStrategiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthStrategiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthStrategiesResponseValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthStrategiesResponseValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthStrategiesResponseValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuthStrategiesResponseMultiError(errors)
	}

	return nil
}

// ListAuthStrategiesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAuthStrategiesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAuthStrategiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthStrategiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthStrategiesResponseMultiError) AllErrors() []error { return m }

// ListAuthStrategiesResponseValidationError is the validation error returned
// by ListAuthStrategiesResponse.Validate if the designated constraints aren't met.
type ListAuthStrategiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthStrategiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthStrategiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthStrategiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthStrategiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthStrategiesResponseValidationError) ErrorName() string {
	return "ListAuthStrategiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthStrategiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthStrategiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthStrategiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthStrategiesResponseValidationError{}

// Validate checks the field values on AuthTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenRequestMultiError, or nil if none found.
func (m *AuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for Assertion

	if len(errors) > 0 {
		return AuthTokenRequestMultiError(errors)
	}

	return nil
}

// AuthTokenRequestMultiError is an error wrapping multiple validation errors
// returned by AuthTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenRequestMultiError) AllErrors() []error { return m }

// AuthTokenRequestValidationError is the validation error returned by
// AuthTokenRequest.Validate if the designated constraints aren't met.
type AuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenRequestValidationError) ErrorName() string { return "AuthTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenRequestValidationError{}

// Validate checks the field values on AuthTokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenResponseMultiError, or nil if none found.
func (m *AuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	if len(errors) > 0 {
		return AuthTokenResponseMultiError(errors)
	}

	return nil
}

// AuthTokenResponseMultiError is an error wrapping multiple validation errors
// returned by AuthTokenResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenResponseMultiError) AllErrors() []error { return m }

// AuthTokenResponseValidationError is the validation error returned by
// AuthTokenResponse.Validate if the designated constraints aren't met.
type AuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenResponseValidationError) ErrorName() string {
	return "AuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenResponseValidationError{}

// Validate checks the field values on UserRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRequestBodyMultiError, or nil if none found.
func (m *UserRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UserRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := UserRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserRequestBodyValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	if m.GetAvatar() != "" {

		if utf8.RuneCountInString(m.GetAvatar()) > 250000 {
			err := UserRequestBodyValidationError{
				field:  "Avatar",
				reason: "value length must be at most 250000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UserRequestBody_Avatar_Pattern.MatchString(m.GetAvatar()) {
			err := UserRequestBodyValidationError{
				field:  "Avatar",
				reason: "value does not match regex pattern \"^data:image/(png|jpg|jpeg|gif);base64,([a-zA-Z0-9+/]+={0,2})+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserRequestBodyMultiError(errors)
	}

	return nil
}

func (m *UserRequestBody) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserRequestBody) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserRequestBodyMultiError is an error wrapping multiple validation errors
// returned by UserRequestBody.ValidateAll() if the designated constraints
// aren't met.
type UserRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRequestBodyMultiError) AllErrors() []error { return m }

// UserRequestBodyValidationError is the validation error returned by
// UserRequestBody.Validate if the designated constraints aren't met.
type UserRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRequestBodyValidationError) ErrorName() string { return "UserRequestBodyValidationError" }

// Error satisfies the builtin error interface
func (e UserRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRequestBodyValidationError{}

var _UserRequestBody_Name_Pattern = regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9-_]{3,64})?$")

var _UserRequestBody_Avatar_Pattern = regexp.MustCompile("^data:image/(png|jpg|jpeg|gif);base64,([a-zA-Z0-9+/]+={0,2})+$")

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListUsersRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Keyword

	// no validation rules for OrgId

	// no validation rules for GroupId

	// no validation rules for State

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateUserRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on ListOrganizationsByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsByUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationsByUserRequestMultiError, or nil if none found.
func (m *ListOrganizationsByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationsByUserRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsByUserRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationsByUserRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationsByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByUserRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsByUserRequestValidationError is the validation error
// returned by ListOrganizationsByUserRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationsByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByUserRequestValidationError) ErrorName() string {
	return "ListOrganizationsByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByUserRequestValidationError{}

// Validate checks the field values on ListOrganizationsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsByUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationsByUserResponseMultiError, or nil if none found.
func (m *ListOrganizationsByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsByUserResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJoinableViaDomain() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsByUserResponseValidationError{
						field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsByUserResponseValidationError{
					field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsByUserResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsByUserResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationsByUserResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationsByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByUserResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsByUserResponseValidationError is the validation error
// returned by ListOrganizationsByUserResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationsByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByUserResponseValidationError) ErrorName() string {
	return "ListOrganizationsByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByUserResponseValidationError{}

// Validate checks the field values on ListOrganizationsByCurrentUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationsByCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsByCurrentUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationsByCurrentUserRequestMultiError, or nil if none found.
func (m *ListOrganizationsByCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationsByCurrentUserRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsByCurrentUserRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationsByCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsByCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByCurrentUserRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsByCurrentUserRequestValidationError is the validation error
// returned by ListOrganizationsByCurrentUserRequest.Validate if the
// designated constraints aren't met.
type ListOrganizationsByCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByCurrentUserRequestValidationError) ErrorName() string {
	return "ListOrganizationsByCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByCurrentUserRequestValidationError{}

// Validate checks the field values on ListOrganizationsByCurrentUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationsByCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationsByCurrentUserResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOrganizationsByCurrentUserResponseMultiError, or nil if none found.
func (m *ListOrganizationsByCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsByCurrentUserResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJoinableViaDomain() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsByCurrentUserResponseValidationError{
					field:  fmt.Sprintf("JoinableViaDomain[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsByCurrentUserResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsByCurrentUserResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationsByCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsByCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByCurrentUserResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsByCurrentUserResponseValidationError is the validation
// error returned by ListOrganizationsByCurrentUserResponse.Validate if the
// designated constraints aren't met.
type ListOrganizationsByCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByCurrentUserResponseValidationError) ErrorName() string {
	return "ListOrganizationsByCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByCurrentUserResponseValidationError{}

// Validate checks the field values on ListProjectsByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsByUserRequestMultiError, or nil if none found.
func (m *ListProjectsByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListProjectsByUserRequestMultiError(errors)
	}

	return nil
}

// ListProjectsByUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectsByUserRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProjectsByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByUserRequestMultiError) AllErrors() []error { return m }

// ListProjectsByUserRequestValidationError is the validation error returned by
// ListProjectsByUserRequest.Validate if the designated constraints aren't met.
type ListProjectsByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByUserRequestValidationError) ErrorName() string {
	return "ListProjectsByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByUserRequestValidationError{}

// Validate checks the field values on ListProjectsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsByUserResponseMultiError, or nil if none found.
func (m *ListProjectsByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsByUserResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsByUserResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsByUserResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectsByUserResponseMultiError(errors)
	}

	return nil
}

// ListProjectsByUserResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectsByUserResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectsByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByUserResponseMultiError) AllErrors() []error { return m }

// ListProjectsByUserResponseValidationError is the validation error returned
// by ListProjectsByUserResponse.Validate if the designated constraints aren't met.
type ListProjectsByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByUserResponseValidationError) ErrorName() string {
	return "ListProjectsByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByUserResponseValidationError{}

// Validate checks the field values on ListProjectsByCurrentUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsByCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByCurrentUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectsByCurrentUserRequestMultiError, or nil if none found.
func (m *ListProjectsByCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for NonInherited

	// no validation rules for WithMemberCount

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListProjectsByCurrentUserRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListProjectsByCurrentUserRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListProjectsByCurrentUserRequestMultiError(errors)
	}

	return nil
}

// ListProjectsByCurrentUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsByCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsByCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByCurrentUserRequestMultiError) AllErrors() []error { return m }

// ListProjectsByCurrentUserRequestValidationError is the validation error
// returned by ListProjectsByCurrentUserRequest.Validate if the designated
// constraints aren't met.
type ListProjectsByCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByCurrentUserRequestValidationError) ErrorName() string {
	return "ListProjectsByCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByCurrentUserRequestValidationError{}

// Validate checks the field values on ListProjectsByCurrentUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsByCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByCurrentUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsByCurrentUserResponseMultiError, or nil if none found.
func (m *ListProjectsByCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsByCurrentUserResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAccessPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsByCurrentUserResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsByCurrentUserResponseValidationError{
					field:  fmt.Sprintf("AccessPairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListProjectsByCurrentUserResponseMultiError(errors)
	}

	return nil
}

// ListProjectsByCurrentUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsByCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsByCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByCurrentUserResponseMultiError) AllErrors() []error { return m }

// ListProjectsByCurrentUserResponseValidationError is the validation error
// returned by ListProjectsByCurrentUserResponse.Validate if the designated
// constraints aren't met.
type ListProjectsByCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByCurrentUserResponseValidationError) ErrorName() string {
	return "ListProjectsByCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByCurrentUserResponseValidationError{}

// Validate checks the field values on EnableUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserRequestMultiError, or nil if none found.
func (m *EnableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableUserRequestMultiError(errors)
	}

	return nil
}

// EnableUserRequestMultiError is an error wrapping multiple validation errors
// returned by EnableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserRequestMultiError) AllErrors() []error { return m }

// EnableUserRequestValidationError is the validation error returned by
// EnableUserRequest.Validate if the designated constraints aren't met.
type EnableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserRequestValidationError) ErrorName() string {
	return "EnableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserRequestValidationError{}

// Validate checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserResponseMultiError, or nil if none found.
func (m *EnableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableUserResponseMultiError(errors)
	}

	return nil
}

// EnableUserResponseMultiError is an error wrapping multiple validation errors
// returned by EnableUserResponse.ValidateAll() if the designated constraints
// aren't met.
type EnableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserResponseMultiError) AllErrors() []error { return m }

// EnableUserResponseValidationError is the validation error returned by
// EnableUserResponse.Validate if the designated constraints aren't met.
type EnableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserResponseValidationError) ErrorName() string {
	return "EnableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserResponseValidationError{}

// Validate checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserRequestMultiError, or nil if none found.
func (m *DisableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableUserRequestMultiError(errors)
	}

	return nil
}

// DisableUserRequestMultiError is an error wrapping multiple validation errors
// returned by DisableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DisableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserRequestMultiError) AllErrors() []error { return m }

// DisableUserRequestValidationError is the validation error returned by
// DisableUserRequest.Validate if the designated constraints aren't met.
type DisableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserRequestValidationError) ErrorName() string {
	return "DisableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserRequestValidationError{}

// Validate checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserResponseMultiError, or nil if none found.
func (m *DisableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableUserResponseMultiError(errors)
	}

	return nil
}

// DisableUserResponseMultiError is an error wrapping multiple validation
// errors returned by DisableUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserResponseMultiError) AllErrors() []error { return m }

// DisableUserResponseValidationError is the validation error returned by
// DisableUserResponse.Validate if the designated constraints aren't met.
type DisableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserResponseValidationError) ErrorName() string {
	return "DisableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServiceuser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceuser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "Serviceuser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UpdateCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserResponseMultiError, or nil if none found.
func (m *UpdateCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserResponseMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserResponseMultiError) AllErrors() []error { return m }

// UpdateCurrentUserResponseValidationError is the validation error returned by
// UpdateCurrentUserResponse.Validate if the designated constraints aren't met.
type UpdateCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserResponseValidationError) ErrorName() string {
	return "UpdateCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on ListCurrentUserGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrentUserGroupsRequestMultiError, or nil if none found.
func (m *ListCurrentUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for WithMemberCount

	if len(errors) > 0 {
		return ListCurrentUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ListCurrentUserGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCurrentUserGroupsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCurrentUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserGroupsRequestMultiError) AllErrors() []error { return m }

// ListCurrentUserGroupsRequestValidationError is the validation error returned
// by ListCurrentUserGroupsRequest.Validate if the designated constraints
// aren't met.
type ListCurrentUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserGroupsRequestValidationError) ErrorName() string {
	return "ListCurrentUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserGroupsRequestValidationError{}

// Validate checks the field values on ListCurrentUserGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrentUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCurrentUserGroupsResponseMultiError, or nil if none found.
func (m *ListCurrentUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAccessPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserGroupsResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserGroupsResponseValidationError{
					field:  fmt.Sprintf("AccessPairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ListCurrentUserGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCurrentUserGroupsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCurrentUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserGroupsResponseMultiError) AllErrors() []error { return m }

// ListCurrentUserGroupsResponseValidationError is the validation error
// returned by ListCurrentUserGroupsResponse.Validate if the designated
// constraints aren't met.
type ListCurrentUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserGroupsResponseValidationError) ErrorName() string {
	return "ListCurrentUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserGroupsResponseValidationError{}

// Validate checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsRequestMultiError, or nil if none found.
func (m *ListUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return ListUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsRequestMultiError) AllErrors() []error { return m }

// ListUserGroupsRequestValidationError is the validation error returned by
// ListUserGroupsRequest.Validate if the designated constraints aren't met.
type ListUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsRequestValidationError) ErrorName() string {
	return "ListUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsRequestValidationError{}

// Validate checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsResponseMultiError, or nil if none found.
func (m *ListUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsResponseMultiError) AllErrors() []error { return m }

// ListUserGroupsResponseValidationError is the validation error returned by
// ListUserGroupsResponse.Validate if the designated constraints aren't met.
type ListUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsResponseValidationError) ErrorName() string {
	return "ListUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsResponseValidationError{}

// Validate checks the field values on UpdateCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCurrentUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCurrentUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCurrentUserRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRequestValidationError is the validation error returned by
// UpdateCurrentUserRequest.Validate if the designated constraints aren't met.
type UpdateCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRequestValidationError{}

// Validate checks the field values on ListUserInvitationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserInvitationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserInvitationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserInvitationsRequestMultiError, or nil if none found.
func (m *ListUserInvitationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserInvitationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListUserInvitationsRequestMultiError(errors)
	}

	return nil
}

// ListUserInvitationsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserInvitationsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserInvitationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserInvitationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserInvitationsRequestMultiError) AllErrors() []error { return m }

// ListUserInvitationsRequestValidationError is the validation error returned
// by ListUserInvitationsRequest.Validate if the designated constraints aren't met.
type ListUserInvitationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserInvitationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserInvitationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserInvitationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserInvitationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserInvitationsRequestValidationError) ErrorName() string {
	return "ListUserInvitationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserInvitationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserInvitationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserInvitationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserInvitationsRequestValidationError{}

// Validate checks the field values on ListUserInvitationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserInvitationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserInvitationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserInvitationsResponseMultiError, or nil if none found.
func (m *ListUserInvitationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserInvitationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserInvitationsResponseValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserInvitationsResponseMultiError(errors)
	}

	return nil
}

// ListUserInvitationsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserInvitationsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserInvitationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserInvitationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserInvitationsResponseMultiError) AllErrors() []error { return m }

// ListUserInvitationsResponseValidationError is the validation error returned
// by ListUserInvitationsResponse.Validate if the designated constraints
// aren't met.
type ListUserInvitationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserInvitationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserInvitationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserInvitationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserInvitationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserInvitationsResponseValidationError) ErrorName() string {
	return "ListUserInvitationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserInvitationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserInvitationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserInvitationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserInvitationsResponseValidationError{}

// Validate checks the field values on ListCurrentUserInvitationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCurrentUserInvitationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserInvitationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCurrentUserInvitationsRequestMultiError, or nil if none found.
func (m *ListCurrentUserInvitationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserInvitationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrentUserInvitationsRequestMultiError(errors)
	}

	return nil
}

// ListCurrentUserInvitationsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCurrentUserInvitationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentUserInvitationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserInvitationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserInvitationsRequestMultiError) AllErrors() []error { return m }

// ListCurrentUserInvitationsRequestValidationError is the validation error
// returned by ListCurrentUserInvitationsRequest.Validate if the designated
// constraints aren't met.
type ListCurrentUserInvitationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserInvitationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserInvitationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserInvitationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserInvitationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserInvitationsRequestValidationError) ErrorName() string {
	return "ListCurrentUserInvitationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserInvitationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserInvitationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserInvitationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserInvitationsRequestValidationError{}

// Validate checks the field values on ListCurrentUserInvitationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCurrentUserInvitationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserInvitationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCurrentUserInvitationsResponseMultiError, or nil if none found.
func (m *ListCurrentUserInvitationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserInvitationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserInvitationsResponseValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserInvitationsResponseValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserInvitationsResponseValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentUserInvitationsResponseMultiError(errors)
	}

	return nil
}

// ListCurrentUserInvitationsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCurrentUserInvitationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentUserInvitationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserInvitationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserInvitationsResponseMultiError) AllErrors() []error { return m }

// ListCurrentUserInvitationsResponseValidationError is the validation error
// returned by ListCurrentUserInvitationsResponse.Validate if the designated
// constraints aren't met.
type ListCurrentUserInvitationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserInvitationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserInvitationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserInvitationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserInvitationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserInvitationsResponseValidationError) ErrorName() string {
	return "ListCurrentUserInvitationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserInvitationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserInvitationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserInvitationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserInvitationsResponseValidationError{}

// Validate checks the field values on ListServiceUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUsersRequestMultiError, or nil if none found.
func (m *ListServiceUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListServiceUsersRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListServiceUsersRequestMultiError(errors)
	}

	return nil
}

// ListServiceUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListServiceUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUsersRequestMultiError) AllErrors() []error { return m }

// ListServiceUsersRequestValidationError is the validation error returned by
// ListServiceUsersRequest.Validate if the designated constraints aren't met.
type ListServiceUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUsersRequestValidationError) ErrorName() string {
	return "ListServiceUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUsersRequestValidationError{}

// Validate checks the field values on ListServiceUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUsersResponseMultiError, or nil if none found.
func (m *ListServiceUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceusers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUsersResponseValidationError{
					field:  fmt.Sprintf("Serviceusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUsersResponseMultiError(errors)
	}

	return nil
}

// ListServiceUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListServiceUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUsersResponseMultiError) AllErrors() []error { return m }

// ListServiceUsersResponseValidationError is the validation error returned by
// ListServiceUsersResponse.Validate if the designated constraints aren't met.
type ListServiceUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUsersResponseValidationError) ErrorName() string {
	return "ListServiceUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUsersResponseValidationError{}

// Validate checks the field values on ServiceUserRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceUserRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceUserRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceUserRequestBodyMultiError, or nil if none found.
func (m *ServiceUserRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceUserRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceUserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceUserRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceUserRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceUserRequestBodyMultiError(errors)
	}

	return nil
}

// ServiceUserRequestBodyMultiError is an error wrapping multiple validation
// errors returned by ServiceUserRequestBody.ValidateAll() if the designated
// constraints aren't met.
type ServiceUserRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceUserRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceUserRequestBodyMultiError) AllErrors() []error { return m }

// ServiceUserRequestBodyValidationError is the validation error returned by
// ServiceUserRequestBody.Validate if the designated constraints aren't met.
type ServiceUserRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceUserRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceUserRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceUserRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceUserRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceUserRequestBodyValidationError) ErrorName() string {
	return "ServiceUserRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceUserRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceUserRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceUserRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceUserRequestBodyValidationError{}

// Validate checks the field values on CreateServiceUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUserRequestMultiError, or nil if none found.
func (m *CreateServiceUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateServiceUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceUserRequestMultiError(errors)
	}

	return nil
}

// CreateServiceUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserRequestMultiError) AllErrors() []error { return m }

// CreateServiceUserRequestValidationError is the validation error returned by
// CreateServiceUserRequest.Validate if the designated constraints aren't met.
type CreateServiceUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserRequestValidationError) ErrorName() string {
	return "CreateServiceUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserRequestValidationError{}

// Validate checks the field values on CreateServiceUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUserResponseMultiError, or nil if none found.
func (m *CreateServiceUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceuser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceuser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceUserResponseValidationError{
				field:  "Serviceuser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceUserResponseMultiError(errors)
	}

	return nil
}

// CreateServiceUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateServiceUserResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateServiceUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserResponseMultiError) AllErrors() []error { return m }

// CreateServiceUserResponseValidationError is the validation error returned by
// CreateServiceUserResponse.Validate if the designated constraints aren't met.
type CreateServiceUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserResponseValidationError) ErrorName() string {
	return "CreateServiceUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserResponseValidationError{}

// Validate checks the field values on GetServiceUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceUserRequestMultiError, or nil if none found.
func (m *GetServiceUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetServiceUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceUserRequestMultiError(errors)
	}

	return nil
}

// GetServiceUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceUserRequestMultiError) AllErrors() []error { return m }

// GetServiceUserRequestValidationError is the validation error returned by
// GetServiceUserRequest.Validate if the designated constraints aren't met.
type GetServiceUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceUserRequestValidationError) ErrorName() string {
	return "GetServiceUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceUserRequestValidationError{}

// Validate checks the field values on GetServiceUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceUserResponseMultiError, or nil if none found.
func (m *GetServiceUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceuser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceuser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceUserResponseValidationError{
				field:  "Serviceuser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceUserResponseMultiError(errors)
	}

	return nil
}

// GetServiceUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetServiceUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServiceUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceUserResponseMultiError) AllErrors() []error { return m }

// GetServiceUserResponseValidationError is the validation error returned by
// GetServiceUserResponse.Validate if the designated constraints aren't met.
type GetServiceUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceUserResponseValidationError) ErrorName() string {
	return "GetServiceUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceUserResponseValidationError{}

// Validate checks the field values on UpdateServiceUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceUserRequestMultiError, or nil if none found.
func (m *UpdateServiceUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceUserRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceUserRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := UpdateServiceUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateServiceUserRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceUserRequestMultiError) AllErrors() []error { return m }

// UpdateServiceUserRequestValidationError is the validation error returned by
// UpdateServiceUserRequest.Validate if the designated constraints aren't met.
type UpdateServiceUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceUserRequestValidationError) ErrorName() string {
	return "UpdateServiceUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceUserRequestValidationError{}

// Validate checks the field values on UpdateServiceUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceUserResponseMultiError, or nil if none found.
func (m *UpdateServiceUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceuser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceUserResponseValidationError{
					field:  "Serviceuser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceuser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceUserResponseValidationError{
				field:  "Serviceuser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServiceUserResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceUserResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceUserResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateServiceUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceUserResponseMultiError) AllErrors() []error { return m }

// UpdateServiceUserResponseValidationError is the validation error returned by
// UpdateServiceUserResponse.Validate if the designated constraints aren't met.
type UpdateServiceUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceUserResponseValidationError) ErrorName() string {
	return "UpdateServiceUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceUserResponseValidationError{}

// Validate checks the field values on DeleteServiceUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceUserRequestMultiError, or nil if none found.
func (m *DeleteServiceUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteServiceUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceUserRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserRequestMultiError) AllErrors() []error { return m }

// DeleteServiceUserRequestValidationError is the validation error returned by
// DeleteServiceUserRequest.Validate if the designated constraints aren't met.
type DeleteServiceUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserRequestValidationError) ErrorName() string {
	return "DeleteServiceUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserRequestValidationError{}

// Validate checks the field values on DeleteServiceUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceUserResponseMultiError, or nil if none found.
func (m *DeleteServiceUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceUserResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceUserResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceUserResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteServiceUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserResponseMultiError) AllErrors() []error { return m }

// DeleteServiceUserResponseValidationError is the validation error returned by
// DeleteServiceUserResponse.Validate if the designated constraints aren't met.
type DeleteServiceUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserResponseValidationError) ErrorName() string {
	return "DeleteServiceUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserResponseValidationError{}

// Validate checks the field values on CreateServiceUserJWKRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserJWKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserJWKRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUserJWKRequestMultiError, or nil if none found.
func (m *CreateServiceUserJWKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserJWKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateServiceUserJWKRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceUserJWKRequestMultiError(errors)
	}

	return nil
}

// CreateServiceUserJWKRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceUserJWKRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceUserJWKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserJWKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserJWKRequestMultiError) AllErrors() []error { return m }

// CreateServiceUserJWKRequestValidationError is the validation error returned
// by CreateServiceUserJWKRequest.Validate if the designated constraints
// aren't met.
type CreateServiceUserJWKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserJWKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserJWKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserJWKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserJWKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserJWKRequestValidationError) ErrorName() string {
	return "CreateServiceUserJWKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserJWKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserJWKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserJWKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserJWKRequestValidationError{}

// Validate checks the field values on CreateServiceUserJWKResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserJWKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserJWKResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUserJWKResponseMultiError, or nil if none found.
func (m *CreateServiceUserJWKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserJWKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceUserJWKResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceUserJWKResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceUserJWKResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceUserJWKResponseMultiError(errors)
	}

	return nil
}

// CreateServiceUserJWKResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceUserJWKResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceUserJWKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserJWKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserJWKResponseMultiError) AllErrors() []error { return m }

// CreateServiceUserJWKResponseValidationError is the validation error returned
// by CreateServiceUserJWKResponse.Validate if the designated constraints
// aren't met.
type CreateServiceUserJWKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserJWKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserJWKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserJWKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserJWKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserJWKResponseValidationError) ErrorName() string {
	return "CreateServiceUserJWKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserJWKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserJWKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserJWKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserJWKResponseValidationError{}

// Validate checks the field values on GetServiceUserJWKRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceUserJWKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceUserJWKRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceUserJWKRequestMultiError, or nil if none found.
func (m *GetServiceUserJWKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceUserJWKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for KeyId

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetServiceUserJWKRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceUserJWKRequestMultiError(errors)
	}

	return nil
}

// GetServiceUserJWKRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceUserJWKRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceUserJWKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceUserJWKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceUserJWKRequestMultiError) AllErrors() []error { return m }

// GetServiceUserJWKRequestValidationError is the validation error returned by
// GetServiceUserJWKRequest.Validate if the designated constraints aren't met.
type GetServiceUserJWKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceUserJWKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceUserJWKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceUserJWKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceUserJWKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceUserJWKRequestValidationError) ErrorName() string {
	return "GetServiceUserJWKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceUserJWKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceUserJWKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceUserJWKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceUserJWKRequestValidationError{}

// Validate checks the field values on GetServiceUserJWKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceUserJWKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceUserJWKResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceUserJWKResponseMultiError, or nil if none found.
func (m *GetServiceUserJWKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceUserJWKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceUserJWKResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceUserJWKResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceUserJWKResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceUserJWKResponseMultiError(errors)
	}

	return nil
}

// GetServiceUserJWKResponseMultiError is an error wrapping multiple validation
// errors returned by GetServiceUserJWKResponse.ValidateAll() if the
// designated constraints aren't met.
type GetServiceUserJWKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceUserJWKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceUserJWKResponseMultiError) AllErrors() []error { return m }

// GetServiceUserJWKResponseValidationError is the validation error returned by
// GetServiceUserJWKResponse.Validate if the designated constraints aren't met.
type GetServiceUserJWKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceUserJWKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceUserJWKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceUserJWKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceUserJWKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceUserJWKResponseValidationError) ErrorName() string {
	return "GetServiceUserJWKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceUserJWKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceUserJWKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceUserJWKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceUserJWKResponseValidationError{}

// Validate checks the field values on ListServiceUserJWKsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserJWKsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserJWKsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUserJWKsRequestMultiError, or nil if none found.
func (m *ListServiceUserJWKsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserJWKsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListServiceUserJWKsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServiceUserJWKsRequestMultiError(errors)
	}

	return nil
}

// ListServiceUserJWKsRequestMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserJWKsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListServiceUserJWKsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserJWKsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserJWKsRequestMultiError) AllErrors() []error { return m }

// ListServiceUserJWKsRequestValidationError is the validation error returned
// by ListServiceUserJWKsRequest.Validate if the designated constraints aren't met.
type ListServiceUserJWKsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserJWKsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserJWKsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserJWKsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserJWKsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserJWKsRequestValidationError) ErrorName() string {
	return "ListServiceUserJWKsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserJWKsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserJWKsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserJWKsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserJWKsRequestValidationError{}

// Validate checks the field values on ListServiceUserJWKsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserJWKsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserJWKsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUserJWKsResponseMultiError, or nil if none found.
func (m *ListServiceUserJWKsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserJWKsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUserJWKsResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUserJWKsResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUserJWKsResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUserJWKsResponseMultiError(errors)
	}

	return nil
}

// ListServiceUserJWKsResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserJWKsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListServiceUserJWKsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserJWKsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserJWKsResponseMultiError) AllErrors() []error { return m }

// ListServiceUserJWKsResponseValidationError is the validation error returned
// by ListServiceUserJWKsResponse.Validate if the designated constraints
// aren't met.
type ListServiceUserJWKsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserJWKsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserJWKsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserJWKsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserJWKsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserJWKsResponseValidationError) ErrorName() string {
	return "ListServiceUserJWKsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserJWKsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserJWKsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserJWKsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserJWKsResponseValidationError{}

// Validate checks the field values on DeleteServiceUserJWKRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserJWKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserJWKRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceUserJWKRequestMultiError, or nil if none found.
func (m *DeleteServiceUserJWKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserJWKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for KeyId

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteServiceUserJWKRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceUserJWKRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceUserJWKRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceUserJWKRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceUserJWKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserJWKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserJWKRequestMultiError) AllErrors() []error { return m }

// DeleteServiceUserJWKRequestValidationError is the validation error returned
// by DeleteServiceUserJWKRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceUserJWKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserJWKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserJWKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserJWKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserJWKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserJWKRequestValidationError) ErrorName() string {
	return "DeleteServiceUserJWKRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserJWKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserJWKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserJWKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserJWKRequestValidationError{}

// Validate checks the field values on DeleteServiceUserJWKResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserJWKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserJWKResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceUserJWKResponseMultiError, or nil if none found.
func (m *DeleteServiceUserJWKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserJWKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceUserJWKResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceUserJWKResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceUserJWKResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceUserJWKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserJWKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserJWKResponseMultiError) AllErrors() []error { return m }

// DeleteServiceUserJWKResponseValidationError is the validation error returned
// by DeleteServiceUserJWKResponse.Validate if the designated constraints
// aren't met.
type DeleteServiceUserJWKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserJWKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserJWKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserJWKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserJWKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserJWKResponseValidationError) ErrorName() string {
	return "DeleteServiceUserJWKResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserJWKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserJWKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserJWKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserJWKResponseValidationError{}

// Validate checks the field values on CreateServiceUserCredentialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateServiceUserCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateServiceUserCredentialRequestMultiError, or nil if none found.
func (m *CreateServiceUserCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateServiceUserCredentialRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceUserCredentialRequestMultiError(errors)
	}

	return nil
}

// CreateServiceUserCredentialRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateServiceUserCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceUserCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserCredentialRequestMultiError) AllErrors() []error { return m }

// CreateServiceUserCredentialRequestValidationError is the validation error
// returned by CreateServiceUserCredentialRequest.Validate if the designated
// constraints aren't met.
type CreateServiceUserCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserCredentialRequestValidationError) ErrorName() string {
	return "CreateServiceUserCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserCredentialRequestValidationError{}

// Validate checks the field values on CreateServiceUserCredentialResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateServiceUserCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateServiceUserCredentialResponseMultiError, or nil if none found.
func (m *CreateServiceUserCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceUserCredentialResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceUserCredentialResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceUserCredentialResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceUserCredentialResponseMultiError(errors)
	}

	return nil
}

// CreateServiceUserCredentialResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateServiceUserCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceUserCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserCredentialResponseMultiError) AllErrors() []error { return m }

// CreateServiceUserCredentialResponseValidationError is the validation error
// returned by CreateServiceUserCredentialResponse.Validate if the designated
// constraints aren't met.
type CreateServiceUserCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserCredentialResponseValidationError) ErrorName() string {
	return "CreateServiceUserCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserCredentialResponseValidationError{}

// Validate checks the field values on ListServiceUserCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListServiceUserCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListServiceUserCredentialsRequestMultiError, or nil if none found.
func (m *ListServiceUserCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListServiceUserCredentialsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServiceUserCredentialsRequestMultiError(errors)
	}

	return nil
}

// ListServiceUserCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListServiceUserCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUserCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserCredentialsRequestMultiError) AllErrors() []error { return m }

// ListServiceUserCredentialsRequestValidationError is the validation error
// returned by ListServiceUserCredentialsRequest.Validate if the designated
// constraints aren't met.
type ListServiceUserCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserCredentialsRequestValidationError) ErrorName() string {
	return "ListServiceUserCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserCredentialsRequestValidationError{}

// Validate checks the field values on ListServiceUserCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListServiceUserCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListServiceUserCredentialsResponseMultiError, or nil if none found.
func (m *ListServiceUserCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUserCredentialsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUserCredentialsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUserCredentialsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUserCredentialsResponseMultiError(errors)
	}

	return nil
}

// ListServiceUserCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListServiceUserCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUserCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserCredentialsResponseMultiError) AllErrors() []error { return m }

// ListServiceUserCredentialsResponseValidationError is the validation error
// returned by ListServiceUserCredentialsResponse.Validate if the designated
// constraints aren't met.
type ListServiceUserCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserCredentialsResponseValidationError) ErrorName() string {
	return "ListServiceUserCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserCredentialsResponseValidationError{}

// Validate checks the field values on DeleteServiceUserCredentialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteServiceUserCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserCredentialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteServiceUserCredentialRequestMultiError, or nil if none found.
func (m *DeleteServiceUserCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SecretId

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteServiceUserCredentialRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceUserCredentialRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceUserCredentialRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteServiceUserCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceUserCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserCredentialRequestMultiError) AllErrors() []error { return m }

// DeleteServiceUserCredentialRequestValidationError is the validation error
// returned by DeleteServiceUserCredentialRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceUserCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserCredentialRequestValidationError) ErrorName() string {
	return "DeleteServiceUserCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserCredentialRequestValidationError{}

// Validate checks the field values on DeleteServiceUserCredentialResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteServiceUserCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserCredentialResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteServiceUserCredentialResponseMultiError, or nil if none found.
func (m *DeleteServiceUserCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceUserCredentialResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceUserCredentialResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteServiceUserCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceUserCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserCredentialResponseMultiError) AllErrors() []error { return m }

// DeleteServiceUserCredentialResponseValidationError is the validation error
// returned by DeleteServiceUserCredentialResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceUserCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserCredentialResponseValidationError) ErrorName() string {
	return "DeleteServiceUserCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserCredentialResponseValidationError{}

// Validate checks the field values on CreateServiceUserTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateServiceUserTokenRequestMultiError, or nil if none found.
func (m *CreateServiceUserTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateServiceUserTokenRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServiceUserTokenRequestMultiError(errors)
	}

	return nil
}

// CreateServiceUserTokenRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceUserTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateServiceUserTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserTokenRequestMultiError) AllErrors() []error { return m }

// CreateServiceUserTokenRequestValidationError is the validation error
// returned by CreateServiceUserTokenRequest.Validate if the designated
// constraints aren't met.
type CreateServiceUserTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserTokenRequestValidationError) ErrorName() string {
	return "CreateServiceUserTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserTokenRequestValidationError{}

// Validate checks the field values on CreateServiceUserTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUserTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUserTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateServiceUserTokenResponseMultiError, or nil if none found.
func (m *CreateServiceUserTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUserTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceUserTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceUserTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceUserTokenResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceUserTokenResponseMultiError(errors)
	}

	return nil
}

// CreateServiceUserTokenResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceUserTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateServiceUserTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUserTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUserTokenResponseMultiError) AllErrors() []error { return m }

// CreateServiceUserTokenResponseValidationError is the validation error
// returned by CreateServiceUserTokenResponse.Validate if the designated
// constraints aren't met.
type CreateServiceUserTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUserTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUserTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUserTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUserTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUserTokenResponseValidationError) ErrorName() string {
	return "CreateServiceUserTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUserTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUserTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUserTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUserTokenResponseValidationError{}

// Validate checks the field values on ListServiceUserTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUserTokensRequestMultiError, or nil if none found.
func (m *ListServiceUserTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListServiceUserTokensRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServiceUserTokensRequestMultiError(errors)
	}

	return nil
}

// ListServiceUserTokensRequestMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserTokensRequest.ValidateAll() if
// the designated constraints aren't met.
type ListServiceUserTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserTokensRequestMultiError) AllErrors() []error { return m }

// ListServiceUserTokensRequestValidationError is the validation error returned
// by ListServiceUserTokensRequest.Validate if the designated constraints
// aren't met.
type ListServiceUserTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserTokensRequestValidationError) ErrorName() string {
	return "ListServiceUserTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserTokensRequestValidationError{}

// Validate checks the field values on ListServiceUserTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserTokensResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServiceUserTokensResponseMultiError, or nil if none found.
func (m *ListServiceUserTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUserTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUserTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUserTokensResponseValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUserTokensResponseMultiError(errors)
	}

	return nil
}

// ListServiceUserTokensResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserTokensResponse.ValidateAll()
// if the designated constraints aren't met.
type ListServiceUserTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserTokensResponseMultiError) AllErrors() []error { return m }

// ListServiceUserTokensResponseValidationError is the validation error
// returned by ListServiceUserTokensResponse.Validate if the designated
// constraints aren't met.
type ListServiceUserTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserTokensResponseValidationError) ErrorName() string {
	return "ListServiceUserTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserTokensResponseValidationError{}

// Validate checks the field values on DeleteServiceUserTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServiceUserTokenRequestMultiError, or nil if none found.
func (m *DeleteServiceUserTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TokenId

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteServiceUserTokenRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceUserTokenRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceUserTokenRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceUserTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteServiceUserTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserTokenRequestMultiError) AllErrors() []error { return m }

// DeleteServiceUserTokenRequestValidationError is the validation error
// returned by DeleteServiceUserTokenRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceUserTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserTokenRequestValidationError) ErrorName() string {
	return "DeleteServiceUserTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserTokenRequestValidationError{}

// Validate checks the field values on DeleteServiceUserTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceUserTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceUserTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServiceUserTokenResponseMultiError, or nil if none found.
func (m *DeleteServiceUserTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceUserTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceUserTokenResponseMultiError(errors)
	}

	return nil
}

// DeleteServiceUserTokenResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceUserTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteServiceUserTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceUserTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceUserTokenResponseMultiError) AllErrors() []error { return m }

// DeleteServiceUserTokenResponseValidationError is the validation error
// returned by DeleteServiceUserTokenResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceUserTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceUserTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceUserTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceUserTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceUserTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceUserTokenResponseValidationError) ErrorName() string {
	return "DeleteServiceUserTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceUserTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceUserTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceUserTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceUserTokenResponseValidationError{}

// Validate checks the field values on ListServiceUserProjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserProjectsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServiceUserProjectsRequestMultiError, or nil if none found.
func (m *ListServiceUserProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListServiceUserProjectsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServiceUserProjectsRequestMultiError(errors)
	}

	return nil
}

// ListServiceUserProjectsRequestMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserProjectsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListServiceUserProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserProjectsRequestMultiError) AllErrors() []error { return m }

// ListServiceUserProjectsRequestValidationError is the validation error
// returned by ListServiceUserProjectsRequest.Validate if the designated
// constraints aren't met.
type ListServiceUserProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserProjectsRequestValidationError) ErrorName() string {
	return "ListServiceUserProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserProjectsRequestValidationError{}

// Validate checks the field values on ListServiceUserProjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUserProjectsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServiceUserProjectsResponseMultiError, or nil if none found.
func (m *ListServiceUserProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUserProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUserProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUserProjectsResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAccessPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUserProjectsResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUserProjectsResponseValidationError{
						field:  fmt.Sprintf("AccessPairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUserProjectsResponseValidationError{
					field:  fmt.Sprintf("AccessPairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUserProjectsResponseMultiError(errors)
	}

	return nil
}

// ListServiceUserProjectsResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceUserProjectsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListServiceUserProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserProjectsResponseMultiError) AllErrors() []error { return m }

// ListServiceUserProjectsResponseValidationError is the validation error
// returned by ListServiceUserProjectsResponse.Validate if the designated
// constraints aren't met.
type ListServiceUserProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserProjectsResponseValidationError) ErrorName() string {
	return "ListServiceUserProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserProjectsResponseValidationError{}

// Validate checks the field values on ListOrganizationGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationGroupsRequestMultiError, or nil if none found.
func (m *ListOrganizationGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationGroupsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListOrganizationGroupsRequest_OrgId_Pattern.MatchString(m.GetOrgId()) {
		err := ListOrganizationGroupsRequestValidationError{
			field:  "OrgId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for WithMembers

	// no validation rules for WithMemberCount

	if len(errors) > 0 {
		return ListOrganizationGroupsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationGroupsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationGroupsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationGroupsRequestValidationError is the validation error
// returned by ListOrganizationGroupsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationGroupsRequestValidationError) ErrorName() string {
	return "ListOrganizationGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationGroupsRequestValidationError{}

var _ListOrganizationGroupsRequest_OrgId_Pattern = regexp.MustCompile("^[A-Za-z0-9_-]+$")

// Validate checks the field values on ListOrganizationGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationGroupsResponseMultiError, or nil if none found.
func (m *ListOrganizationGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationGroupsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationGroupsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationGroupsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationGroupsResponseValidationError is the validation error
// returned by ListOrganizationGroupsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationGroupsResponseValidationError) ErrorName() string {
	return "ListOrganizationGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationGroupsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationRoleRequestMultiError, or nil if none found.
func (m *CreateOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateOrganizationRoleRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	if len(errors) > 0 {
		return CreateOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRoleRequestValidationError is the validation error
// returned by CreateOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRoleRequestValidationError) ErrorName() string {
	return "CreateOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRoleRequestValidationError{}

// Validate checks the field values on CreateOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationRoleResponseMultiError, or nil if none found.
func (m *CreateOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationRoleResponseValidationError is the validation error
// returned by CreateOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRoleResponseValidationError) ErrorName() string {
	return "CreateOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRoleResponseValidationError{}

// Validate checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleRequestMultiError, or nil if none found.
func (m *GetOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetOrganizationRoleRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRoleRequestValidationError is the validation error returned
// by GetOrganizationRoleRequest.Validate if the designated constraints aren't met.
type GetOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleRequestValidationError) ErrorName() string {
	return "GetOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleRequestValidationError{}

// Validate checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleResponseMultiError, or nil if none found.
func (m *GetOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// GetOrganizationRoleResponseValidationError is the validation error returned
// by GetOrganizationRoleResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleResponseValidationError) ErrorName() string {
	return "GetOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRoleRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRoleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRoleRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRoleRequestValidationError is the validation error
// returned by UpdateOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRoleRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRoleRequestValidationError{}

// Validate checks the field values on UpdateOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRoleResponseMultiError, or nil if none found.
func (m *UpdateOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationRoleResponseValidationError is the validation error
// returned by UpdateOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRoleResponseValidationError) ErrorName() string {
	return "UpdateOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on ListOrganizationRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationRolesRequestMultiError, or nil if none found.
func (m *ListOrganizationRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationRolesRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationRolesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationRolesRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRolesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRolesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationRolesRequestValidationError is the validation error returned
// by ListOrganizationRolesRequest.Validate if the designated constraints
// aren't met.
type ListOrganizationRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRolesRequestValidationError) ErrorName() string {
	return "ListOrganizationRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRolesRequestValidationError{}

// Validate checks the field values on ListOrganizationRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRolesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationRolesResponseMultiError, or nil if none found.
func (m *ListOrganizationRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationRolesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationRolesResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRolesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRolesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationRolesResponseValidationError is the validation error
// returned by ListOrganizationRolesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRolesResponseValidationError) ErrorName() string {
	return "ListOrganizationRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRolesResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRoleRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteOrganizationRoleRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRoleRequestValidationError is the validation error
// returned by DeleteOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRoleRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRoleRequestValidationError{}

// Validate checks the field values on DeleteOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRoleResponseMultiError, or nil if none found.
func (m *DeleteOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationRoleResponseValidationError is the validation error
// returned by DeleteOrganizationRoleResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRoleResponseValidationError) ErrorName() string {
	return "DeleteOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRoleResponseValidationError{}

// Validate checks the field values on OrganizationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationRequestBodyMultiError, or nil if none found.
func (m *OrganizationRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_OrganizationRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := OrganizationRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAvatar() != "" {

		if utf8.RuneCountInString(m.GetAvatar()) > 250000 {
			err := OrganizationRequestBodyValidationError{
				field:  "Avatar",
				reason: "value length must be at most 250000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_OrganizationRequestBody_Avatar_Pattern.MatchString(m.GetAvatar()) {
			err := OrganizationRequestBodyValidationError{
				field:  "Avatar",
				reason: "value does not match regex pattern \"^data:image/(png|jpg|jpeg|gif);base64,([a-zA-Z0-9+/]+={0,2})+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OrganizationRequestBodyMultiError(errors)
	}

	return nil
}

// OrganizationRequestBodyMultiError is an error wrapping multiple validation
// errors returned by OrganizationRequestBody.ValidateAll() if the designated
// constraints aren't met.
type OrganizationRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationRequestBodyMultiError) AllErrors() []error { return m }

// OrganizationRequestBodyValidationError is the validation error returned by
// OrganizationRequestBody.Validate if the designated constraints aren't met.
type OrganizationRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationRequestBodyValidationError) ErrorName() string {
	return "OrganizationRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationRequestBodyValidationError{}

var _OrganizationRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

var _OrganizationRequestBody_Avatar_Pattern = regexp.MustCompile("^data:image/(png|jpg|jpeg|gif);base64,([a-zA-Z0-9+/]+={0,2})+$")

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for State

	if m.GetPageSize() != 0 {

		if m.GetPageSize() < 1 {
			err := ListOrganizationsRequestValidationError{
				field:  "PageSize",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageNum() != 0 {

		if m.GetPageNum() < 1 {
			err := ListOrganizationsRequestValidationError{
				field:  "PageNum",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateOrganizationRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on ListOrganizationAdminsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationAdminsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAdminsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationAdminsRequestMultiError, or nil if none found.
func (m *ListOrganizationAdminsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAdminsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationAdminsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationAdminsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationAdminsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationAdminsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationAdminsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAdminsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAdminsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationAdminsRequestValidationError is the validation error
// returned by ListOrganizationAdminsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAdminsRequestValidationError) ErrorName() string {
	return "ListOrganizationAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAdminsRequestValidationError{}

// Validate checks the field values on ListOrganizationAdminsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationAdminsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAdminsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationAdminsResponseMultiError, or nil if none found.
func (m *ListOrganizationAdminsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAdminsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationAdminsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationAdminsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationAdminsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationAdminsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationAdminsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAdminsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAdminsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationAdminsResponseValidationError is the validation error
// returned by ListOrganizationAdminsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAdminsResponseValidationError) ErrorName() string {
	return "ListOrganizationAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAdminsResponseValidationError{}

// Validate checks the field values on ListOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationUsersRequestMultiError, or nil if none found.
func (m *ListOrganizationUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PermissionFilter

	// no validation rules for WithRoles

	if len(errors) > 0 {
		return ListOrganizationUsersRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationUsersRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUsersRequestMultiError) AllErrors() []error { return m }

// ListOrganizationUsersRequestValidationError is the validation error returned
// by ListOrganizationUsersRequest.Validate if the designated constraints
// aren't met.
type ListOrganizationUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUsersRequestValidationError) ErrorName() string {
	return "ListOrganizationUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUsersRequestValidationError{}

// Validate checks the field values on ListOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationUsersResponseMultiError, or nil if none found.
func (m *ListOrganizationUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRolePairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationUsersResponseValidationError{
					field:  fmt.Sprintf("RolePairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationUsersResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationUsersResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationUsersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUsersResponseMultiError) AllErrors() []error { return m }

// ListOrganizationUsersResponseValidationError is the validation error
// returned by ListOrganizationUsersResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUsersResponseValidationError) ErrorName() string {
	return "ListOrganizationUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUsersResponseValidationError{}

// Validate checks the field values on AddOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationUsersRequestMultiError, or nil if none found.
func (m *AddOrganizationUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := AddOrganizationUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrganizationUsersRequestMultiError(errors)
	}

	return nil
}

// AddOrganizationUsersRequestMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationUsersRequestMultiError) AllErrors() []error { return m }

// AddOrganizationUsersRequestValidationError is the validation error returned
// by AddOrganizationUsersRequest.Validate if the designated constraints
// aren't met.
type AddOrganizationUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationUsersRequestValidationError) ErrorName() string {
	return "AddOrganizationUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationUsersRequestValidationError{}

// Validate checks the field values on AddOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationUsersResponseMultiError, or nil if none found.
func (m *AddOrganizationUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrganizationUsersResponseMultiError(errors)
	}

	return nil
}

// AddOrganizationUsersResponseMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationUsersResponseMultiError) AllErrors() []error { return m }

// AddOrganizationUsersResponseValidationError is the validation error returned
// by AddOrganizationUsersResponse.Validate if the designated constraints
// aren't met.
type AddOrganizationUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationUsersResponseValidationError) ErrorName() string {
	return "AddOrganizationUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationUsersResponseValidationError{}

// Validate checks the field values on RemoveOrganizationUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationUserRequestMultiError, or nil if none found.
func (m *RemoveOrganizationUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := RemoveOrganizationUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveOrganizationUserRequestMultiError(errors)
	}

	return nil
}

// RemoveOrganizationUserRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveOrganizationUserRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveOrganizationUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationUserRequestMultiError) AllErrors() []error { return m }

// RemoveOrganizationUserRequestValidationError is the validation error
// returned by RemoveOrganizationUserRequest.Validate if the designated
// constraints aren't met.
type RemoveOrganizationUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationUserRequestValidationError) ErrorName() string {
	return "RemoveOrganizationUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationUserRequestValidationError{}

// Validate checks the field values on RemoveOrganizationUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationUserResponseMultiError, or nil if none found.
func (m *RemoveOrganizationUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrganizationUserResponseMultiError(errors)
	}

	return nil
}

// RemoveOrganizationUserResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveOrganizationUserResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveOrganizationUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationUserResponseMultiError) AllErrors() []error { return m }

// RemoveOrganizationUserResponseValidationError is the validation error
// returned by RemoveOrganizationUserResponse.Validate if the designated
// constraints aren't met.
type RemoveOrganizationUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationUserResponseValidationError) ErrorName() string {
	return "RemoveOrganizationUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationUserResponseValidationError{}

// Validate checks the field values on ListOrganizationServiceUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationServiceUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationServiceUsersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationServiceUsersRequestMultiError, or nil if none found.
func (m *ListOrganizationServiceUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationServiceUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationServiceUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationServiceUsersRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationServiceUsersRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationServiceUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationServiceUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationServiceUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationServiceUsersRequestMultiError) AllErrors() []error { return m }

// ListOrganizationServiceUsersRequestValidationError is the validation error
// returned by ListOrganizationServiceUsersRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationServiceUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationServiceUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationServiceUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationServiceUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationServiceUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationServiceUsersRequestValidationError) ErrorName() string {
	return "ListOrganizationServiceUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationServiceUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationServiceUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationServiceUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationServiceUsersRequestValidationError{}

// Validate checks the field values on ListOrganizationServiceUsersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationServiceUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationServiceUsersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationServiceUsersResponseMultiError, or nil if none found.
func (m *ListOrganizationServiceUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationServiceUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceusers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationServiceUsersResponseValidationError{
					field:  fmt.Sprintf("Serviceusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationServiceUsersResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationServiceUsersResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationServiceUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationServiceUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationServiceUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationServiceUsersResponseMultiError) AllErrors() []error { return m }

// ListOrganizationServiceUsersResponseValidationError is the validation error
// returned by ListOrganizationServiceUsersResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationServiceUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationServiceUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationServiceUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationServiceUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationServiceUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationServiceUsersResponseValidationError) ErrorName() string {
	return "ListOrganizationServiceUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationServiceUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationServiceUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationServiceUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationServiceUsersResponseValidationError{}

// Validate checks the field values on ListOrganizationInvitationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationInvitationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitationsRequestMultiError, or nil if none found.
func (m *ListOrganizationInvitationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListOrganizationInvitationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitationsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationInvitationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationInvitationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationInvitationsRequestValidationError is the validation error
// returned by ListOrganizationInvitationsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitationsRequestValidationError) ErrorName() string {
	return "ListOrganizationInvitationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitationsRequestValidationError{}

// Validate checks the field values on ListOrganizationInvitationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationInvitationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitationsResponseMultiError, or nil if none found.
func (m *ListOrganizationInvitationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationInvitationsResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationInvitationsResponseValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationInvitationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitationsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationInvitationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationInvitationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationInvitationsResponseValidationError is the validation error
// returned by ListOrganizationInvitationsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitationsResponseValidationError) ErrorName() string {
	return "ListOrganizationInvitationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitationsResponseValidationError{}

// Validate checks the field values on CreateOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationInvitationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationInvitationRequestMultiError, or nil if none found.
func (m *CreateOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if l := len(m.GetUserIds()); l < 1 || l > 10 {
		err := CreateOrganizationInvitationRequestValidationError{
			field:  "UserIds",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationInvitationRequestValidationError is the validation error
// returned by CreateOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationInvitationRequestValidationError) ErrorName() string {
	return "CreateOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationInvitationRequestValidationError{}

// Validate checks the field values on CreateOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationInvitationResponseMultiError, or nil if none found.
func (m *CreateOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrganizationInvitationResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrganizationInvitationResponseValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrganizationInvitationResponseValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationInvitationResponseValidationError is the validation error
// returned by CreateOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationInvitationResponseValidationError) ErrorName() string {
	return "CreateOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationInvitationResponseValidationError{}

// Validate checks the field values on GetOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationInvitationRequestMultiError, or nil if none found.
func (m *GetOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GetOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationInvitationRequestValidationError is the validation error
// returned by GetOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInvitationRequestValidationError) ErrorName() string {
	return "GetOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInvitationRequestValidationError{}

// Validate checks the field values on GetOrganizationInvitationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationInvitationResponseMultiError, or nil if none found.
func (m *GetOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvitation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationInvitationResponseValidationError{
					field:  "Invitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationInvitationResponseValidationError{
					field:  "Invitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvitation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationInvitationResponseValidationError{
				field:  "Invitation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationInvitationResponseValidationError is the validation error
// returned by GetOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationInvitationResponseValidationError) ErrorName() string {
	return "GetOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationInvitationResponseValidationError{}

// Validate checks the field values on AcceptOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AcceptOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrganizationInvitationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AcceptOrganizationInvitationRequestMultiError, or nil if none found.
func (m *AcceptOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return AcceptOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// AcceptOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// AcceptOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// AcceptOrganizationInvitationRequestValidationError is the validation error
// returned by AcceptOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type AcceptOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrganizationInvitationRequestValidationError) ErrorName() string {
	return "AcceptOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrganizationInvitationRequestValidationError{}

// Validate checks the field values on AcceptOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AcceptOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AcceptOrganizationInvitationResponseMultiError, or nil if none found.
func (m *AcceptOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// AcceptOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// AcceptOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// AcceptOrganizationInvitationResponseValidationError is the validation error
// returned by AcceptOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type AcceptOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrganizationInvitationResponseValidationError) ErrorName() string {
	return "AcceptOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrganizationInvitationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationInvitationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationInvitationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if len(errors) > 0 {
		return DeleteOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationInvitationRequestValidationError is the validation error
// returned by DeleteOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationInvitationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationInvitationRequestValidationError{}

// Validate checks the field values on ListOrganizationDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationDomainsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationDomainsRequestMultiError, or nil if none found.
func (m *ListOrganizationDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationDomainsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return ListOrganizationDomainsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationDomainsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationDomainsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationDomainsRequestValidationError is the validation error
// returned by ListOrganizationDomainsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationDomainsRequestValidationError) ErrorName() string {
	return "ListOrganizationDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationDomainsRequestValidationError{}

// Validate checks the field values on ListOrganizationDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationDomainsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationDomainsResponseMultiError, or nil if none found.
func (m *ListOrganizationDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationDomainsResponseValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationDomainsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationDomainsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationDomainsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationDomainsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationDomainsResponseValidationError is the validation error
// returned by ListOrganizationDomainsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationDomainsResponseValidationError) ErrorName() string {
	return "ListOrganizationDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationDomainsResponseValidationError{}

// Validate checks the field values on ListOrganizationsByDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationsByDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsByDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationsByDomainRequestMultiError, or nil if none found.
func (m *ListOrganizationsByDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := ListOrganizationsByDomainRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationsByDomainRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsByDomainRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationsByDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsByDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByDomainRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsByDomainRequestValidationError is the validation error
// returned by ListOrganizationsByDomainRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationsByDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByDomainRequestValidationError) ErrorName() string {
	return "ListOrganizationsByDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByDomainRequestValidationError{}

// Validate checks the field values on ListOrganizationsByDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationsByDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsByDomainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationsByDomainResponseMultiError, or nil if none found.
func (m *ListOrganizationsByDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsByDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsByDomainResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsByDomainResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsByDomainResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationsByDomainResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsByDomainResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationsByDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsByDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsByDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsByDomainResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsByDomainResponseValidationError is the validation error
// returned by ListOrganizationsByDomainResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationsByDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsByDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsByDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsByDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsByDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsByDomainResponseValidationError) ErrorName() string {
	return "ListOrganizationsByDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsByDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsByDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsByDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsByDomainResponseValidationError{}

// Validate checks the field values on JoinOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinOrganizationRequestMultiError, or nil if none found.
func (m *JoinOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := JoinOrganizationRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JoinOrganizationRequestMultiError(errors)
	}

	return nil
}

// JoinOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by JoinOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type JoinOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinOrganizationRequestMultiError) AllErrors() []error { return m }

// JoinOrganizationRequestValidationError is the validation error returned by
// JoinOrganizationRequest.Validate if the designated constraints aren't met.
type JoinOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinOrganizationRequestValidationError) ErrorName() string {
	return "JoinOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinOrganizationRequestValidationError{}

// Validate checks the field values on JoinOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinOrganizationResponseMultiError, or nil if none found.
func (m *JoinOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinOrganizationResponseMultiError(errors)
	}

	return nil
}

// JoinOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by JoinOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type JoinOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinOrganizationResponseMultiError) AllErrors() []error { return m }

// JoinOrganizationResponseValidationError is the validation error returned by
// JoinOrganizationResponse.Validate if the designated constraints aren't met.
type JoinOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinOrganizationResponseValidationError) ErrorName() string {
	return "JoinOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationDomainRequestMultiError, or nil if none found.
func (m *GetOrganizationDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := GetOrganizationDomainRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetOrganizationDomainRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDomainRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationDomainRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDomainRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDomainRequestMultiError) AllErrors() []error { return m }

// GetOrganizationDomainRequestValidationError is the validation error returned
// by GetOrganizationDomainRequest.Validate if the designated constraints
// aren't met.
type GetOrganizationDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDomainRequestValidationError) ErrorName() string {
	return "GetOrganizationDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDomainRequestValidationError{}

// Validate checks the field values on GetOrganizationDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationDomainResponseMultiError, or nil if none found.
func (m *GetOrganizationDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationDomainResponseValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationDomainResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationDomainResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDomainResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDomainResponseMultiError) AllErrors() []error { return m }

// GetOrganizationDomainResponseValidationError is the validation error
// returned by GetOrganizationDomainResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDomainResponseValidationError) ErrorName() string {
	return "GetOrganizationDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDomainResponseValidationError{}

// Validate checks the field values on CreateOrganizationDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationDomainRequestMultiError, or nil if none found.
func (m *CreateOrganizationDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateOrganizationDomainRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 3 {
		err := CreateOrganizationDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrganizationDomainRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationDomainRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationDomainRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationDomainRequestValidationError is the validation error
// returned by CreateOrganizationDomainRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationDomainRequestValidationError) ErrorName() string {
	return "CreateOrganizationDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationDomainRequestValidationError{}

// Validate checks the field values on CreateOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationDomainResponseMultiError, or nil if none found.
func (m *CreateOrganizationDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationDomainResponseValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationDomainResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationDomainResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationDomainResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationDomainResponseValidationError is the validation error
// returned by CreateOrganizationDomainResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationDomainResponseValidationError) ErrorName() string {
	return "CreateOrganizationDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationDomainResponseValidationError{}

// Validate checks the field values on DeleteOrganizationDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationDomainRequestMultiError, or nil if none found.
func (m *DeleteOrganizationDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := DeleteOrganizationDomainRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteOrganizationDomainRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationDomainRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationDomainRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationDomainRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationDomainRequestValidationError is the validation error
// returned by DeleteOrganizationDomainRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationDomainRequestValidationError) ErrorName() string {
	return "DeleteOrganizationDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationDomainRequestValidationError{}

// Validate checks the field values on DeleteOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationDomainResponseMultiError, or nil if none found.
func (m *DeleteOrganizationDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationDomainResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationDomainResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationDomainResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationDomainResponseValidationError is the validation error
// returned by DeleteOrganizationDomainResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationDomainResponseValidationError) ErrorName() string {
	return "DeleteOrganizationDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationDomainResponseValidationError{}

// Validate checks the field values on VerifyOrganizationDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyOrganizationDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOrganizationDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VerifyOrganizationDomainRequestMultiError, or nil if none found.
func (m *VerifyOrganizationDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOrganizationDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := VerifyOrganizationDomainRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := VerifyOrganizationDomainRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyOrganizationDomainRequestMultiError(errors)
	}

	return nil
}

// VerifyOrganizationDomainRequestMultiError is an error wrapping multiple
// validation errors returned by VerifyOrganizationDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type VerifyOrganizationDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOrganizationDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOrganizationDomainRequestMultiError) AllErrors() []error { return m }

// VerifyOrganizationDomainRequestValidationError is the validation error
// returned by VerifyOrganizationDomainRequest.Validate if the designated
// constraints aren't met.
type VerifyOrganizationDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOrganizationDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOrganizationDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOrganizationDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOrganizationDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOrganizationDomainRequestValidationError) ErrorName() string {
	return "VerifyOrganizationDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOrganizationDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOrganizationDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOrganizationDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOrganizationDomainRequestValidationError{}

// Validate checks the field values on VerifyOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VerifyOrganizationDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOrganizationDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VerifyOrganizationDomainResponseMultiError, or nil if none found.
func (m *VerifyOrganizationDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOrganizationDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if len(errors) > 0 {
		return VerifyOrganizationDomainResponseMultiError(errors)
	}

	return nil
}

// VerifyOrganizationDomainResponseMultiError is an error wrapping multiple
// validation errors returned by
// VerifyOrganizationDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyOrganizationDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOrganizationDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOrganizationDomainResponseMultiError) AllErrors() []error { return m }

// VerifyOrganizationDomainResponseValidationError is the validation error
// returned by VerifyOrganizationDomainResponse.Validate if the designated
// constraints aren't met.
type VerifyOrganizationDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOrganizationDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOrganizationDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOrganizationDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOrganizationDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOrganizationDomainResponseValidationError) ErrorName() string {
	return "VerifyOrganizationDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOrganizationDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOrganizationDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOrganizationDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOrganizationDomainResponseValidationError{}

// Validate checks the field values on DeleteOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationInvitationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationInvitationResponseValidationError is the validation error
// returned by DeleteOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationInvitationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationInvitationResponseValidationError{}

// Validate checks the field values on EnableOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableOrganizationRequestMultiError, or nil if none found.
func (m *EnableOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableOrganizationRequestMultiError(errors)
	}

	return nil
}

// EnableOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by EnableOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type EnableOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableOrganizationRequestMultiError) AllErrors() []error { return m }

// EnableOrganizationRequestValidationError is the validation error returned by
// EnableOrganizationRequest.Validate if the designated constraints aren't met.
type EnableOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableOrganizationRequestValidationError) ErrorName() string {
	return "EnableOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableOrganizationRequestValidationError{}

// Validate checks the field values on EnableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableOrganizationResponseMultiError, or nil if none found.
func (m *EnableOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableOrganizationResponseMultiError(errors)
	}

	return nil
}

// EnableOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by EnableOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type EnableOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableOrganizationResponseMultiError) AllErrors() []error { return m }

// EnableOrganizationResponseValidationError is the validation error returned
// by EnableOrganizationResponse.Validate if the designated constraints aren't met.
type EnableOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableOrganizationResponseValidationError) ErrorName() string {
	return "EnableOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableOrganizationResponseValidationError{}

// Validate checks the field values on DisableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableOrganizationRequestMultiError, or nil if none found.
func (m *DisableOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableOrganizationRequestMultiError(errors)
	}

	return nil
}

// DisableOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by DisableOrganizationRequest.ValidateAll() if
// the designated constraints aren't met.
type DisableOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableOrganizationRequestMultiError) AllErrors() []error { return m }

// DisableOrganizationRequestValidationError is the validation error returned
// by DisableOrganizationRequest.Validate if the designated constraints aren't met.
type DisableOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableOrganizationRequestValidationError) ErrorName() string {
	return "DisableOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableOrganizationRequestValidationError{}

// Validate checks the field values on DisableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableOrganizationResponseMultiError, or nil if none found.
func (m *DisableOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableOrganizationResponseMultiError(errors)
	}

	return nil
}

// DisableOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DisableOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DisableOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableOrganizationResponseMultiError) AllErrors() []error { return m }

// DisableOrganizationResponseValidationError is the validation error returned
// by DisableOrganizationResponse.Validate if the designated constraints
// aren't met.
type DisableOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableOrganizationResponseValidationError) ErrorName() string {
	return "DisableOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationKycRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationKycRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationKycRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationKycRequestMultiError, or nil if none found.
func (m *GetOrganizationKycRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationKycRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GetOrganizationKycRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationKycRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationKycRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOrganizationKycRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationKycRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationKycRequestMultiError) AllErrors() []error { return m }

// GetOrganizationKycRequestValidationError is the validation error returned by
// GetOrganizationKycRequest.Validate if the designated constraints aren't met.
type GetOrganizationKycRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationKycRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationKycRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationKycRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationKycRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationKycRequestValidationError) ErrorName() string {
	return "GetOrganizationKycRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationKycRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationKycRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationKycRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationKycRequestValidationError{}

// Validate checks the field values on GetOrganizationKycResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationKycResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationKycResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationKycResponseMultiError, or nil if none found.
func (m *GetOrganizationKycResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationKycResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationKyc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationKycResponseValidationError{
					field:  "OrganizationKyc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationKycResponseValidationError{
					field:  "OrganizationKyc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationKyc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationKycResponseValidationError{
				field:  "OrganizationKyc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationKycResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationKycResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationKycResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationKycResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationKycResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationKycResponseMultiError) AllErrors() []error { return m }

// GetOrganizationKycResponseValidationError is the validation error returned
// by GetOrganizationKycResponse.Validate if the designated constraints aren't met.
type GetOrganizationKycResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationKycResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationKycResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationKycResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationKycResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationKycResponseValidationError) ErrorName() string {
	return "GetOrganizationKycResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationKycResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationKycResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationKycResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationKycResponseValidationError{}

// Validate checks the field values on ProjectRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectRequestBodyMultiError, or nil if none found.
func (m *ProjectRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ProjectRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := ProjectRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ProjectRequestBodyValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectRequestBodyMultiError(errors)
	}

	return nil
}

// ProjectRequestBodyMultiError is an error wrapping multiple validation errors
// returned by ProjectRequestBody.ValidateAll() if the designated constraints
// aren't met.
type ProjectRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectRequestBodyMultiError) AllErrors() []error { return m }

// ProjectRequestBodyValidationError is the validation error returned by
// ProjectRequestBody.Validate if the designated constraints aren't met.
type ProjectRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectRequestBodyValidationError) ErrorName() string {
	return "ProjectRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectRequestBodyValidationError{}

var _ProjectRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectRequestMultiError, or nil if none found.
func (m *CreateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateProjectRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectRequestMultiError(errors)
	}

	return nil
}

// CreateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectRequestMultiError) AllErrors() []error { return m }

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResponseMultiError, or nil if none found.
func (m *CreateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResponseMultiError) AllErrors() []error { return m }

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on ListOrganizationProjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationProjectsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationProjectsRequestMultiError, or nil if none found.
func (m *ListOrganizationProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationProjectsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	// no validation rules for WithMemberCount

	if len(errors) > 0 {
		return ListOrganizationProjectsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationProjectsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationProjectsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationProjectsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationProjectsRequestValidationError is the validation error
// returned by ListOrganizationProjectsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationProjectsRequestValidationError) ErrorName() string {
	return "ListOrganizationProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationProjectsRequestValidationError{}

// Validate checks the field values on ListOrganizationProjectsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationProjectsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationProjectsResponseMultiError, or nil if none found.
func (m *ListOrganizationProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationProjectsResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationProjectsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationProjectsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationProjectsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationProjectsResponseValidationError is the validation error
// returned by ListOrganizationProjectsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationProjectsResponseValidationError) ErrorName() string {
	return "ListOrganizationProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationProjectsResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRequestMultiError, or nil if none found.
func (m *UpdateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResponseMultiError, or nil if none found.
func (m *UpdateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on ListProjectAdminsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectAdminsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectAdminsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectAdminsRequestMultiError, or nil if none found.
func (m *ListProjectAdminsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectAdminsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectAdminsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectAdminsRequestMultiError(errors)
	}

	return nil
}

// ListProjectAdminsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectAdminsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectAdminsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectAdminsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectAdminsRequestMultiError) AllErrors() []error { return m }

// ListProjectAdminsRequestValidationError is the validation error returned by
// ListProjectAdminsRequest.Validate if the designated constraints aren't met.
type ListProjectAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectAdminsRequestValidationError) ErrorName() string {
	return "ListProjectAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectAdminsRequestValidationError{}

// Validate checks the field values on ListProjectAdminsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectAdminsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectAdminsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectAdminsResponseMultiError, or nil if none found.
func (m *ListProjectAdminsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectAdminsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectAdminsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectAdminsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectAdminsResponseMultiError(errors)
	}

	return nil
}

// ListProjectAdminsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectAdminsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListProjectAdminsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectAdminsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectAdminsResponseMultiError) AllErrors() []error { return m }

// ListProjectAdminsResponseValidationError is the validation error returned by
// ListProjectAdminsResponse.Validate if the designated constraints aren't met.
type ListProjectAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectAdminsResponseValidationError) ErrorName() string {
	return "ListProjectAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectAdminsResponseValidationError{}

// Validate checks the field values on ListProjectUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectUsersRequestMultiError, or nil if none found.
func (m *ListProjectUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PermissionFilter

	// no validation rules for WithRoles

	if len(errors) > 0 {
		return ListProjectUsersRequestMultiError(errors)
	}

	return nil
}

// ListProjectUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectUsersRequestMultiError) AllErrors() []error { return m }

// ListProjectUsersRequestValidationError is the validation error returned by
// ListProjectUsersRequest.Validate if the designated constraints aren't met.
type ListProjectUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectUsersRequestValidationError) ErrorName() string {
	return "ListProjectUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectUsersRequestValidationError{}

// Validate checks the field values on ListProjectUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectUsersResponseMultiError, or nil if none found.
func (m *ListProjectUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRolePairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectUsersResponseValidationError{
					field:  fmt.Sprintf("RolePairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectUsersResponseMultiError(errors)
	}

	return nil
}

// ListProjectUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectUsersResponseMultiError) AllErrors() []error { return m }

// ListProjectUsersResponseValidationError is the validation error returned by
// ListProjectUsersResponse.Validate if the designated constraints aren't met.
type ListProjectUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectUsersResponseValidationError) ErrorName() string {
	return "ListProjectUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectUsersResponseValidationError{}

// Validate checks the field values on ListProjectServiceUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectServiceUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectServiceUsersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectServiceUsersRequestMultiError, or nil if none found.
func (m *ListProjectServiceUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectServiceUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectServiceUsersRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithRoles

	if len(errors) > 0 {
		return ListProjectServiceUsersRequestMultiError(errors)
	}

	return nil
}

// ListProjectServiceUsersRequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectServiceUsersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProjectServiceUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectServiceUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectServiceUsersRequestMultiError) AllErrors() []error { return m }

// ListProjectServiceUsersRequestValidationError is the validation error
// returned by ListProjectServiceUsersRequest.Validate if the designated
// constraints aren't met.
type ListProjectServiceUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectServiceUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectServiceUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectServiceUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectServiceUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectServiceUsersRequestValidationError) ErrorName() string {
	return "ListProjectServiceUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectServiceUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectServiceUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectServiceUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectServiceUsersRequestValidationError{}

// Validate checks the field values on ListProjectServiceUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectServiceUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectServiceUsersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectServiceUsersResponseMultiError, or nil if none found.
func (m *ListProjectServiceUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectServiceUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceusers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponseValidationError{
						field:  fmt.Sprintf("Serviceusers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectServiceUsersResponseValidationError{
					field:  fmt.Sprintf("Serviceusers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRolePairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectServiceUsersResponseValidationError{
					field:  fmt.Sprintf("RolePairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectServiceUsersResponseMultiError(errors)
	}

	return nil
}

// ListProjectServiceUsersResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectServiceUsersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProjectServiceUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectServiceUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectServiceUsersResponseMultiError) AllErrors() []error { return m }

// ListProjectServiceUsersResponseValidationError is the validation error
// returned by ListProjectServiceUsersResponse.Validate if the designated
// constraints aren't met.
type ListProjectServiceUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectServiceUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectServiceUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectServiceUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectServiceUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectServiceUsersResponseValidationError) ErrorName() string {
	return "ListProjectServiceUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectServiceUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectServiceUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectServiceUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectServiceUsersResponseValidationError{}

// Validate checks the field values on ListProjectGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectGroupsRequestMultiError, or nil if none found.
func (m *ListProjectGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectGroupsRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithRoles

	if len(errors) > 0 {
		return ListProjectGroupsRequestMultiError(errors)
	}

	return nil
}

// ListProjectGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectGroupsRequestMultiError) AllErrors() []error { return m }

// ListProjectGroupsRequestValidationError is the validation error returned by
// ListProjectGroupsRequest.Validate if the designated constraints aren't met.
type ListProjectGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGroupsRequestValidationError) ErrorName() string {
	return "ListProjectGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGroupsRequestValidationError{}

// Validate checks the field values on ListProjectGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectGroupsResponseMultiError, or nil if none found.
func (m *ListProjectGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRolePairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectGroupsResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectGroupsResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGroupsResponseValidationError{
					field:  fmt.Sprintf("RolePairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectGroupsResponseMultiError(errors)
	}

	return nil
}

// ListProjectGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectGroupsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListProjectGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectGroupsResponseMultiError) AllErrors() []error { return m }

// ListProjectGroupsResponseValidationError is the validation error returned by
// ListProjectGroupsResponse.Validate if the designated constraints aren't met.
type ListProjectGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGroupsResponseValidationError) ErrorName() string {
	return "ListProjectGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGroupsResponseValidationError{}

// Validate checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectRequestMultiError, or nil if none found.
func (m *EnableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return EnableProjectRequestMultiError(errors)
	}

	return nil
}

// EnableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by EnableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectRequestMultiError) AllErrors() []error { return m }

// EnableProjectRequestValidationError is the validation error returned by
// EnableProjectRequest.Validate if the designated constraints aren't met.
type EnableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectRequestValidationError) ErrorName() string {
	return "EnableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectRequestValidationError{}

// Validate checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProjectResponseMultiError, or nil if none found.
func (m *EnableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableProjectResponseMultiError(errors)
	}

	return nil
}

// EnableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by EnableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProjectResponseMultiError) AllErrors() []error { return m }

// EnableProjectResponseValidationError is the validation error returned by
// EnableProjectResponse.Validate if the designated constraints aren't met.
type EnableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProjectResponseValidationError) ErrorName() string {
	return "EnableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProjectResponseValidationError{}

// Validate checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectRequestMultiError, or nil if none found.
func (m *DisableProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisableProjectRequestMultiError(errors)
	}

	return nil
}

// DisableProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DisableProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectRequestMultiError) AllErrors() []error { return m }

// DisableProjectRequestValidationError is the validation error returned by
// DisableProjectRequest.Validate if the designated constraints aren't met.
type DisableProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectRequestValidationError) ErrorName() string {
	return "DisableProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectRequestValidationError{}

// Validate checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProjectResponseMultiError, or nil if none found.
func (m *DisableProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableProjectResponseMultiError(errors)
	}

	return nil
}

// DisableProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DisableProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProjectResponseMultiError) AllErrors() []error { return m }

// DisableProjectResponseValidationError is the validation error returned by
// DisableProjectResponse.Validate if the designated constraints aren't met.
type DisableProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProjectResponseValidationError) ErrorName() string {
	return "DisableProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRequestMultiError, or nil if none found.
func (m *DeleteProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProjectRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResponseMultiError, or nil if none found.
func (m *DeleteProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on PolicyRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyRequestBodyMultiError, or nil if none found.
func (m *PolicyRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 3 {
		err := PolicyRequestBodyValidationError{
			field:  "RoleId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if utf8.RuneCountInString(m.GetResource()) < 3 {
		err := PolicyRequestBodyValidationError{
			field:  "Resource",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Principal

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyRequestBodyMultiError(errors)
	}

	return nil
}

// PolicyRequestBodyMultiError is an error wrapping multiple validation errors
// returned by PolicyRequestBody.ValidateAll() if the designated constraints
// aren't met.
type PolicyRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRequestBodyMultiError) AllErrors() []error { return m }

// PolicyRequestBodyValidationError is the validation error returned by
// PolicyRequestBody.Validate if the designated constraints aren't met.
type PolicyRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRequestBodyValidationError) ErrorName() string {
	return "PolicyRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRequestBodyValidationError{}

// Validate checks the field values on CreatePolicyForProjectBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyForProjectBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyForProjectBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyForProjectBodyMultiError, or nil if none found.
func (m *CreatePolicyForProjectBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyForProjectBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 3 {
		err := CreatePolicyForProjectBodyValidationError{
			field:  "RoleId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Principal

	if len(errors) > 0 {
		return CreatePolicyForProjectBodyMultiError(errors)
	}

	return nil
}

// CreatePolicyForProjectBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePolicyForProjectBody.ValidateAll() if
// the designated constraints aren't met.
type CreatePolicyForProjectBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyForProjectBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyForProjectBodyMultiError) AllErrors() []error { return m }

// CreatePolicyForProjectBodyValidationError is the validation error returned
// by CreatePolicyForProjectBody.Validate if the designated constraints aren't met.
type CreatePolicyForProjectBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyForProjectBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyForProjectBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyForProjectBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyForProjectBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyForProjectBodyValidationError) ErrorName() string {
	return "CreatePolicyForProjectBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyForProjectBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyForProjectBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyForProjectBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyForProjectBodyValidationError{}

// Validate checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionRequestMultiError, or nil if none found.
func (m *GetPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPermissionRequestMultiError(errors)
	}

	return nil
}

// GetPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionRequestMultiError) AllErrors() []error { return m }

// GetPermissionRequestValidationError is the validation error returned by
// GetPermissionRequest.Validate if the designated constraints aren't met.
type GetPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionRequestValidationError) ErrorName() string {
	return "GetPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionRequestValidationError{}

// Validate checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionResponseMultiError, or nil if none found.
func (m *GetPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPermissionResponseMultiError(errors)
	}

	return nil
}

// GetPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by GetPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionResponseMultiError) AllErrors() []error { return m }

// GetPermissionResponseValidationError is the validation error returned by
// GetPermissionResponse.Validate if the designated constraints aren't met.
type GetPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionResponseValidationError) ErrorName() string {
	return "GetPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionResponseValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsRequestMultiError, or nil if none found.
func (m *ListPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsRequestMultiError) AllErrors() []error { return m }

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponseMultiError, or nil if none found.
func (m *ListPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponseMultiError) AllErrors() []error { return m }

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesRequestMultiError, or nil if none found.
func (m *ListNamespacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNamespacesRequestMultiError(errors)
	}

	return nil
}

// ListNamespacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesRequestMultiError) AllErrors() []error { return m }

// ListNamespacesRequestValidationError is the validation error returned by
// ListNamespacesRequest.Validate if the designated constraints aren't met.
type ListNamespacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesRequestValidationError) ErrorName() string {
	return "ListNamespacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesRequestValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesResponseMultiError, or nil if none found.
func (m *ListNamespacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNamespacesResponseMultiError(errors)
	}

	return nil
}

// ListNamespacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesResponseMultiError) AllErrors() []error { return m }

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceRequestMultiError, or nil if none found.
func (m *GetNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNamespaceRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceRequestMultiError) AllErrors() []error { return m }

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceResponseMultiError, or nil if none found.
func (m *GetNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceResponseValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceResponseMultiError) AllErrors() []error { return m }

// GetNamespaceResponseValidationError is the validation error returned by
// GetNamespaceResponse.Validate if the designated constraints aren't met.
type GetNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceResponseValidationError) ErrorName() string {
	return "GetNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceResponseValidationError{}

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyRequestMultiError, or nil if none found.
func (m *CreatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreatePolicyRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRequestMultiError) AllErrors() []error { return m }

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyResponseMultiError, or nil if none found.
func (m *CreatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyResponseMultiError) AllErrors() []error { return m }

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyRequestMultiError, or nil if none found.
func (m *GetPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPolicyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyRequestMultiError) AllErrors() []error { return m }

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

// Validate checks the field values on GetPolicyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyResponseMultiError, or nil if none found.
func (m *GetPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPolicyResponseMultiError(errors)
	}

	return nil
}

// GetPolicyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPolicyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyResponseMultiError) AllErrors() []error { return m }

// GetPolicyResponseValidationError is the validation error returned by
// GetPolicyResponse.Validate if the designated constraints aren't met.
type GetPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyResponseValidationError) ErrorName() string {
	return "GetPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyResponseValidationError{}

// Validate checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesRequestMultiError, or nil if none found.
func (m *ListPoliciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ListPoliciesRequestMultiError(errors)
	}

	return nil
}

// ListPoliciesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPoliciesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPoliciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesRequestMultiError) AllErrors() []error { return m }

// ListPoliciesRequestValidationError is the validation error returned by
// ListPoliciesRequest.Validate if the designated constraints aren't met.
type ListPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesRequestValidationError) ErrorName() string {
	return "ListPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesRequestValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesResponseMultiError, or nil if none found.
func (m *ListPoliciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPoliciesResponseMultiError(errors)
	}

	return nil
}

// ListPoliciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPoliciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPoliciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesResponseMultiError) AllErrors() []error { return m }

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyRequestMultiError, or nil if none found.
func (m *UpdatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePolicyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePolicyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePolicyRequestMultiError(errors)
	}

	return nil
}

// UpdatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyRequestMultiError) AllErrors() []error { return m }

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

// Validate checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyResponseMultiError, or nil if none found.
func (m *UpdatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePolicyResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePolicyResponseMultiError(errors)
	}

	return nil
}

// UpdatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyResponseMultiError) AllErrors() []error { return m }

// UpdatePolicyResponseValidationError is the validation error returned by
// UpdatePolicyResponse.Validate if the designated constraints aren't met.
type UpdatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyResponseValidationError) ErrorName() string {
	return "UpdatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyResponseValidationError{}

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyRequestMultiError, or nil if none found.
func (m *DeletePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePolicyRequestMultiError(errors)
	}

	return nil
}

// DeletePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyRequestMultiError) AllErrors() []error { return m }

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

// Validate checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyResponseMultiError, or nil if none found.
func (m *DeletePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePolicyResponseMultiError(errors)
	}

	return nil
}

// DeletePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyResponseMultiError) AllErrors() []error { return m }

// DeletePolicyResponseValidationError is the validation error returned by
// DeletePolicyResponse.Validate if the designated constraints aren't met.
type DeletePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyResponseValidationError) ErrorName() string {
	return "DeletePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyResponseValidationError{}

// Validate checks the field values on CreatePolicyForProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyForProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyForProjectRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePolicyForProjectRequestMultiError, or nil if none found.
func (m *CreatePolicyForProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyForProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := CreatePolicyForProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBody() == nil {
		err := CreatePolicyForProjectRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePolicyForProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePolicyForProjectRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePolicyForProjectRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePolicyForProjectRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyForProjectRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePolicyForProjectRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePolicyForProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyForProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyForProjectRequestMultiError) AllErrors() []error { return m }

// CreatePolicyForProjectRequestValidationError is the validation error
// returned by CreatePolicyForProjectRequest.Validate if the designated
// constraints aren't met.
type CreatePolicyForProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyForProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyForProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyForProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyForProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyForProjectRequestValidationError) ErrorName() string {
	return "CreatePolicyForProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyForProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyForProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyForProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyForProjectRequestValidationError{}

// Validate checks the field values on CreatePolicyForProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyForProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyForProjectResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePolicyForProjectResponseMultiError, or nil if none found.
func (m *CreatePolicyForProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyForProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePolicyForProjectResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyForProjectResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePolicyForProjectResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePolicyForProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyForProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyForProjectResponseMultiError) AllErrors() []error { return m }

// CreatePolicyForProjectResponseValidationError is the validation error
// returned by CreatePolicyForProjectResponse.Validate if the designated
// constraints aren't met.
type CreatePolicyForProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyForProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyForProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyForProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyForProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyForProjectResponseValidationError) ErrorName() string {
	return "CreatePolicyForProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyForProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyForProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyForProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyForProjectResponseValidationError{}

// Validate checks the field values on RelationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationRequestBodyMultiError, or nil if none found.
func (m *RelationRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Object

	// no validation rules for Subject

	// no validation rules for Relation

	// no validation rules for SubjectSubRelation

	if len(errors) > 0 {
		return RelationRequestBodyMultiError(errors)
	}

	return nil
}

// RelationRequestBodyMultiError is an error wrapping multiple validation
// errors returned by RelationRequestBody.ValidateAll() if the designated
// constraints aren't met.
type RelationRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationRequestBodyMultiError) AllErrors() []error { return m }

// RelationRequestBodyValidationError is the validation error returned by
// RelationRequestBody.Validate if the designated constraints aren't met.
type RelationRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationRequestBodyValidationError) ErrorName() string {
	return "RelationRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationRequestBodyValidationError{}

// Validate checks the field values on CreateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRelationRequestMultiError, or nil if none found.
func (m *CreateRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateRelationRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRelationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRelationRequestMultiError(errors)
	}

	return nil
}

// CreateRelationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRelationRequestMultiError) AllErrors() []error { return m }

// CreateRelationRequestValidationError is the validation error returned by
// CreateRelationRequest.Validate if the designated constraints aren't met.
type CreateRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelationRequestValidationError) ErrorName() string {
	return "CreateRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelationRequestValidationError{}

// Validate checks the field values on CreateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRelationResponseMultiError, or nil if none found.
func (m *CreateRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRelationResponseMultiError(errors)
	}

	return nil
}

// CreateRelationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRelationResponseMultiError) AllErrors() []error { return m }

// CreateRelationResponseValidationError is the validation error returned by
// CreateRelationResponse.Validate if the designated constraints aren't met.
type CreateRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelationResponseValidationError) ErrorName() string {
	return "CreateRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelationResponseValidationError{}

// Validate checks the field values on GetRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationRequestMultiError, or nil if none found.
func (m *GetRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRelationRequestMultiError(errors)
	}

	return nil
}

// GetRelationRequestMultiError is an error wrapping multiple validation errors
// returned by GetRelationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationRequestMultiError) AllErrors() []error { return m }

// GetRelationRequestValidationError is the validation error returned by
// GetRelationRequest.Validate if the designated constraints aren't met.
type GetRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationRequestValidationError) ErrorName() string {
	return "GetRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationRequestValidationError{}

// Validate checks the field values on GetRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelationResponseMultiError, or nil if none found.
func (m *GetRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRelationResponseMultiError(errors)
	}

	return nil
}

// GetRelationResponseMultiError is an error wrapping multiple validation
// errors returned by GetRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelationResponseMultiError) AllErrors() []error { return m }

// GetRelationResponseValidationError is the validation error returned by
// GetRelationResponse.Validate if the designated constraints aren't met.
type GetRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelationResponseValidationError) ErrorName() string {
	return "GetRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelationResponseValidationError{}

// Validate checks the field values on UpdateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRelationRequestMultiError, or nil if none found.
func (m *UpdateRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRelationRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRelationRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRelationRequestMultiError(errors)
	}

	return nil
}

// UpdateRelationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationRequestMultiError) AllErrors() []error { return m }

// UpdateRelationRequestValidationError is the validation error returned by
// UpdateRelationRequest.Validate if the designated constraints aren't met.
type UpdateRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationRequestValidationError) ErrorName() string {
	return "UpdateRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationRequestValidationError{}

// Validate checks the field values on UpdateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRelationResponseMultiError, or nil if none found.
func (m *UpdateRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRelationResponseValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRelationResponseMultiError(errors)
	}

	return nil
}

// UpdateRelationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRelationResponseMultiError) AllErrors() []error { return m }

// UpdateRelationResponseValidationError is the validation error returned by
// UpdateRelationResponse.Validate if the designated constraints aren't met.
type UpdateRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelationResponseValidationError) ErrorName() string {
	return "UpdateRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelationResponseValidationError{}

// Validate checks the field values on GroupRequestBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRequestBodyMultiError, or nil if none found.
func (m *GroupRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GroupRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := GroupRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupRequestBodyMultiError(errors)
	}

	return nil
}

// GroupRequestBodyMultiError is an error wrapping multiple validation errors
// returned by GroupRequestBody.ValidateAll() if the designated constraints
// aren't met.
type GroupRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRequestBodyMultiError) AllErrors() []error { return m }

// GroupRequestBodyValidationError is the validation error returned by
// GroupRequestBody.Validate if the designated constraints aren't met.
type GroupRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRequestBodyValidationError) ErrorName() string { return "GroupRequestBodyValidationError" }

// Error satisfies the builtin error interface
func (e GroupRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRequestBodyValidationError{}

var _GroupRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateGroupRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for WithMembers

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponseMultiError, or nil if none found.
func (m *CreateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponseMultiError) AllErrors() []error { return m }

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponseMultiError, or nil if none found.
func (m *GetGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponseMultiError(errors)
	}

	return nil
}

// GetGroupResponseMultiError is an error wrapping multiple validation errors
// returned by GetGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponseMultiError) AllErrors() []error { return m }

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupResponseMultiError, or nil if none found.
func (m *UpdateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupResponseMultiError) AllErrors() []error { return m }

// UpdateGroupResponseValidationError is the validation error returned by
// UpdateGroupResponse.Validate if the designated constraints aren't met.
type UpdateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupResponseValidationError) ErrorName() string {
	return "UpdateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersRequestMultiError, or nil if none found.
func (m *ListGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for WithRoles

	if len(errors) > 0 {
		return ListGroupUsersRequestMultiError(errors)
	}

	return nil
}

// ListGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersRequestMultiError) AllErrors() []error { return m }

// ListGroupUsersRequestValidationError is the validation error returned by
// ListGroupUsersRequest.Validate if the designated constraints aren't met.
type ListGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersRequestValidationError) ErrorName() string {
	return "ListGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersRequestValidationError{}

// Validate checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersResponseMultiError, or nil if none found.
func (m *ListGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRolePairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("RolePairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupUsersResponseValidationError{
					field:  fmt.Sprintf("RolePairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupUsersResponseMultiError(errors)
	}

	return nil
}

// ListGroupUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersResponseMultiError) AllErrors() []error { return m }

// ListGroupUsersResponseValidationError is the validation error returned by
// ListGroupUsersResponse.Validate if the designated constraints aren't met.
type ListGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersResponseValidationError) ErrorName() string {
	return "ListGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersResponseValidationError{}

// Validate checks the field values on EnableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableGroupRequestMultiError, or nil if none found.
func (m *EnableGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := EnableGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableGroupRequestMultiError(errors)
	}

	return nil
}

// EnableGroupRequestMultiError is an error wrapping multiple validation errors
// returned by EnableGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableGroupRequestMultiError) AllErrors() []error { return m }

// EnableGroupRequestValidationError is the validation error returned by
// EnableGroupRequest.Validate if the designated constraints aren't met.
type EnableGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableGroupRequestValidationError) ErrorName() string {
	return "EnableGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableGroupRequestValidationError{}

// Validate checks the field values on EnableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableGroupResponseMultiError, or nil if none found.
func (m *EnableGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableGroupResponseMultiError(errors)
	}

	return nil
}

// EnableGroupResponseMultiError is an error wrapping multiple validation
// errors returned by EnableGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableGroupResponseMultiError) AllErrors() []error { return m }

// EnableGroupResponseValidationError is the validation error returned by
// EnableGroupResponse.Validate if the designated constraints aren't met.
type EnableGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableGroupResponseValidationError) ErrorName() string {
	return "EnableGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableGroupResponseValidationError{}

// Validate checks the field values on DisableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableGroupRequestMultiError, or nil if none found.
func (m *DisableGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DisableGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableGroupRequestMultiError(errors)
	}

	return nil
}

// DisableGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DisableGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableGroupRequestMultiError) AllErrors() []error { return m }

// DisableGroupRequestValidationError is the validation error returned by
// DisableGroupRequest.Validate if the designated constraints aren't met.
type DisableGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableGroupRequestValidationError) ErrorName() string {
	return "DisableGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableGroupRequestValidationError{}

// Validate checks the field values on DisableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableGroupResponseMultiError, or nil if none found.
func (m *DisableGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableGroupResponseMultiError(errors)
	}

	return nil
}

// DisableGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DisableGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableGroupResponseMultiError) AllErrors() []error { return m }

// DisableGroupResponseValidationError is the validation error returned by
// DisableGroupResponse.Validate if the designated constraints aren't met.
type DisableGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableGroupResponseValidationError) ErrorName() string {
	return "DisableGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableGroupResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := DeleteGroupRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponseMultiError, or nil if none found.
func (m *DeleteGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on AddGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGroupUsersRequestMultiError, or nil if none found.
func (m *AddGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := AddGroupUsersRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddGroupUsersRequestMultiError(errors)
	}

	return nil
}

// AddGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by AddGroupUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type AddGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGroupUsersRequestMultiError) AllErrors() []error { return m }

// AddGroupUsersRequestValidationError is the validation error returned by
// AddGroupUsersRequest.Validate if the designated constraints aren't met.
type AddGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupUsersRequestValidationError) ErrorName() string {
	return "AddGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupUsersRequestValidationError{}

// Validate checks the field values on AddGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGroupUsersResponseMultiError, or nil if none found.
func (m *AddGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddGroupUsersResponseMultiError(errors)
	}

	return nil
}

// AddGroupUsersResponseMultiError is an error wrapping multiple validation
// errors returned by AddGroupUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type AddGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGroupUsersResponseMultiError) AllErrors() []error { return m }

// AddGroupUsersResponseValidationError is the validation error returned by
// AddGroupUsersResponse.Validate if the designated constraints aren't met.
type AddGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGroupUsersResponseValidationError) ErrorName() string {
	return "AddGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGroupUsersResponseValidationError{}

// Validate checks the field values on RemoveGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGroupUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGroupUserRequestMultiError, or nil if none found.
func (m *RemoveGroupUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGroupUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := RemoveGroupUserRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveGroupUserRequestMultiError(errors)
	}

	return nil
}

// RemoveGroupUserRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveGroupUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveGroupUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGroupUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGroupUserRequestMultiError) AllErrors() []error { return m }

// RemoveGroupUserRequestValidationError is the validation error returned by
// RemoveGroupUserRequest.Validate if the designated constraints aren't met.
type RemoveGroupUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupUserRequestValidationError) ErrorName() string {
	return "RemoveGroupUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupUserRequestValidationError{}

// Validate checks the field values on RemoveGroupUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGroupUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGroupUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGroupUserResponseMultiError, or nil if none found.
func (m *RemoveGroupUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGroupUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveGroupUserResponseMultiError(errors)
	}

	return nil
}

// RemoveGroupUserResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveGroupUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveGroupUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGroupUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGroupUserResponseMultiError) AllErrors() []error { return m }

// RemoveGroupUserResponseValidationError is the validation error returned by
// RemoveGroupUserResponse.Validate if the designated constraints aren't met.
type RemoveGroupUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGroupUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGroupUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGroupUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGroupUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGroupUserResponseValidationError) ErrorName() string {
	return "RemoveGroupUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGroupUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGroupUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGroupUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGroupUserResponseValidationError{}

// Validate checks the field values on DeleteRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationRequestMultiError, or nil if none found.
func (m *DeleteRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Object

	// no validation rules for Subject

	// no validation rules for Relation

	if len(errors) > 0 {
		return DeleteRelationRequestMultiError(errors)
	}

	return nil
}

// DeleteRelationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRelationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationRequestMultiError) AllErrors() []error { return m }

// DeleteRelationRequestValidationError is the validation error returned by
// DeleteRelationRequest.Validate if the designated constraints aren't met.
type DeleteRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationRequestValidationError) ErrorName() string {
	return "DeleteRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationRequestValidationError{}

// Validate checks the field values on DeleteRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRelationResponseMultiError, or nil if none found.
func (m *DeleteRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRelationResponseMultiError(errors)
	}

	return nil
}

// DeleteRelationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRelationResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRelationResponseMultiError) AllErrors() []error { return m }

// DeleteRelationResponseValidationError is the validation error returned by
// DeleteRelationResponse.Validate if the designated constraints aren't met.
type DeleteRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelationResponseValidationError) ErrorName() string {
	return "DeleteRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelationResponseValidationError{}

// Validate checks the field values on ListProjectResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectResourcesRequestMultiError, or nil if none found.
func (m *ListProjectResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := ListProjectResourcesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ListProjectResourcesRequestMultiError(errors)
	}

	return nil
}

// ListProjectResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProjectResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectResourcesRequestMultiError) AllErrors() []error { return m }

// ListProjectResourcesRequestValidationError is the validation error returned
// by ListProjectResourcesRequest.Validate if the designated constraints
// aren't met.
type ListProjectResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectResourcesRequestValidationError) ErrorName() string {
	return "ListProjectResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectResourcesRequestValidationError{}

// Validate checks the field values on ListProjectResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectResourcesResponseMultiError, or nil if none found.
func (m *ListProjectResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectResourcesResponseMultiError(errors)
	}

	return nil
}

// ListProjectResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectResourcesResponseMultiError) AllErrors() []error { return m }

// ListProjectResourcesResponseValidationError is the validation error returned
// by ListProjectResourcesResponse.Validate if the designated constraints
// aren't met.
type ListProjectResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectResourcesResponseValidationError) ErrorName() string {
	return "ListProjectResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectResourcesResponseValidationError{}

// Validate checks the field values on ResourceRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRequestBodyMultiError, or nil if none found.
func (m *ResourceRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Namespace

	// no validation rules for Principal

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceRequestBodyValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceRequestBodyValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceRequestBodyMultiError(errors)
	}

	return nil
}

// ResourceRequestBodyMultiError is an error wrapping multiple validation
// errors returned by ResourceRequestBody.ValidateAll() if the designated
// constraints aren't met.
type ResourceRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRequestBodyMultiError) AllErrors() []error { return m }

// ResourceRequestBodyValidationError is the validation error returned by
// ResourceRequestBody.Validate if the designated constraints aren't met.
type ResourceRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRequestBodyValidationError) ErrorName() string {
	return "ResourceRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRequestBodyValidationError{}

// Validate checks the field values on CreateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResourceRequestMultiError, or nil if none found.
func (m *CreateProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateProjectResourceRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResourceRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectId

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProjectResourceRequestMultiError(errors)
	}

	return nil
}

// CreateProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResourceRequestMultiError) AllErrors() []error { return m }

// CreateProjectResourceRequestValidationError is the validation error returned
// by CreateProjectResourceRequest.Validate if the designated constraints
// aren't met.
type CreateProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResourceRequestValidationError) ErrorName() string {
	return "CreateProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResourceRequestValidationError{}

// Validate checks the field values on CreateProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProjectResourceResponseMultiError, or nil if none found.
func (m *CreateProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResourceResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResourceResponseMultiError) AllErrors() []error { return m }

// CreateProjectResourceResponseValidationError is the validation error
// returned by CreateProjectResourceResponse.Validate if the designated
// constraints aren't met.
type CreateProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResourceResponseValidationError) ErrorName() string {
	return "CreateProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResourceResponseValidationError{}

// Validate checks the field values on GetProjectResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResourceRequestMultiError, or nil if none found.
func (m *GetProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := GetProjectResourceRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProjectResourceRequestMultiError(errors)
	}

	return nil
}

// GetProjectResourceRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectResourceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResourceRequestMultiError) AllErrors() []error { return m }

// GetProjectResourceRequestValidationError is the validation error returned by
// GetProjectResourceRequest.Validate if the designated constraints aren't met.
type GetProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResourceRequestValidationError) ErrorName() string {
	return "GetProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResourceRequestValidationError{}

// Validate checks the field values on GetProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResourceResponseMultiError, or nil if none found.
func (m *GetProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResourceResponseMultiError(errors)
	}

	return nil
}

// GetProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by GetProjectResourceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResourceResponseMultiError) AllErrors() []error { return m }

// GetProjectResourceResponseValidationError is the validation error returned
// by GetProjectResourceResponse.Validate if the designated constraints aren't met.
type GetProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResourceResponseValidationError) ErrorName() string {
	return "GetProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResourceResponseValidationError{}

// Validate checks the field values on UpdateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResourceRequestMultiError, or nil if none found.
func (m *UpdateProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResourceRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResourceRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return UpdateProjectResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResourceRequestMultiError) AllErrors() []error { return m }

// UpdateProjectResourceRequestValidationError is the validation error returned
// by UpdateProjectResourceRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResourceRequestValidationError) ErrorName() string {
	return "UpdateProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResourceRequestValidationError{}

// Validate checks the field values on UpdateProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectResourceResponseMultiError, or nil if none found.
func (m *UpdateProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResourceResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResourceResponseValidationError is the validation error
// returned by UpdateProjectResourceResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResourceResponseValidationError) ErrorName() string {
	return "UpdateProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResourceResponseValidationError{}

// Validate checks the field values on DeleteProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResourceRequestMultiError, or nil if none found.
func (m *DeleteProjectResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetProjectId()) < 3 {
		err := DeleteProjectResourceRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectResourceRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectResourceRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResourceRequestMultiError) AllErrors() []error { return m }

// DeleteProjectResourceRequestValidationError is the validation error returned
// by DeleteProjectResourceRequest.Validate if the designated constraints
// aren't met.
type DeleteProjectResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResourceRequestValidationError) ErrorName() string {
	return "DeleteProjectResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResourceRequestValidationError{}

// Validate checks the field values on DeleteProjectResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProjectResourceResponseMultiError, or nil if none found.
func (m *DeleteProjectResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResourceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectResourceResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteProjectResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResourceResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResourceResponseValidationError is the validation error
// returned by DeleteProjectResourceResponse.Validate if the designated
// constraints aren't met.
type DeleteProjectResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResourceResponseValidationError) ErrorName() string {
	return "DeleteProjectResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResourceResponseValidationError{}

// Validate checks the field values on CheckResourcePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResourcePermissionRequestMultiError, or nil if none found.
func (m *CheckResourcePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectId

	// no validation rules for ObjectNamespace

	if !_CheckResourcePermissionRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		err := CheckResourcePermissionRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[A-Za-z0-9._-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Resource

	if len(errors) > 0 {
		return CheckResourcePermissionRequestMultiError(errors)
	}

	return nil
}

// CheckResourcePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by CheckResourcePermissionRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckResourcePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcePermissionRequestMultiError) AllErrors() []error { return m }

// CheckResourcePermissionRequestValidationError is the validation error
// returned by CheckResourcePermissionRequest.Validate if the designated
// constraints aren't met.
type CheckResourcePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcePermissionRequestValidationError) ErrorName() string {
	return "CheckResourcePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcePermissionRequestValidationError{}

var _CheckResourcePermissionRequest_Permission_Pattern = regexp.MustCompile("^[A-Za-z0-9._-]+$")

// Validate checks the field values on CheckResourcePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcePermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResourcePermissionResponseMultiError, or nil if none found.
func (m *CheckResourcePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckResourcePermissionResponseMultiError(errors)
	}

	return nil
}

// CheckResourcePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by CheckResourcePermissionResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckResourcePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcePermissionResponseMultiError) AllErrors() []error { return m }

// CheckResourcePermissionResponseValidationError is the validation error
// returned by CheckResourcePermissionResponse.Validate if the designated
// constraints aren't met.
type CheckResourcePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcePermissionResponseValidationError) ErrorName() string {
	return "CheckResourcePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcePermissionResponseValidationError{}

// Validate checks the field values on BatchCheckPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCheckPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCheckPermissionRequestMultiError, or nil if none found.
func (m *BatchCheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetBodies()); l < 1 || l > 20 {
		err := BatchCheckPermissionRequestValidationError{
			field:  "Bodies",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCheckPermissionRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCheckPermissionRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCheckPermissionRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCheckPermissionRequestMultiError(errors)
	}

	return nil
}

// BatchCheckPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by BatchCheckPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchCheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCheckPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCheckPermissionRequestMultiError) AllErrors() []error { return m }

// BatchCheckPermissionRequestValidationError is the validation error returned
// by BatchCheckPermissionRequest.Validate if the designated constraints
// aren't met.
type BatchCheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCheckPermissionRequestValidationError) ErrorName() string {
	return "BatchCheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCheckPermissionRequestValidationError{}

// Validate checks the field values on BatchCheckPermissionBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCheckPermissionBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCheckPermissionBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCheckPermissionBodyMultiError, or nil if none found.
func (m *BatchCheckPermissionBody) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCheckPermissionBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_BatchCheckPermissionBody_Permission_Pattern.MatchString(m.GetPermission()) {
		err := BatchCheckPermissionBodyValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[A-Za-z0-9._-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Resource

	if len(errors) > 0 {
		return BatchCheckPermissionBodyMultiError(errors)
	}

	return nil
}

// BatchCheckPermissionBodyMultiError is an error wrapping multiple validation
// errors returned by BatchCheckPermissionBody.ValidateAll() if the designated
// constraints aren't met.
type BatchCheckPermissionBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCheckPermissionBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCheckPermissionBodyMultiError) AllErrors() []error { return m }

// BatchCheckPermissionBodyValidationError is the validation error returned by
// BatchCheckPermissionBody.Validate if the designated constraints aren't met.
type BatchCheckPermissionBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCheckPermissionBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCheckPermissionBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCheckPermissionBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCheckPermissionBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCheckPermissionBodyValidationError) ErrorName() string {
	return "BatchCheckPermissionBodyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCheckPermissionBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCheckPermissionBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCheckPermissionBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCheckPermissionBodyValidationError{}

var _BatchCheckPermissionBody_Permission_Pattern = regexp.MustCompile("^[A-Za-z0-9._-]+$")

// Validate checks the field values on BatchCheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCheckPermissionResponseMultiError, or nil if none found.
func (m *BatchCheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCheckPermissionResponseValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCheckPermissionResponseValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCheckPermissionResponseValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCheckPermissionResponseMultiError(errors)
	}

	return nil
}

// BatchCheckPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by BatchCheckPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchCheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCheckPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCheckPermissionResponseMultiError) AllErrors() []error { return m }

// BatchCheckPermissionResponseValidationError is the validation error returned
// by BatchCheckPermissionResponse.Validate if the designated constraints
// aren't met.
type BatchCheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCheckPermissionResponseValidationError) ErrorName() string {
	return "BatchCheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCheckPermissionResponseValidationError{}

// Validate checks the field values on BatchCheckPermissionResponsePair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCheckPermissionResponsePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCheckPermissionResponsePair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchCheckPermissionResponsePairMultiError, or nil if none found.
func (m *BatchCheckPermissionResponsePair) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCheckPermissionResponsePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchCheckPermissionResponsePairValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchCheckPermissionResponsePairValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchCheckPermissionResponsePairValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return BatchCheckPermissionResponsePairMultiError(errors)
	}

	return nil
}

// BatchCheckPermissionResponsePairMultiError is an error wrapping multiple
// validation errors returned by
// BatchCheckPermissionResponsePair.ValidateAll() if the designated
// constraints aren't met.
type BatchCheckPermissionResponsePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCheckPermissionResponsePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCheckPermissionResponsePairMultiError) AllErrors() []error { return m }

// BatchCheckPermissionResponsePairValidationError is the validation error
// returned by BatchCheckPermissionResponsePair.Validate if the designated
// constraints aren't met.
type BatchCheckPermissionResponsePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCheckPermissionResponsePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCheckPermissionResponsePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCheckPermissionResponsePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCheckPermissionResponsePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCheckPermissionResponsePairValidationError) ErrorName() string {
	return "BatchCheckPermissionResponsePairValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCheckPermissionResponsePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCheckPermissionResponsePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCheckPermissionResponsePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCheckPermissionResponsePairValidationError{}

// Validate checks the field values on MetaSchemaRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetaSchemaRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaSchemaRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetaSchemaRequestBodyMultiError, or nil if none found.
func (m *MetaSchemaRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaSchemaRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_MetaSchemaRequestBody_Name_Pattern.MatchString(m.GetName()) {
		err := MetaSchemaRequestBodyValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9-_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSchema()) < 2 {
		err := MetaSchemaRequestBodyValidationError{
			field:  "Schema",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetaSchemaRequestBodyMultiError(errors)
	}

	return nil
}

// MetaSchemaRequestBodyMultiError is an error wrapping multiple validation
// errors returned by MetaSchemaRequestBody.ValidateAll() if the designated
// constraints aren't met.
type MetaSchemaRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaSchemaRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaSchemaRequestBodyMultiError) AllErrors() []error { return m }

// MetaSchemaRequestBodyValidationError is the validation error returned by
// MetaSchemaRequestBody.Validate if the designated constraints aren't met.
type MetaSchemaRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaSchemaRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaSchemaRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaSchemaRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaSchemaRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaSchemaRequestBodyValidationError) ErrorName() string {
	return "MetaSchemaRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e MetaSchemaRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaSchemaRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaSchemaRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaSchemaRequestBodyValidationError{}

var _MetaSchemaRequestBody_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9-_]+$")

// Validate checks the field values on CreateMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetaSchemaRequestMultiError, or nil if none found.
func (m *CreateMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateMetaSchemaRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetaSchemaRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// CreateMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetaSchemaRequestMultiError) AllErrors() []error { return m }

// CreateMetaSchemaRequestValidationError is the validation error returned by
// CreateMetaSchemaRequest.Validate if the designated constraints aren't met.
type CreateMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetaSchemaRequestValidationError) ErrorName() string {
	return "CreateMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetaSchemaRequestValidationError{}

// Validate checks the field values on CreateMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetaSchemaResponseMultiError, or nil if none found.
func (m *CreateMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// CreateMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetaSchemaResponseMultiError) AllErrors() []error { return m }

// CreateMetaSchemaResponseValidationError is the validation error returned by
// CreateMetaSchemaResponse.Validate if the designated constraints aren't met.
type CreateMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetaSchemaResponseValidationError) ErrorName() string {
	return "CreateMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetaSchemaResponseValidationError{}

// Validate checks the field values on GetMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetaSchemaRequestMultiError, or nil if none found.
func (m *GetMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// GetMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by GetMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetaSchemaRequestMultiError) AllErrors() []error { return m }

// GetMetaSchemaRequestValidationError is the validation error returned by
// GetMetaSchemaRequest.Validate if the designated constraints aren't met.
type GetMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetaSchemaRequestValidationError) ErrorName() string {
	return "GetMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetaSchemaRequestValidationError{}

// Validate checks the field values on GetMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetaSchemaResponseMultiError, or nil if none found.
func (m *GetMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// GetMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetaSchemaResponseMultiError) AllErrors() []error { return m }

// GetMetaSchemaResponseValidationError is the validation error returned by
// GetMetaSchemaResponse.Validate if the designated constraints aren't met.
type GetMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetaSchemaResponseValidationError) ErrorName() string {
	return "GetMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetaSchemaResponseValidationError{}

// Validate checks the field values on UpdateMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetaSchemaRequestMultiError, or nil if none found.
func (m *UpdateMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetBody() == nil {
		err := UpdateMetaSchemaRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetaSchemaRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetaSchemaRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// UpdateMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetaSchemaRequestMultiError) AllErrors() []error { return m }

// UpdateMetaSchemaRequestValidationError is the validation error returned by
// UpdateMetaSchemaRequest.Validate if the designated constraints aren't met.
type UpdateMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetaSchemaRequestValidationError) ErrorName() string {
	return "UpdateMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetaSchemaRequestValidationError{}

// Validate checks the field values on UpdateMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetaSchemaResponseMultiError, or nil if none found.
func (m *UpdateMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetaschema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetaSchemaResponseValidationError{
					field:  "Metaschema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetaschema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetaSchemaResponseValidationError{
				field:  "Metaschema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// UpdateMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetaSchemaResponseMultiError) AllErrors() []error { return m }

// UpdateMetaSchemaResponseValidationError is the validation error returned by
// UpdateMetaSchemaResponse.Validate if the designated constraints aren't met.
type UpdateMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetaSchemaResponseValidationError) ErrorName() string {
	return "UpdateMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetaSchemaResponseValidationError{}

// Validate checks the field values on DeleteMetaSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetaSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetaSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetaSchemaRequestMultiError, or nil if none found.
func (m *DeleteMetaSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetaSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMetaSchemaRequestMultiError(errors)
	}

	return nil
}

// DeleteMetaSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMetaSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetaSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetaSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetaSchemaRequestMultiError) AllErrors() []error { return m }

// DeleteMetaSchemaRequestValidationError is the validation error returned by
// DeleteMetaSchemaRequest.Validate if the designated constraints aren't met.
type DeleteMetaSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetaSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetaSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetaSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetaSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetaSchemaRequestValidationError) ErrorName() string {
	return "DeleteMetaSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetaSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetaSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetaSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetaSchemaRequestValidationError{}

// Validate checks the field values on DeleteMetaSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetaSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetaSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetaSchemaResponseMultiError, or nil if none found.
func (m *DeleteMetaSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetaSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMetaSchemaResponseMultiError(errors)
	}

	return nil
}

// DeleteMetaSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMetaSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetaSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetaSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetaSchemaResponseMultiError) AllErrors() []error { return m }

// DeleteMetaSchemaResponseValidationError is the validation error returned by
// DeleteMetaSchemaResponse.Validate if the designated constraints aren't met.
type DeleteMetaSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetaSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetaSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetaSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetaSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetaSchemaResponseValidationError) ErrorName() string {
	return "DeleteMetaSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetaSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetaSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetaSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetaSchemaResponseValidationError{}

// Validate checks the field values on ListMetaSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetaSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetaSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetaSchemasRequestMultiError, or nil if none found.
func (m *ListMetaSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetaSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMetaSchemasRequestMultiError(errors)
	}

	return nil
}

// ListMetaSchemasRequestMultiError is an error wrapping multiple validation
// errors returned by ListMetaSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMetaSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetaSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetaSchemasRequestMultiError) AllErrors() []error { return m }

// ListMetaSchemasRequestValidationError is the validation error returned by
// ListMetaSchemasRequest.Validate if the designated constraints aren't met.
type ListMetaSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaSchemasRequestValidationError) ErrorName() string {
	return "ListMetaSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetaSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetaSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaSchemasRequestValidationError{}

// Validate checks the field values on ListMetaSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetaSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetaSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetaSchemasResponseMultiError, or nil if none found.
func (m *ListMetaSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetaSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetaschemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMetaSchemasResponseValidationError{
						field:  fmt.Sprintf("Metaschemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMetaSchemasResponseValidationError{
						field:  fmt.Sprintf("Metaschemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetaSchemasResponseValidationError{
					field:  fmt.Sprintf("Metaschemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMetaSchemasResponseMultiError(errors)
	}

	return nil
}

// ListMetaSchemasResponseMultiError is an error wrapping multiple validation
// errors returned by ListMetaSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMetaSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetaSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetaSchemasResponseMultiError) AllErrors() []error { return m }

// ListMetaSchemasResponseValidationError is the validation error returned by
// ListMetaSchemasResponse.Validate if the designated constraints aren't met.
type ListMetaSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaSchemasResponseValidationError) ErrorName() string {
	return "ListMetaSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetaSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetaSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaSchemasResponseValidationError{}

// Validate checks the field values on ListOrganizationAuditLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationAuditLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAuditLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationAuditLogsRequestMultiError, or nil if none found.
func (m *ListOrganizationAuditLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAuditLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := ListOrganizationAuditLogsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Source

	// no validation rules for Action

	// no validation rules for IgnoreSystem

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOrganizationAuditLogsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOrganizationAuditLogsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrganizationAuditLogsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOrganizationAuditLogsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOrganizationAuditLogsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrganizationAuditLogsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListOrganizationAuditLogsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationAuditLogsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationAuditLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationAuditLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAuditLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAuditLogsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationAuditLogsRequestValidationError is the validation error
// returned by ListOrganizationAuditLogsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAuditLogsRequestValidationError) ErrorName() string {
	return "ListOrganizationAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAuditLogsRequestValidationError{}

// Validate checks the field values on ListOrganizationAuditLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationAuditLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationAuditLogsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationAuditLogsResponseMultiError, or nil if none found.
func (m *ListOrganizationAuditLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationAuditLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationAuditLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationAuditLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationAuditLogsResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationAuditLogsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationAuditLogsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationAuditLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationAuditLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationAuditLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationAuditLogsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationAuditLogsResponseValidationError is the validation error
// returned by ListOrganizationAuditLogsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationAuditLogsResponseValidationError) ErrorName() string {
	return "ListOrganizationAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationAuditLogsResponseValidationError{}

// Validate checks the field values on CreateOrganizationAuditLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationAuditLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationAuditLogsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationAuditLogsRequestMultiError, or nil if none found.
func (m *CreateOrganizationAuditLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationAuditLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := CreateOrganizationAuditLogsRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetLogs()) < 1 {
		err := CreateOrganizationAuditLogsRequestValidationError{
			field:  "Logs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrganizationAuditLogsRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrganizationAuditLogsRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrganizationAuditLogsRequestValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrganizationAuditLogsRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationAuditLogsRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationAuditLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationAuditLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationAuditLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationAuditLogsRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationAuditLogsRequestValidationError is the validation error
// returned by CreateOrganizationAuditLogsRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationAuditLogsRequestValidationError) ErrorName() string {
	return "CreateOrganizationAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationAuditLogsRequestValidationError{}

// Validate checks the field values on CreateOrganizationAuditLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationAuditLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationAuditLogsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationAuditLogsResponseMultiError, or nil if none found.
func (m *CreateOrganizationAuditLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationAuditLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrganizationAuditLogsResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationAuditLogsResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationAuditLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationAuditLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationAuditLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationAuditLogsResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationAuditLogsResponseValidationError is the validation error
// returned by CreateOrganizationAuditLogsResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationAuditLogsResponseValidationError) ErrorName() string {
	return "CreateOrganizationAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationAuditLogsResponseValidationError{}

// Validate checks the field values on GetOrganizationAuditLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationAuditLogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationAuditLogRequestMultiError, or nil if none found.
func (m *GetOrganizationAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgId()) < 3 {
		err := GetOrganizationAuditLogRequestValidationError{
			field:  "OrgId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := GetOrganizationAuditLogRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationAuditLogRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationAuditLogRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationAuditLogRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationAuditLogRequestMultiError) AllErrors() []error { return m }

// GetOrganizationAuditLogRequestValidationError is the validation error
// returned by GetOrganizationAuditLogRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationAuditLogRequestValidationError) ErrorName() string {
	return "GetOrganizationAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationAuditLogRequestValidationError{}

// Validate checks the field values on GetOrganizationAuditLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationAuditLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationAuditLogResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationAuditLogResponseMultiError, or nil if none found.
func (m *GetOrganizationAuditLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationAuditLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationAuditLogResponseValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationAuditLogResponseValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationAuditLogResponseValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationAuditLogResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationAuditLogResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationAuditLogResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationAuditLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationAuditLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationAuditLogResponseMultiError) AllErrors() []error { return m }

// GetOrganizationAuditLogResponseValidationError is the validation error
// returned by GetOrganizationAuditLogResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationAuditLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationAuditLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationAuditLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationAuditLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationAuditLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationAuditLogResponseValidationError) ErrorName() string {
	return "GetOrganizationAuditLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationAuditLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationAuditLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationAuditLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationAuditLogResponseValidationError{}

// Validate checks the field values on DescribePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePreferencesRequestMultiError, or nil if none found.
func (m *DescribePreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribePreferencesRequestMultiError(errors)
	}

	return nil
}

// DescribePreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by DescribePreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribePreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePreferencesRequestMultiError) AllErrors() []error { return m }

// DescribePreferencesRequestValidationError is the validation error returned
// by DescribePreferencesRequest.Validate if the designated constraints aren't met.
type DescribePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePreferencesRequestValidationError) ErrorName() string {
	return "DescribePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePreferencesRequestValidationError{}

// Validate checks the field values on DescribePreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePreferencesResponseMultiError, or nil if none found.
func (m *DescribePreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTraits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePreferencesResponseValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePreferencesResponseValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePreferencesResponseValidationError{
					field:  fmt.Sprintf("Traits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePreferencesResponseMultiError(errors)
	}

	return nil
}

// DescribePreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by DescribePreferencesResponse.ValidateAll() if
// the designated constraints aren't met.
type DescribePreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePreferencesResponseMultiError) AllErrors() []error { return m }

// DescribePreferencesResponseValidationError is the validation error returned
// by DescribePreferencesResponse.Validate if the designated constraints
// aren't met.
type DescribePreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePreferencesResponseValidationError) ErrorName() string {
	return "DescribePreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePreferencesResponseValidationError{}

// Validate checks the field values on CreateOrganizationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrganizationPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationPreferencesRequestMultiError, or nil if none found.
func (m *CreateOrganizationPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := CreateOrganizationPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBodies()) < 1 {
		err := CreateOrganizationPreferencesRequestValidationError{
			field:  "Bodies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrganizationPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrganizationPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrganizationPreferencesRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrganizationPreferencesRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPreferencesRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationPreferencesRequestValidationError is the validation error
// returned by CreateOrganizationPreferencesRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPreferencesRequestValidationError) ErrorName() string {
	return "CreateOrganizationPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPreferencesRequestValidationError{}

// Validate checks the field values on CreateOrganizationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrganizationPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationPreferencesResponseMultiError, or nil if none found.
func (m *CreateOrganizationPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrganizationPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrganizationPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrganizationPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrganizationPreferencesResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationPreferencesResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrganizationPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPreferencesResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationPreferencesResponseValidationError is the validation error
// returned by CreateOrganizationPreferencesResponse.Validate if the
// designated constraints aren't met.
type CreateOrganizationPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPreferencesResponseValidationError) ErrorName() string {
	return "CreateOrganizationPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPreferencesResponseValidationError{}

// Validate checks the field values on ListOrganizationPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationPreferencesRequestMultiError, or nil if none found.
func (m *ListOrganizationPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListOrganizationPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPreferencesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationPreferencesRequestValidationError is the validation error
// returned by ListOrganizationPreferencesRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPreferencesRequestValidationError) ErrorName() string {
	return "ListOrganizationPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPreferencesRequestValidationError{}

// Validate checks the field values on ListOrganizationPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationPreferencesResponseMultiError, or nil if none found.
func (m *ListOrganizationPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPreferencesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationPreferencesResponseValidationError is the validation error
// returned by ListOrganizationPreferencesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPreferencesResponseValidationError) ErrorName() string {
	return "ListOrganizationPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPreferencesResponseValidationError{}

// Validate checks the field values on CreateProjectPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProjectPreferencesRequestMultiError, or nil if none found.
func (m *CreateProjectPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := CreateProjectPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBodies()) < 1 {
		err := CreateProjectPreferencesRequestValidationError{
			field:  "Bodies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProjectPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProjectPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProjectPreferencesRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateProjectPreferencesRequestMultiError(errors)
	}

	return nil
}

// CreateProjectPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectPreferencesRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateProjectPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPreferencesRequestMultiError) AllErrors() []error { return m }

// CreateProjectPreferencesRequestValidationError is the validation error
// returned by CreateProjectPreferencesRequest.Validate if the designated
// constraints aren't met.
type CreateProjectPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPreferencesRequestValidationError) ErrorName() string {
	return "CreateProjectPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPreferencesRequestValidationError{}

// Validate checks the field values on CreateProjectPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateProjectPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProjectPreferencesResponseMultiError, or nil if none found.
func (m *CreateProjectPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProjectPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProjectPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProjectPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateProjectPreferencesResponseMultiError(errors)
	}

	return nil
}

// CreateProjectPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateProjectPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPreferencesResponseMultiError) AllErrors() []error { return m }

// CreateProjectPreferencesResponseValidationError is the validation error
// returned by CreateProjectPreferencesResponse.Validate if the designated
// constraints aren't met.
type CreateProjectPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPreferencesResponseValidationError) ErrorName() string {
	return "CreateProjectPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPreferencesResponseValidationError{}

// Validate checks the field values on ListProjectPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectPreferencesRequestMultiError, or nil if none found.
func (m *ListProjectPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListProjectPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListProjectPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by ListProjectPreferencesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProjectPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectPreferencesRequestMultiError) AllErrors() []error { return m }

// ListProjectPreferencesRequestValidationError is the validation error
// returned by ListProjectPreferencesRequest.Validate if the designated
// constraints aren't met.
type ListProjectPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectPreferencesRequestValidationError) ErrorName() string {
	return "ListProjectPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectPreferencesRequestValidationError{}

// Validate checks the field values on ListProjectPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProjectPreferencesResponseMultiError, or nil if none found.
func (m *ListProjectPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListProjectPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectPreferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProjectPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectPreferencesResponseMultiError) AllErrors() []error { return m }

// ListProjectPreferencesResponseValidationError is the validation error
// returned by ListProjectPreferencesResponse.Validate if the designated
// constraints aren't met.
type ListProjectPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectPreferencesResponseValidationError) ErrorName() string {
	return "ListProjectPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectPreferencesResponseValidationError{}

// Validate checks the field values on CreateGroupPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGroupPreferencesRequestMultiError, or nil if none found.
func (m *CreateGroupPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := CreateGroupPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBodies()) < 1 {
		err := CreateGroupPreferencesRequestValidationError{
			field:  "Bodies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateGroupPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateGroupPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateGroupPreferencesRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateGroupPreferencesRequestMultiError(errors)
	}

	return nil
}

// CreateGroupPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by CreateGroupPreferencesRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateGroupPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupPreferencesRequestMultiError) AllErrors() []error { return m }

// CreateGroupPreferencesRequestValidationError is the validation error
// returned by CreateGroupPreferencesRequest.Validate if the designated
// constraints aren't met.
type CreateGroupPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupPreferencesRequestValidationError) ErrorName() string {
	return "CreateGroupPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupPreferencesRequestValidationError{}

// Validate checks the field values on CreateGroupPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGroupPreferencesResponseMultiError, or nil if none found.
func (m *CreateGroupPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateGroupPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateGroupPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateGroupPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateGroupPreferencesResponseMultiError(errors)
	}

	return nil
}

// CreateGroupPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by CreateGroupPreferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateGroupPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupPreferencesResponseMultiError) AllErrors() []error { return m }

// CreateGroupPreferencesResponseValidationError is the validation error
// returned by CreateGroupPreferencesResponse.Validate if the designated
// constraints aren't met.
type CreateGroupPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupPreferencesResponseValidationError) ErrorName() string {
	return "CreateGroupPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupPreferencesResponseValidationError{}

// Validate checks the field values on ListGroupPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupPreferencesRequestMultiError, or nil if none found.
func (m *ListGroupPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListGroupPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGroupPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListGroupPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by ListGroupPreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGroupPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupPreferencesRequestMultiError) AllErrors() []error { return m }

// ListGroupPreferencesRequestValidationError is the validation error returned
// by ListGroupPreferencesRequest.Validate if the designated constraints
// aren't met.
type ListGroupPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupPreferencesRequestValidationError) ErrorName() string {
	return "ListGroupPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupPreferencesRequestValidationError{}

// Validate checks the field values on ListGroupPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupPreferencesResponseMultiError, or nil if none found.
func (m *ListGroupPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListGroupPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by ListGroupPreferencesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGroupPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupPreferencesResponseMultiError) AllErrors() []error { return m }

// ListGroupPreferencesResponseValidationError is the validation error returned
// by ListGroupPreferencesResponse.Validate if the designated constraints
// aren't met.
type ListGroupPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupPreferencesResponseValidationError) ErrorName() string {
	return "ListGroupPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupPreferencesResponseValidationError{}

// Validate checks the field values on CreateUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPreferencesRequestMultiError, or nil if none found.
func (m *CreateUserPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := CreateUserPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBodies()) < 1 {
		err := CreateUserPreferencesRequestValidationError{
			field:  "Bodies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserPreferencesRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUserPreferencesRequestMultiError(errors)
	}

	return nil
}

// CreateUserPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserPreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPreferencesRequestMultiError) AllErrors() []error { return m }

// CreateUserPreferencesRequestValidationError is the validation error returned
// by CreateUserPreferencesRequest.Validate if the designated constraints
// aren't met.
type CreateUserPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPreferencesRequestValidationError) ErrorName() string {
	return "CreateUserPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPreferencesRequestValidationError{}

// Validate checks the field values on CreateUserPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateUserPreferencesResponseMultiError, or nil if none found.
func (m *CreateUserPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUserPreferencesResponseMultiError(errors)
	}

	return nil
}

// CreateUserPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by CreateUserPreferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateUserPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPreferencesResponseMultiError) AllErrors() []error { return m }

// CreateUserPreferencesResponseValidationError is the validation error
// returned by CreateUserPreferencesResponse.Validate if the designated
// constraints aren't met.
type CreateUserPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPreferencesResponseValidationError) ErrorName() string {
	return "CreateUserPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPreferencesResponseValidationError{}

// Validate checks the field values on ListUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPreferencesRequestMultiError, or nil if none found.
func (m *ListUserPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 3 {
		err := ListUserPreferencesRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListUserPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserPreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPreferencesRequestMultiError) AllErrors() []error { return m }

// ListUserPreferencesRequestValidationError is the validation error returned
// by ListUserPreferencesRequest.Validate if the designated constraints aren't met.
type ListUserPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPreferencesRequestValidationError) ErrorName() string {
	return "ListUserPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPreferencesRequestValidationError{}

// Validate checks the field values on ListUserPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPreferencesResponseMultiError, or nil if none found.
func (m *ListUserPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListUserPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserPreferencesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPreferencesResponseMultiError) AllErrors() []error { return m }

// ListUserPreferencesResponseValidationError is the validation error returned
// by ListUserPreferencesResponse.Validate if the designated constraints
// aren't met.
type ListUserPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPreferencesResponseValidationError) ErrorName() string {
	return "ListUserPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPreferencesResponseValidationError{}

// Validate checks the field values on CreateCurrentUserPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCurrentUserPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCurrentUserPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCurrentUserPreferencesRequestMultiError, or nil if none found.
func (m *CreateCurrentUserPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCurrentUserPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetBodies()) < 1 {
		err := CreateCurrentUserPreferencesRequestValidationError{
			field:  "Bodies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBodies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCurrentUserPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCurrentUserPreferencesRequestValidationError{
						field:  fmt.Sprintf("Bodies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCurrentUserPreferencesRequestValidationError{
					field:  fmt.Sprintf("Bodies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCurrentUserPreferencesRequestMultiError(errors)
	}

	return nil
}

// CreateCurrentUserPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCurrentUserPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCurrentUserPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCurrentUserPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCurrentUserPreferencesRequestMultiError) AllErrors() []error { return m }

// CreateCurrentUserPreferencesRequestValidationError is the validation error
// returned by CreateCurrentUserPreferencesRequest.Validate if the designated
// constraints aren't met.
type CreateCurrentUserPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCurrentUserPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCurrentUserPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCurrentUserPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCurrentUserPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCurrentUserPreferencesRequestValidationError) ErrorName() string {
	return "CreateCurrentUserPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCurrentUserPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCurrentUserPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCurrentUserPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCurrentUserPreferencesRequestValidationError{}

// Validate checks the field values on CreateCurrentUserPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateCurrentUserPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCurrentUserPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCurrentUserPreferencesResponseMultiError, or nil if none found.
func (m *CreateCurrentUserPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCurrentUserPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCurrentUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCurrentUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCurrentUserPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCurrentUserPreferencesResponseMultiError(errors)
	}

	return nil
}

// CreateCurrentUserPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCurrentUserPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCurrentUserPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCurrentUserPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCurrentUserPreferencesResponseMultiError) AllErrors() []error { return m }

// CreateCurrentUserPreferencesResponseValidationError is the validation error
// returned by CreateCurrentUserPreferencesResponse.Validate if the designated
// constraints aren't met.
type CreateCurrentUserPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCurrentUserPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCurrentUserPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCurrentUserPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCurrentUserPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCurrentUserPreferencesResponseValidationError) ErrorName() string {
	return "CreateCurrentUserPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCurrentUserPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCurrentUserPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCurrentUserPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCurrentUserPreferencesResponseValidationError{}

// Validate checks the field values on ListCurrentUserPreferencesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCurrentUserPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserPreferencesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCurrentUserPreferencesRequestMultiError, or nil if none found.
func (m *ListCurrentUserPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrentUserPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListCurrentUserPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCurrentUserPreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentUserPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserPreferencesRequestMultiError) AllErrors() []error { return m }

// ListCurrentUserPreferencesRequestValidationError is the validation error
// returned by ListCurrentUserPreferencesRequest.Validate if the designated
// constraints aren't met.
type ListCurrentUserPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserPreferencesRequestValidationError) ErrorName() string {
	return "ListCurrentUserPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserPreferencesRequestValidationError{}

// Validate checks the field values on ListCurrentUserPreferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCurrentUserPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrentUserPreferencesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCurrentUserPreferencesResponseMultiError, or nil if none found.
func (m *ListCurrentUserPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCurrentUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCurrentUserPreferencesResponseValidationError{
						field:  fmt.Sprintf("Preferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCurrentUserPreferencesResponseValidationError{
					field:  fmt.Sprintf("Preferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCurrentUserPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListCurrentUserPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCurrentUserPreferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentUserPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserPreferencesResponseMultiError) AllErrors() []error { return m }

// ListCurrentUserPreferencesResponseValidationError is the validation error
// returned by ListCurrentUserPreferencesResponse.Validate if the designated
// constraints aren't met.
type ListCurrentUserPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserPreferencesResponseValidationError) ErrorName() string {
	return "ListCurrentUserPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserPreferencesResponseValidationError{}

// Validate checks the field values on BillingWebhookCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingWebhookCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingWebhookCallbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BillingWebhookCallbackRequestMultiError, or nil if none found.
func (m *BillingWebhookCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingWebhookCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProvider()) < 1 {
		err := BillingWebhookCallbackRequestValidationError{
			field:  "Provider",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Body

	if len(errors) > 0 {
		return BillingWebhookCallbackRequestMultiError(errors)
	}

	return nil
}

// BillingWebhookCallbackRequestMultiError is an error wrapping multiple
// validation errors returned by BillingWebhookCallbackRequest.ValidateAll()
// if the designated constraints aren't met.
type BillingWebhookCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingWebhookCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingWebhookCallbackRequestMultiError) AllErrors() []error { return m }

// BillingWebhookCallbackRequestValidationError is the validation error
// returned by BillingWebhookCallbackRequest.Validate if the designated
// constraints aren't met.
type BillingWebhookCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingWebhookCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingWebhookCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingWebhookCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingWebhookCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingWebhookCallbackRequestValidationError) ErrorName() string {
	return "BillingWebhookCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BillingWebhookCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingWebhookCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingWebhookCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingWebhookCallbackRequestValidationError{}

// Validate checks the field values on BillingWebhookCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BillingWebhookCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BillingWebhookCallbackResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BillingWebhookCallbackResponseMultiError, or nil if none found.
func (m *BillingWebhookCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BillingWebhookCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BillingWebhookCallbackResponseMultiError(errors)
	}

	return nil
}

// BillingWebhookCallbackResponseMultiError is an error wrapping multiple
// validation errors returned by BillingWebhookCallbackResponse.ValidateAll()
// if the designated constraints aren't met.
type BillingWebhookCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BillingWebhookCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BillingWebhookCallbackResponseMultiError) AllErrors() []error { return m }

// BillingWebhookCallbackResponseValidationError is the validation error
// returned by BillingWebhookCallbackResponse.Validate if the designated
// constraints aren't met.
type BillingWebhookCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingWebhookCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingWebhookCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingWebhookCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingWebhookCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingWebhookCallbackResponseValidationError) ErrorName() string {
	return "BillingWebhookCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BillingWebhookCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingWebhookCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingWebhookCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingWebhookCallbackResponseValidationError{}

// Validate checks the field values on ChangeSubscriptionRequest_PlanChange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeSubscriptionRequest_PlanChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSubscriptionRequest_PlanChange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeSubscriptionRequest_PlanChangeMultiError, or nil if none found.
func (m *ChangeSubscriptionRequest_PlanChange) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSubscriptionRequest_PlanChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Plan

	// no validation rules for Immediate

	if len(errors) > 0 {
		return ChangeSubscriptionRequest_PlanChangeMultiError(errors)
	}

	return nil
}

// ChangeSubscriptionRequest_PlanChangeMultiError is an error wrapping multiple
// validation errors returned by
// ChangeSubscriptionRequest_PlanChange.ValidateAll() if the designated
// constraints aren't met.
type ChangeSubscriptionRequest_PlanChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSubscriptionRequest_PlanChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSubscriptionRequest_PlanChangeMultiError) AllErrors() []error { return m }

// ChangeSubscriptionRequest_PlanChangeValidationError is the validation error
// returned by ChangeSubscriptionRequest_PlanChange.Validate if the designated
// constraints aren't met.
type ChangeSubscriptionRequest_PlanChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionRequest_PlanChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionRequest_PlanChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionRequest_PlanChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionRequest_PlanChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionRequest_PlanChangeValidationError) ErrorName() string {
	return "ChangeSubscriptionRequest_PlanChangeValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionRequest_PlanChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionRequest_PlanChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionRequest_PlanChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionRequest_PlanChangeValidationError{}

// Validate checks the field values on ChangeSubscriptionRequest_PhaseChange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangeSubscriptionRequest_PhaseChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSubscriptionRequest_PhaseChange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeSubscriptionRequest_PhaseChangeMultiError, or nil if none found.
func (m *ChangeSubscriptionRequest_PhaseChange) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSubscriptionRequest_PhaseChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CancelUpcomingChanges

	if len(errors) > 0 {
		return ChangeSubscriptionRequest_PhaseChangeMultiError(errors)
	}

	return nil
}

// ChangeSubscriptionRequest_PhaseChangeMultiError is an error wrapping
// multiple validation errors returned by
// ChangeSubscriptionRequest_PhaseChange.ValidateAll() if the designated
// constraints aren't met.
type ChangeSubscriptionRequest_PhaseChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSubscriptionRequest_PhaseChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSubscriptionRequest_PhaseChangeMultiError) AllErrors() []error { return m }

// ChangeSubscriptionRequest_PhaseChangeValidationError is the validation error
// returned by ChangeSubscriptionRequest_PhaseChange.Validate if the
// designated constraints aren't met.
type ChangeSubscriptionRequest_PhaseChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) ErrorName() string {
	return "ChangeSubscriptionRequest_PhaseChangeValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionRequest_PhaseChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionRequest_PhaseChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionRequest_PhaseChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionRequest_PhaseChangeValidationError{}

// Validate checks the field values on
// ListProjectsByCurrentUserResponse_AccessPair with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListProjectsByCurrentUserResponse_AccessPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListProjectsByCurrentUserResponse_AccessPair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListProjectsByCurrentUserResponse_AccessPairMultiError, or nil if none found.
func (m *ListProjectsByCurrentUserResponse_AccessPair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByCurrentUserResponse_AccessPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ListProjectsByCurrentUserResponse_AccessPairMultiError(errors)
	}

	return nil
}

// ListProjectsByCurrentUserResponse_AccessPairMultiError is an error wrapping
// multiple validation errors returned by
// ListProjectsByCurrentUserResponse_AccessPair.ValidateAll() if the
// designated constraints aren't met.
type ListProjectsByCurrentUserResponse_AccessPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByCurrentUserResponse_AccessPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByCurrentUserResponse_AccessPairMultiError) AllErrors() []error { return m }

// ListProjectsByCurrentUserResponse_AccessPairValidationError is the
// validation error returned by
// ListProjectsByCurrentUserResponse_AccessPair.Validate if the designated
// constraints aren't met.
type ListProjectsByCurrentUserResponse_AccessPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) ErrorName() string {
	return "ListProjectsByCurrentUserResponse_AccessPairValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByCurrentUserResponse_AccessPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByCurrentUserResponse_AccessPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByCurrentUserResponse_AccessPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByCurrentUserResponse_AccessPairValidationError{}

// Validate checks the field values on ListCurrentUserGroupsResponse_AccessPair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCurrentUserGroupsResponse_AccessPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCurrentUserGroupsResponse_AccessPair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCurrentUserGroupsResponse_AccessPairMultiError, or nil if none found.
func (m *ListCurrentUserGroupsResponse_AccessPair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrentUserGroupsResponse_AccessPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ListCurrentUserGroupsResponse_AccessPairMultiError(errors)
	}

	return nil
}

// ListCurrentUserGroupsResponse_AccessPairMultiError is an error wrapping
// multiple validation errors returned by
// ListCurrentUserGroupsResponse_AccessPair.ValidateAll() if the designated
// constraints aren't met.
type ListCurrentUserGroupsResponse_AccessPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrentUserGroupsResponse_AccessPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrentUserGroupsResponse_AccessPairMultiError) AllErrors() []error { return m }

// ListCurrentUserGroupsResponse_AccessPairValidationError is the validation
// error returned by ListCurrentUserGroupsResponse_AccessPair.Validate if the
// designated constraints aren't met.
type ListCurrentUserGroupsResponse_AccessPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) ErrorName() string {
	return "ListCurrentUserGroupsResponse_AccessPairValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrentUserGroupsResponse_AccessPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrentUserGroupsResponse_AccessPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrentUserGroupsResponse_AccessPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrentUserGroupsResponse_AccessPairValidationError{}

// Validate checks the field values on
// ListServiceUserProjectsResponse_AccessPair with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListServiceUserProjectsResponse_AccessPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListServiceUserProjectsResponse_AccessPair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListServiceUserProjectsResponse_AccessPairMultiError, or nil if none found.
func (m *ListServiceUserProjectsResponse_AccessPair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUserProjectsResponse_AccessPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return ListServiceUserProjectsResponse_AccessPairMultiError(errors)
	}

	return nil
}

// ListServiceUserProjectsResponse_AccessPairMultiError is an error wrapping
// multiple validation errors returned by
// ListServiceUserProjectsResponse_AccessPair.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUserProjectsResponse_AccessPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUserProjectsResponse_AccessPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUserProjectsResponse_AccessPairMultiError) AllErrors() []error { return m }

// ListServiceUserProjectsResponse_AccessPairValidationError is the validation
// error returned by ListServiceUserProjectsResponse_AccessPair.Validate if
// the designated constraints aren't met.
type ListServiceUserProjectsResponse_AccessPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUserProjectsResponse_AccessPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUserProjectsResponse_AccessPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUserProjectsResponse_AccessPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUserProjectsResponse_AccessPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUserProjectsResponse_AccessPairValidationError) ErrorName() string {
	return "ListServiceUserProjectsResponse_AccessPairValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUserProjectsResponse_AccessPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUserProjectsResponse_AccessPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUserProjectsResponse_AccessPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUserProjectsResponse_AccessPairValidationError{}

// Validate checks the field values on ListOrganizationUsersResponse_RolePair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationUsersResponse_RolePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationUsersResponse_RolePair with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOrganizationUsersResponse_RolePairMultiError, or nil if none found.
func (m *ListOrganizationUsersResponse_RolePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUsersResponse_RolePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationUsersResponse_RolePairValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationUsersResponse_RolePairMultiError(errors)
	}

	return nil
}

// ListOrganizationUsersResponse_RolePairMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationUsersResponse_RolePair.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationUsersResponse_RolePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUsersResponse_RolePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUsersResponse_RolePairMultiError) AllErrors() []error { return m }

// ListOrganizationUsersResponse_RolePairValidationError is the validation
// error returned by ListOrganizationUsersResponse_RolePair.Validate if the
// designated constraints aren't met.
type ListOrganizationUsersResponse_RolePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUsersResponse_RolePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUsersResponse_RolePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUsersResponse_RolePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUsersResponse_RolePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUsersResponse_RolePairValidationError) ErrorName() string {
	return "ListOrganizationUsersResponse_RolePairValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUsersResponse_RolePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUsersResponse_RolePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUsersResponse_RolePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUsersResponse_RolePairValidationError{}

// Validate checks the field values on ListProjectUsersResponse_RolePair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectUsersResponse_RolePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectUsersResponse_RolePair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectUsersResponse_RolePairMultiError, or nil if none found.
func (m *ListProjectUsersResponse_RolePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectUsersResponse_RolePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectUsersResponse_RolePairValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectUsersResponse_RolePairMultiError(errors)
	}

	return nil
}

// ListProjectUsersResponse_RolePairMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectUsersResponse_RolePair.ValidateAll() if the designated
// constraints aren't met.
type ListProjectUsersResponse_RolePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectUsersResponse_RolePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectUsersResponse_RolePairMultiError) AllErrors() []error { return m }

// ListProjectUsersResponse_RolePairValidationError is the validation error
// returned by ListProjectUsersResponse_RolePair.Validate if the designated
// constraints aren't met.
type ListProjectUsersResponse_RolePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectUsersResponse_RolePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectUsersResponse_RolePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectUsersResponse_RolePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectUsersResponse_RolePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectUsersResponse_RolePairValidationError) ErrorName() string {
	return "ListProjectUsersResponse_RolePairValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectUsersResponse_RolePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectUsersResponse_RolePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectUsersResponse_RolePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectUsersResponse_RolePairValidationError{}

// Validate checks the field values on ListProjectServiceUsersResponse_RolePair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProjectServiceUsersResponse_RolePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListProjectServiceUsersResponse_RolePair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListProjectServiceUsersResponse_RolePairMultiError, or nil if none found.
func (m *ListProjectServiceUsersResponse_RolePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectServiceUsersResponse_RolePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceuserId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectServiceUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectServiceUsersResponse_RolePairValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectServiceUsersResponse_RolePairMultiError(errors)
	}

	return nil
}

// ListProjectServiceUsersResponse_RolePairMultiError is an error wrapping
// multiple validation errors returned by
// ListProjectServiceUsersResponse_RolePair.ValidateAll() if the designated
// constraints aren't met.
type ListProjectServiceUsersResponse_RolePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectServiceUsersResponse_RolePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectServiceUsersResponse_RolePairMultiError) AllErrors() []error { return m }

// ListProjectServiceUsersResponse_RolePairValidationError is the validation
// error returned by ListProjectServiceUsersResponse_RolePair.Validate if the
// designated constraints aren't met.
type ListProjectServiceUsersResponse_RolePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectServiceUsersResponse_RolePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectServiceUsersResponse_RolePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectServiceUsersResponse_RolePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectServiceUsersResponse_RolePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectServiceUsersResponse_RolePairValidationError) ErrorName() string {
	return "ListProjectServiceUsersResponse_RolePairValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectServiceUsersResponse_RolePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectServiceUsersResponse_RolePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectServiceUsersResponse_RolePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectServiceUsersResponse_RolePairValidationError{}

// Validate checks the field values on ListProjectGroupsResponse_RolePair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectGroupsResponse_RolePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectGroupsResponse_RolePair
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectGroupsResponse_RolePairMultiError, or nil if none found.
func (m *ListProjectGroupsResponse_RolePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectGroupsResponse_RolePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectGroupsResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectGroupsResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGroupsResponse_RolePairValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectGroupsResponse_RolePairMultiError(errors)
	}

	return nil
}

// ListProjectGroupsResponse_RolePairMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectGroupsResponse_RolePair.ValidateAll() if the designated
// constraints aren't met.
type ListProjectGroupsResponse_RolePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectGroupsResponse_RolePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectGroupsResponse_RolePairMultiError) AllErrors() []error { return m }

// ListProjectGroupsResponse_RolePairValidationError is the validation error
// returned by ListProjectGroupsResponse_RolePair.Validate if the designated
// constraints aren't met.
type ListProjectGroupsResponse_RolePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGroupsResponse_RolePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGroupsResponse_RolePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGroupsResponse_RolePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGroupsResponse_RolePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGroupsResponse_RolePairValidationError) ErrorName() string {
	return "ListProjectGroupsResponse_RolePairValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGroupsResponse_RolePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGroupsResponse_RolePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGroupsResponse_RolePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGroupsResponse_RolePairValidationError{}

// Validate checks the field values on ListGroupUsersResponse_RolePair with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersResponse_RolePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersResponse_RolePair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGroupUsersResponse_RolePairMultiError, or nil if none found.
func (m *ListGroupUsersResponse_RolePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersResponse_RolePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupUsersResponse_RolePairValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupUsersResponse_RolePairValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupUsersResponse_RolePairMultiError(errors)
	}

	return nil
}

// ListGroupUsersResponse_RolePairMultiError is an error wrapping multiple
// validation errors returned by ListGroupUsersResponse_RolePair.ValidateAll()
// if the designated constraints aren't met.
type ListGroupUsersResponse_RolePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersResponse_RolePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersResponse_RolePairMultiError) AllErrors() []error { return m }

// ListGroupUsersResponse_RolePairValidationError is the validation error
// returned by ListGroupUsersResponse_RolePair.Validate if the designated
// constraints aren't met.
type ListGroupUsersResponse_RolePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersResponse_RolePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersResponse_RolePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersResponse_RolePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersResponse_RolePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersResponse_RolePairValidationError) ErrorName() string {
	return "ListGroupUsersResponse_RolePairValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersResponse_RolePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersResponse_RolePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersResponse_RolePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersResponse_RolePairValidationError{}
