// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raystack/frontier/v1beta1/admin.proto

package frontierv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/raystack/frontier/proto/v1beta1"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "raystack.frontier.v1beta1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceListAllUsersProcedure is the fully-qualified name of the AdminService's ListAllUsers
	// RPC.
	AdminServiceListAllUsersProcedure = "/raystack.frontier.v1beta1.AdminService/ListAllUsers"
	// AdminServiceListGroupsProcedure is the fully-qualified name of the AdminService's ListGroups RPC.
	AdminServiceListGroupsProcedure = "/raystack.frontier.v1beta1.AdminService/ListGroups"
	// AdminServiceListAllOrganizationsProcedure is the fully-qualified name of the AdminService's
	// ListAllOrganizations RPC.
	AdminServiceListAllOrganizationsProcedure = "/raystack.frontier.v1beta1.AdminService/ListAllOrganizations"
	// AdminServiceAdminCreateOrganizationProcedure is the fully-qualified name of the AdminService's
	// AdminCreateOrganization RPC.
	AdminServiceAdminCreateOrganizationProcedure = "/raystack.frontier.v1beta1.AdminService/AdminCreateOrganization"
	// AdminServiceSearchOrganizationsProcedure is the fully-qualified name of the AdminService's
	// SearchOrganizations RPC.
	AdminServiceSearchOrganizationsProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizations"
	// AdminServiceSearchOrganizationUsersProcedure is the fully-qualified name of the AdminService's
	// SearchOrganizationUsers RPC.
	AdminServiceSearchOrganizationUsersProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizationUsers"
	// AdminServiceSearchProjectUsersProcedure is the fully-qualified name of the AdminService's
	// SearchProjectUsers RPC.
	AdminServiceSearchProjectUsersProcedure = "/raystack.frontier.v1beta1.AdminService/SearchProjectUsers"
	// AdminServiceSearchOrganizationProjectsProcedure is the fully-qualified name of the AdminService's
	// SearchOrganizationProjects RPC.
	AdminServiceSearchOrganizationProjectsProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizationProjects"
	// AdminServiceSearchOrganizationInvoicesProcedure is the fully-qualified name of the AdminService's
	// SearchOrganizationInvoices RPC.
	AdminServiceSearchOrganizationInvoicesProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizationInvoices"
	// AdminServiceSearchOrganizationTokensProcedure is the fully-qualified name of the AdminService's
	// SearchOrganizationTokens RPC.
	AdminServiceSearchOrganizationTokensProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizationTokens"
	// AdminServiceSearchOrganizationServiceUserCredentialsProcedure is the fully-qualified name of the
	// AdminService's SearchOrganizationServiceUserCredentials RPC.
	AdminServiceSearchOrganizationServiceUserCredentialsProcedure = "/raystack.frontier.v1beta1.AdminService/SearchOrganizationServiceUserCredentials"
	// AdminServiceExportOrganizationsProcedure is the fully-qualified name of the AdminService's
	// ExportOrganizations RPC.
	AdminServiceExportOrganizationsProcedure = "/raystack.frontier.v1beta1.AdminService/ExportOrganizations"
	// AdminServiceExportOrganizationUsersProcedure is the fully-qualified name of the AdminService's
	// ExportOrganizationUsers RPC.
	AdminServiceExportOrganizationUsersProcedure = "/raystack.frontier.v1beta1.AdminService/ExportOrganizationUsers"
	// AdminServiceExportOrganizationProjectsProcedure is the fully-qualified name of the AdminService's
	// ExportOrganizationProjects RPC.
	AdminServiceExportOrganizationProjectsProcedure = "/raystack.frontier.v1beta1.AdminService/ExportOrganizationProjects"
	// AdminServiceExportOrganizationTokensProcedure is the fully-qualified name of the AdminService's
	// ExportOrganizationTokens RPC.
	AdminServiceExportOrganizationTokensProcedure = "/raystack.frontier.v1beta1.AdminService/ExportOrganizationTokens"
	// AdminServiceExportUsersProcedure is the fully-qualified name of the AdminService's ExportUsers
	// RPC.
	AdminServiceExportUsersProcedure = "/raystack.frontier.v1beta1.AdminService/ExportUsers"
	// AdminServiceSearchUsersProcedure is the fully-qualified name of the AdminService's SearchUsers
	// RPC.
	AdminServiceSearchUsersProcedure = "/raystack.frontier.v1beta1.AdminService/SearchUsers"
	// AdminServiceSearchUserOrganizationsProcedure is the fully-qualified name of the AdminService's
	// SearchUserOrganizations RPC.
	AdminServiceSearchUserOrganizationsProcedure = "/raystack.frontier.v1beta1.AdminService/SearchUserOrganizations"
	// AdminServiceSearchUserProjectsProcedure is the fully-qualified name of the AdminService's
	// SearchUserProjects RPC.
	AdminServiceSearchUserProjectsProcedure = "/raystack.frontier.v1beta1.AdminService/SearchUserProjects"
	// AdminServiceSetOrganizationKycProcedure is the fully-qualified name of the AdminService's
	// SetOrganizationKyc RPC.
	AdminServiceSetOrganizationKycProcedure = "/raystack.frontier.v1beta1.AdminService/SetOrganizationKyc"
	// AdminServiceListOrganizationsKycProcedure is the fully-qualified name of the AdminService's
	// ListOrganizationsKyc RPC.
	AdminServiceListOrganizationsKycProcedure = "/raystack.frontier.v1beta1.AdminService/ListOrganizationsKyc"
	// AdminServiceListProjectsProcedure is the fully-qualified name of the AdminService's ListProjects
	// RPC.
	AdminServiceListProjectsProcedure = "/raystack.frontier.v1beta1.AdminService/ListProjects"
	// AdminServiceListRelationsProcedure is the fully-qualified name of the AdminService's
	// ListRelations RPC.
	AdminServiceListRelationsProcedure = "/raystack.frontier.v1beta1.AdminService/ListRelations"
	// AdminServiceListResourcesProcedure is the fully-qualified name of the AdminService's
	// ListResources RPC.
	AdminServiceListResourcesProcedure = "/raystack.frontier.v1beta1.AdminService/ListResources"
	// AdminServiceCreateRoleProcedure is the fully-qualified name of the AdminService's CreateRole RPC.
	AdminServiceCreateRoleProcedure = "/raystack.frontier.v1beta1.AdminService/CreateRole"
	// AdminServiceUpdateRoleProcedure is the fully-qualified name of the AdminService's UpdateRole RPC.
	AdminServiceUpdateRoleProcedure = "/raystack.frontier.v1beta1.AdminService/UpdateRole"
	// AdminServiceDeleteRoleProcedure is the fully-qualified name of the AdminService's DeleteRole RPC.
	AdminServiceDeleteRoleProcedure = "/raystack.frontier.v1beta1.AdminService/DeleteRole"
	// AdminServiceCreatePermissionProcedure is the fully-qualified name of the AdminService's
	// CreatePermission RPC.
	AdminServiceCreatePermissionProcedure = "/raystack.frontier.v1beta1.AdminService/CreatePermission"
	// AdminServiceUpdatePermissionProcedure is the fully-qualified name of the AdminService's
	// UpdatePermission RPC.
	AdminServiceUpdatePermissionProcedure = "/raystack.frontier.v1beta1.AdminService/UpdatePermission"
	// AdminServiceDeletePermissionProcedure is the fully-qualified name of the AdminService's
	// DeletePermission RPC.
	AdminServiceDeletePermissionProcedure = "/raystack.frontier.v1beta1.AdminService/DeletePermission"
	// AdminServiceListPreferencesProcedure is the fully-qualified name of the AdminService's
	// ListPreferences RPC.
	AdminServiceListPreferencesProcedure = "/raystack.frontier.v1beta1.AdminService/ListPreferences"
	// AdminServiceCreatePreferencesProcedure is the fully-qualified name of the AdminService's
	// CreatePreferences RPC.
	AdminServiceCreatePreferencesProcedure = "/raystack.frontier.v1beta1.AdminService/CreatePreferences"
	// AdminServiceCheckFederatedResourcePermissionProcedure is the fully-qualified name of the
	// AdminService's CheckFederatedResourcePermission RPC.
	AdminServiceCheckFederatedResourcePermissionProcedure = "/raystack.frontier.v1beta1.AdminService/CheckFederatedResourcePermission"
	// AdminServiceAddPlatformUserProcedure is the fully-qualified name of the AdminService's
	// AddPlatformUser RPC.
	AdminServiceAddPlatformUserProcedure = "/raystack.frontier.v1beta1.AdminService/AddPlatformUser"
	// AdminServiceListPlatformUsersProcedure is the fully-qualified name of the AdminService's
	// ListPlatformUsers RPC.
	AdminServiceListPlatformUsersProcedure = "/raystack.frontier.v1beta1.AdminService/ListPlatformUsers"
	// AdminServiceRemovePlatformUserProcedure is the fully-qualified name of the AdminService's
	// RemovePlatformUser RPC.
	AdminServiceRemovePlatformUserProcedure = "/raystack.frontier.v1beta1.AdminService/RemovePlatformUser"
	// AdminServiceDelegatedCheckoutProcedure is the fully-qualified name of the AdminService's
	// DelegatedCheckout RPC.
	AdminServiceDelegatedCheckoutProcedure = "/raystack.frontier.v1beta1.AdminService/DelegatedCheckout"
	// AdminServiceListAllInvoicesProcedure is the fully-qualified name of the AdminService's
	// ListAllInvoices RPC.
	AdminServiceListAllInvoicesProcedure = "/raystack.frontier.v1beta1.AdminService/ListAllInvoices"
	// AdminServiceGenerateInvoicesProcedure is the fully-qualified name of the AdminService's
	// GenerateInvoices RPC.
	AdminServiceGenerateInvoicesProcedure = "/raystack.frontier.v1beta1.AdminService/GenerateInvoices"
	// AdminServiceListAllBillingAccountsProcedure is the fully-qualified name of the AdminService's
	// ListAllBillingAccounts RPC.
	AdminServiceListAllBillingAccountsProcedure = "/raystack.frontier.v1beta1.AdminService/ListAllBillingAccounts"
	// AdminServiceRevertBillingUsageProcedure is the fully-qualified name of the AdminService's
	// RevertBillingUsage RPC.
	AdminServiceRevertBillingUsageProcedure = "/raystack.frontier.v1beta1.AdminService/RevertBillingUsage"
	// AdminServiceCreateWebhookProcedure is the fully-qualified name of the AdminService's
	// CreateWebhook RPC.
	AdminServiceCreateWebhookProcedure = "/raystack.frontier.v1beta1.AdminService/CreateWebhook"
	// AdminServiceUpdateWebhookProcedure is the fully-qualified name of the AdminService's
	// UpdateWebhook RPC.
	AdminServiceUpdateWebhookProcedure = "/raystack.frontier.v1beta1.AdminService/UpdateWebhook"
	// AdminServiceDeleteWebhookProcedure is the fully-qualified name of the AdminService's
	// DeleteWebhook RPC.
	AdminServiceDeleteWebhookProcedure = "/raystack.frontier.v1beta1.AdminService/DeleteWebhook"
	// AdminServiceListWebhooksProcedure is the fully-qualified name of the AdminService's ListWebhooks
	// RPC.
	AdminServiceListWebhooksProcedure = "/raystack.frontier.v1beta1.AdminService/ListWebhooks"
	// AdminServiceUpdateBillingAccountLimitsProcedure is the fully-qualified name of the AdminService's
	// UpdateBillingAccountLimits RPC.
	AdminServiceUpdateBillingAccountLimitsProcedure = "/raystack.frontier.v1beta1.AdminService/UpdateBillingAccountLimits"
	// AdminServiceGetBillingAccountDetailsProcedure is the fully-qualified name of the AdminService's
	// GetBillingAccountDetails RPC.
	AdminServiceGetBillingAccountDetailsProcedure = "/raystack.frontier.v1beta1.AdminService/GetBillingAccountDetails"
	// AdminServiceUpdateBillingAccountDetailsProcedure is the fully-qualified name of the
	// AdminService's UpdateBillingAccountDetails RPC.
	AdminServiceUpdateBillingAccountDetailsProcedure = "/raystack.frontier.v1beta1.AdminService/UpdateBillingAccountDetails"
	// AdminServiceCreateProspectProcedure is the fully-qualified name of the AdminService's
	// CreateProspect RPC.
	AdminServiceCreateProspectProcedure = "/raystack.frontier.v1beta1.AdminService/CreateProspect"
	// AdminServiceListProspectsProcedure is the fully-qualified name of the AdminService's
	// ListProspects RPC.
	AdminServiceListProspectsProcedure = "/raystack.frontier.v1beta1.AdminService/ListProspects"
	// AdminServiceGetProspectProcedure is the fully-qualified name of the AdminService's GetProspect
	// RPC.
	AdminServiceGetProspectProcedure = "/raystack.frontier.v1beta1.AdminService/GetProspect"
	// AdminServiceUpdateProspectProcedure is the fully-qualified name of the AdminService's
	// UpdateProspect RPC.
	AdminServiceUpdateProspectProcedure = "/raystack.frontier.v1beta1.AdminService/UpdateProspect"
	// AdminServiceDeleteProspectProcedure is the fully-qualified name of the AdminService's
	// DeleteProspect RPC.
	AdminServiceDeleteProspectProcedure = "/raystack.frontier.v1beta1.AdminService/DeleteProspect"
	// AdminServiceSearchInvoicesProcedure is the fully-qualified name of the AdminService's
	// SearchInvoices RPC.
	AdminServiceSearchInvoicesProcedure = "/raystack.frontier.v1beta1.AdminService/SearchInvoices"
)

// AdminServiceClient is a client for the raystack.frontier.v1beta1.AdminService service.
type AdminServiceClient interface {
	// Users
	ListAllUsers(context.Context, *connect_go.Request[v1beta1.ListAllUsersRequest]) (*connect_go.Response[v1beta1.ListAllUsersResponse], error)
	// Group
	ListGroups(context.Context, *connect_go.Request[v1beta1.ListGroupsRequest]) (*connect_go.Response[v1beta1.ListGroupsResponse], error)
	// Organizations
	ListAllOrganizations(context.Context, *connect_go.Request[v1beta1.ListAllOrganizationsRequest]) (*connect_go.Response[v1beta1.ListAllOrganizationsResponse], error)
	AdminCreateOrganization(context.Context, *connect_go.Request[v1beta1.AdminCreateOrganizationRequest]) (*connect_go.Response[v1beta1.AdminCreateOrganizationResponse], error)
	SearchOrganizations(context.Context, *connect_go.Request[v1beta1.SearchOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationsResponse], error)
	SearchOrganizationUsers(context.Context, *connect_go.Request[v1beta1.SearchOrganizationUsersRequest]) (*connect_go.Response[v1beta1.SearchOrganizationUsersResponse], error)
	SearchProjectUsers(context.Context, *connect_go.Request[v1beta1.SearchProjectUsersRequest]) (*connect_go.Response[v1beta1.SearchProjectUsersResponse], error)
	SearchOrganizationProjects(context.Context, *connect_go.Request[v1beta1.SearchOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationProjectsResponse], error)
	SearchOrganizationInvoices(context.Context, *connect_go.Request[v1beta1.SearchOrganizationInvoicesRequest]) (*connect_go.Response[v1beta1.SearchOrganizationInvoicesResponse], error)
	SearchOrganizationTokens(context.Context, *connect_go.Request[v1beta1.SearchOrganizationTokensRequest]) (*connect_go.Response[v1beta1.SearchOrganizationTokensResponse], error)
	SearchOrganizationServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.SearchOrganizationServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationServiceUserCredentialsResponse], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizations(context.Context, *connect_go.Request[v1beta1.ExportOrganizationsRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ExportOrganizationUsersRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ExportOrganizationProjectsRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationTokens(context.Context, *connect_go.Request[v1beta1.ExportOrganizationTokensRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportUsers(context.Context, *connect_go.Request[v1beta1.ExportUsersRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error)
	SearchUsers(context.Context, *connect_go.Request[v1beta1.SearchUsersRequest]) (*connect_go.Response[v1beta1.SearchUsersResponse], error)
	SearchUserOrganizations(context.Context, *connect_go.Request[v1beta1.SearchUserOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchUserOrganizationsResponse], error)
	SearchUserProjects(context.Context, *connect_go.Request[v1beta1.SearchUserProjectsRequest]) (*connect_go.Response[v1beta1.SearchUserProjectsResponse], error)
	SetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.SetOrganizationKycRequest]) (*connect_go.Response[v1beta1.SetOrganizationKycResponse], error)
	ListOrganizationsKyc(context.Context, *connect_go.Request[v1beta1.ListOrganizationsKycRequest]) (*connect_go.Response[v1beta1.ListOrganizationsKycResponse], error)
	// Projects
	ListProjects(context.Context, *connect_go.Request[v1beta1.ListProjectsRequest]) (*connect_go.Response[v1beta1.ListProjectsResponse], error)
	// Relations
	ListRelations(context.Context, *connect_go.Request[v1beta1.ListRelationsRequest]) (*connect_go.Response[v1beta1.ListRelationsResponse], error)
	// Resources
	ListResources(context.Context, *connect_go.Request[v1beta1.ListResourcesRequest]) (*connect_go.Response[v1beta1.ListResourcesResponse], error)
	// Roles
	CreateRole(context.Context, *connect_go.Request[v1beta1.CreateRoleRequest]) (*connect_go.Response[v1beta1.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect_go.Request[v1beta1.UpdateRoleRequest]) (*connect_go.Response[v1beta1.UpdateRoleResponse], error)
	DeleteRole(context.Context, *connect_go.Request[v1beta1.DeleteRoleRequest]) (*connect_go.Response[v1beta1.DeleteRoleResponse], error)
	// Permissions
	CreatePermission(context.Context, *connect_go.Request[v1beta1.CreatePermissionRequest]) (*connect_go.Response[v1beta1.CreatePermissionResponse], error)
	UpdatePermission(context.Context, *connect_go.Request[v1beta1.UpdatePermissionRequest]) (*connect_go.Response[v1beta1.UpdatePermissionResponse], error)
	DeletePermission(context.Context, *connect_go.Request[v1beta1.DeletePermissionRequest]) (*connect_go.Response[v1beta1.DeletePermissionResponse], error)
	// Preferences
	ListPreferences(context.Context, *connect_go.Request[v1beta1.ListPreferencesRequest]) (*connect_go.Response[v1beta1.ListPreferencesResponse], error)
	CreatePreferences(context.Context, *connect_go.Request[v1beta1.CreatePreferencesRequest]) (*connect_go.Response[v1beta1.CreatePreferencesResponse], error)
	// Check
	CheckFederatedResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckFederatedResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckFederatedResourcePermissionResponse], error)
	// Platform
	AddPlatformUser(context.Context, *connect_go.Request[v1beta1.AddPlatformUserRequest]) (*connect_go.Response[v1beta1.AddPlatformUserResponse], error)
	ListPlatformUsers(context.Context, *connect_go.Request[v1beta1.ListPlatformUsersRequest]) (*connect_go.Response[v1beta1.ListPlatformUsersResponse], error)
	RemovePlatformUser(context.Context, *connect_go.Request[v1beta1.RemovePlatformUserRequest]) (*connect_go.Response[v1beta1.RemovePlatformUserResponse], error)
	// Checkout
	DelegatedCheckout(context.Context, *connect_go.Request[v1beta1.DelegatedCheckoutRequest]) (*connect_go.Response[v1beta1.DelegatedCheckoutResponse], error)
	ListAllInvoices(context.Context, *connect_go.Request[v1beta1.ListAllInvoicesRequest]) (*connect_go.Response[v1beta1.ListAllInvoicesResponse], error)
	GenerateInvoices(context.Context, *connect_go.Request[v1beta1.GenerateInvoicesRequest]) (*connect_go.Response[v1beta1.GenerateInvoicesResponse], error)
	ListAllBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListAllBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListAllBillingAccountsResponse], error)
	// Usage
	RevertBillingUsage(context.Context, *connect_go.Request[v1beta1.RevertBillingUsageRequest]) (*connect_go.Response[v1beta1.RevertBillingUsageResponse], error)
	// Webhooks
	CreateWebhook(context.Context, *connect_go.Request[v1beta1.CreateWebhookRequest]) (*connect_go.Response[v1beta1.CreateWebhookResponse], error)
	UpdateWebhook(context.Context, *connect_go.Request[v1beta1.UpdateWebhookRequest]) (*connect_go.Response[v1beta1.UpdateWebhookResponse], error)
	DeleteWebhook(context.Context, *connect_go.Request[v1beta1.DeleteWebhookRequest]) (*connect_go.Response[v1beta1.DeleteWebhookResponse], error)
	ListWebhooks(context.Context, *connect_go.Request[v1beta1.ListWebhooksRequest]) (*connect_go.Response[v1beta1.ListWebhooksResponse], error)
	// Billing Account
	//
	// Deprecated: do not use.
	UpdateBillingAccountLimits(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountLimitsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountLimitsResponse], error)
	// GetBillingAccountDetails returns the billing account details that can be updated via UpdateBillingAccountDetails
	GetBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.GetBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.GetBillingAccountDetailsResponse], error)
	UpdateBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountDetailsResponse], error)
	// Prospects
	CreateProspect(context.Context, *connect_go.Request[v1beta1.CreateProspectRequest]) (*connect_go.Response[v1beta1.CreateProspectResponse], error)
	ListProspects(context.Context, *connect_go.Request[v1beta1.ListProspectsRequest]) (*connect_go.Response[v1beta1.ListProspectsResponse], error)
	GetProspect(context.Context, *connect_go.Request[v1beta1.GetProspectRequest]) (*connect_go.Response[v1beta1.GetProspectResponse], error)
	UpdateProspect(context.Context, *connect_go.Request[v1beta1.UpdateProspectRequest]) (*connect_go.Response[v1beta1.UpdateProspectResponse], error)
	DeleteProspect(context.Context, *connect_go.Request[v1beta1.DeleteProspectRequest]) (*connect_go.Response[v1beta1.DeleteProspectResponse], error)
	SearchInvoices(context.Context, *connect_go.Request[v1beta1.SearchInvoicesRequest]) (*connect_go.Response[v1beta1.SearchInvoicesResponse], error)
}

// NewAdminServiceClient constructs a client for the raystack.frontier.v1beta1.AdminService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		listAllUsers: connect_go.NewClient[v1beta1.ListAllUsersRequest, v1beta1.ListAllUsersResponse](
			httpClient,
			baseURL+AdminServiceListAllUsersProcedure,
			opts...,
		),
		listGroups: connect_go.NewClient[v1beta1.ListGroupsRequest, v1beta1.ListGroupsResponse](
			httpClient,
			baseURL+AdminServiceListGroupsProcedure,
			opts...,
		),
		listAllOrganizations: connect_go.NewClient[v1beta1.ListAllOrganizationsRequest, v1beta1.ListAllOrganizationsResponse](
			httpClient,
			baseURL+AdminServiceListAllOrganizationsProcedure,
			opts...,
		),
		adminCreateOrganization: connect_go.NewClient[v1beta1.AdminCreateOrganizationRequest, v1beta1.AdminCreateOrganizationResponse](
			httpClient,
			baseURL+AdminServiceAdminCreateOrganizationProcedure,
			opts...,
		),
		searchOrganizations: connect_go.NewClient[v1beta1.SearchOrganizationsRequest, v1beta1.SearchOrganizationsResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationsProcedure,
			opts...,
		),
		searchOrganizationUsers: connect_go.NewClient[v1beta1.SearchOrganizationUsersRequest, v1beta1.SearchOrganizationUsersResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationUsersProcedure,
			opts...,
		),
		searchProjectUsers: connect_go.NewClient[v1beta1.SearchProjectUsersRequest, v1beta1.SearchProjectUsersResponse](
			httpClient,
			baseURL+AdminServiceSearchProjectUsersProcedure,
			opts...,
		),
		searchOrganizationProjects: connect_go.NewClient[v1beta1.SearchOrganizationProjectsRequest, v1beta1.SearchOrganizationProjectsResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationProjectsProcedure,
			opts...,
		),
		searchOrganizationInvoices: connect_go.NewClient[v1beta1.SearchOrganizationInvoicesRequest, v1beta1.SearchOrganizationInvoicesResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationInvoicesProcedure,
			opts...,
		),
		searchOrganizationTokens: connect_go.NewClient[v1beta1.SearchOrganizationTokensRequest, v1beta1.SearchOrganizationTokensResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationTokensProcedure,
			opts...,
		),
		searchOrganizationServiceUserCredentials: connect_go.NewClient[v1beta1.SearchOrganizationServiceUserCredentialsRequest, v1beta1.SearchOrganizationServiceUserCredentialsResponse](
			httpClient,
			baseURL+AdminServiceSearchOrganizationServiceUserCredentialsProcedure,
			opts...,
		),
		exportOrganizations: connect_go.NewClient[v1beta1.ExportOrganizationsRequest, httpbody.HttpBody](
			httpClient,
			baseURL+AdminServiceExportOrganizationsProcedure,
			opts...,
		),
		exportOrganizationUsers: connect_go.NewClient[v1beta1.ExportOrganizationUsersRequest, httpbody.HttpBody](
			httpClient,
			baseURL+AdminServiceExportOrganizationUsersProcedure,
			opts...,
		),
		exportOrganizationProjects: connect_go.NewClient[v1beta1.ExportOrganizationProjectsRequest, httpbody.HttpBody](
			httpClient,
			baseURL+AdminServiceExportOrganizationProjectsProcedure,
			opts...,
		),
		exportOrganizationTokens: connect_go.NewClient[v1beta1.ExportOrganizationTokensRequest, httpbody.HttpBody](
			httpClient,
			baseURL+AdminServiceExportOrganizationTokensProcedure,
			opts...,
		),
		exportUsers: connect_go.NewClient[v1beta1.ExportUsersRequest, httpbody.HttpBody](
			httpClient,
			baseURL+AdminServiceExportUsersProcedure,
			opts...,
		),
		searchUsers: connect_go.NewClient[v1beta1.SearchUsersRequest, v1beta1.SearchUsersResponse](
			httpClient,
			baseURL+AdminServiceSearchUsersProcedure,
			opts...,
		),
		searchUserOrganizations: connect_go.NewClient[v1beta1.SearchUserOrganizationsRequest, v1beta1.SearchUserOrganizationsResponse](
			httpClient,
			baseURL+AdminServiceSearchUserOrganizationsProcedure,
			opts...,
		),
		searchUserProjects: connect_go.NewClient[v1beta1.SearchUserProjectsRequest, v1beta1.SearchUserProjectsResponse](
			httpClient,
			baseURL+AdminServiceSearchUserProjectsProcedure,
			opts...,
		),
		setOrganizationKyc: connect_go.NewClient[v1beta1.SetOrganizationKycRequest, v1beta1.SetOrganizationKycResponse](
			httpClient,
			baseURL+AdminServiceSetOrganizationKycProcedure,
			opts...,
		),
		listOrganizationsKyc: connect_go.NewClient[v1beta1.ListOrganizationsKycRequest, v1beta1.ListOrganizationsKycResponse](
			httpClient,
			baseURL+AdminServiceListOrganizationsKycProcedure,
			opts...,
		),
		listProjects: connect_go.NewClient[v1beta1.ListProjectsRequest, v1beta1.ListProjectsResponse](
			httpClient,
			baseURL+AdminServiceListProjectsProcedure,
			opts...,
		),
		listRelations: connect_go.NewClient[v1beta1.ListRelationsRequest, v1beta1.ListRelationsResponse](
			httpClient,
			baseURL+AdminServiceListRelationsProcedure,
			opts...,
		),
		listResources: connect_go.NewClient[v1beta1.ListResourcesRequest, v1beta1.ListResourcesResponse](
			httpClient,
			baseURL+AdminServiceListResourcesProcedure,
			opts...,
		),
		createRole: connect_go.NewClient[v1beta1.CreateRoleRequest, v1beta1.CreateRoleResponse](
			httpClient,
			baseURL+AdminServiceCreateRoleProcedure,
			opts...,
		),
		updateRole: connect_go.NewClient[v1beta1.UpdateRoleRequest, v1beta1.UpdateRoleResponse](
			httpClient,
			baseURL+AdminServiceUpdateRoleProcedure,
			opts...,
		),
		deleteRole: connect_go.NewClient[v1beta1.DeleteRoleRequest, v1beta1.DeleteRoleResponse](
			httpClient,
			baseURL+AdminServiceDeleteRoleProcedure,
			opts...,
		),
		createPermission: connect_go.NewClient[v1beta1.CreatePermissionRequest, v1beta1.CreatePermissionResponse](
			httpClient,
			baseURL+AdminServiceCreatePermissionProcedure,
			opts...,
		),
		updatePermission: connect_go.NewClient[v1beta1.UpdatePermissionRequest, v1beta1.UpdatePermissionResponse](
			httpClient,
			baseURL+AdminServiceUpdatePermissionProcedure,
			opts...,
		),
		deletePermission: connect_go.NewClient[v1beta1.DeletePermissionRequest, v1beta1.DeletePermissionResponse](
			httpClient,
			baseURL+AdminServiceDeletePermissionProcedure,
			opts...,
		),
		listPreferences: connect_go.NewClient[v1beta1.ListPreferencesRequest, v1beta1.ListPreferencesResponse](
			httpClient,
			baseURL+AdminServiceListPreferencesProcedure,
			opts...,
		),
		createPreferences: connect_go.NewClient[v1beta1.CreatePreferencesRequest, v1beta1.CreatePreferencesResponse](
			httpClient,
			baseURL+AdminServiceCreatePreferencesProcedure,
			opts...,
		),
		checkFederatedResourcePermission: connect_go.NewClient[v1beta1.CheckFederatedResourcePermissionRequest, v1beta1.CheckFederatedResourcePermissionResponse](
			httpClient,
			baseURL+AdminServiceCheckFederatedResourcePermissionProcedure,
			opts...,
		),
		addPlatformUser: connect_go.NewClient[v1beta1.AddPlatformUserRequest, v1beta1.AddPlatformUserResponse](
			httpClient,
			baseURL+AdminServiceAddPlatformUserProcedure,
			opts...,
		),
		listPlatformUsers: connect_go.NewClient[v1beta1.ListPlatformUsersRequest, v1beta1.ListPlatformUsersResponse](
			httpClient,
			baseURL+AdminServiceListPlatformUsersProcedure,
			opts...,
		),
		removePlatformUser: connect_go.NewClient[v1beta1.RemovePlatformUserRequest, v1beta1.RemovePlatformUserResponse](
			httpClient,
			baseURL+AdminServiceRemovePlatformUserProcedure,
			opts...,
		),
		delegatedCheckout: connect_go.NewClient[v1beta1.DelegatedCheckoutRequest, v1beta1.DelegatedCheckoutResponse](
			httpClient,
			baseURL+AdminServiceDelegatedCheckoutProcedure,
			opts...,
		),
		listAllInvoices: connect_go.NewClient[v1beta1.ListAllInvoicesRequest, v1beta1.ListAllInvoicesResponse](
			httpClient,
			baseURL+AdminServiceListAllInvoicesProcedure,
			opts...,
		),
		generateInvoices: connect_go.NewClient[v1beta1.GenerateInvoicesRequest, v1beta1.GenerateInvoicesResponse](
			httpClient,
			baseURL+AdminServiceGenerateInvoicesProcedure,
			opts...,
		),
		listAllBillingAccounts: connect_go.NewClient[v1beta1.ListAllBillingAccountsRequest, v1beta1.ListAllBillingAccountsResponse](
			httpClient,
			baseURL+AdminServiceListAllBillingAccountsProcedure,
			opts...,
		),
		revertBillingUsage: connect_go.NewClient[v1beta1.RevertBillingUsageRequest, v1beta1.RevertBillingUsageResponse](
			httpClient,
			baseURL+AdminServiceRevertBillingUsageProcedure,
			opts...,
		),
		createWebhook: connect_go.NewClient[v1beta1.CreateWebhookRequest, v1beta1.CreateWebhookResponse](
			httpClient,
			baseURL+AdminServiceCreateWebhookProcedure,
			opts...,
		),
		updateWebhook: connect_go.NewClient[v1beta1.UpdateWebhookRequest, v1beta1.UpdateWebhookResponse](
			httpClient,
			baseURL+AdminServiceUpdateWebhookProcedure,
			opts...,
		),
		deleteWebhook: connect_go.NewClient[v1beta1.DeleteWebhookRequest, v1beta1.DeleteWebhookResponse](
			httpClient,
			baseURL+AdminServiceDeleteWebhookProcedure,
			opts...,
		),
		listWebhooks: connect_go.NewClient[v1beta1.ListWebhooksRequest, v1beta1.ListWebhooksResponse](
			httpClient,
			baseURL+AdminServiceListWebhooksProcedure,
			opts...,
		),
		updateBillingAccountLimits: connect_go.NewClient[v1beta1.UpdateBillingAccountLimitsRequest, v1beta1.UpdateBillingAccountLimitsResponse](
			httpClient,
			baseURL+AdminServiceUpdateBillingAccountLimitsProcedure,
			opts...,
		),
		getBillingAccountDetails: connect_go.NewClient[v1beta1.GetBillingAccountDetailsRequest, v1beta1.GetBillingAccountDetailsResponse](
			httpClient,
			baseURL+AdminServiceGetBillingAccountDetailsProcedure,
			opts...,
		),
		updateBillingAccountDetails: connect_go.NewClient[v1beta1.UpdateBillingAccountDetailsRequest, v1beta1.UpdateBillingAccountDetailsResponse](
			httpClient,
			baseURL+AdminServiceUpdateBillingAccountDetailsProcedure,
			opts...,
		),
		createProspect: connect_go.NewClient[v1beta1.CreateProspectRequest, v1beta1.CreateProspectResponse](
			httpClient,
			baseURL+AdminServiceCreateProspectProcedure,
			opts...,
		),
		listProspects: connect_go.NewClient[v1beta1.ListProspectsRequest, v1beta1.ListProspectsResponse](
			httpClient,
			baseURL+AdminServiceListProspectsProcedure,
			opts...,
		),
		getProspect: connect_go.NewClient[v1beta1.GetProspectRequest, v1beta1.GetProspectResponse](
			httpClient,
			baseURL+AdminServiceGetProspectProcedure,
			opts...,
		),
		updateProspect: connect_go.NewClient[v1beta1.UpdateProspectRequest, v1beta1.UpdateProspectResponse](
			httpClient,
			baseURL+AdminServiceUpdateProspectProcedure,
			opts...,
		),
		deleteProspect: connect_go.NewClient[v1beta1.DeleteProspectRequest, v1beta1.DeleteProspectResponse](
			httpClient,
			baseURL+AdminServiceDeleteProspectProcedure,
			opts...,
		),
		searchInvoices: connect_go.NewClient[v1beta1.SearchInvoicesRequest, v1beta1.SearchInvoicesResponse](
			httpClient,
			baseURL+AdminServiceSearchInvoicesProcedure,
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listAllUsers                             *connect_go.Client[v1beta1.ListAllUsersRequest, v1beta1.ListAllUsersResponse]
	listGroups                               *connect_go.Client[v1beta1.ListGroupsRequest, v1beta1.ListGroupsResponse]
	listAllOrganizations                     *connect_go.Client[v1beta1.ListAllOrganizationsRequest, v1beta1.ListAllOrganizationsResponse]
	adminCreateOrganization                  *connect_go.Client[v1beta1.AdminCreateOrganizationRequest, v1beta1.AdminCreateOrganizationResponse]
	searchOrganizations                      *connect_go.Client[v1beta1.SearchOrganizationsRequest, v1beta1.SearchOrganizationsResponse]
	searchOrganizationUsers                  *connect_go.Client[v1beta1.SearchOrganizationUsersRequest, v1beta1.SearchOrganizationUsersResponse]
	searchProjectUsers                       *connect_go.Client[v1beta1.SearchProjectUsersRequest, v1beta1.SearchProjectUsersResponse]
	searchOrganizationProjects               *connect_go.Client[v1beta1.SearchOrganizationProjectsRequest, v1beta1.SearchOrganizationProjectsResponse]
	searchOrganizationInvoices               *connect_go.Client[v1beta1.SearchOrganizationInvoicesRequest, v1beta1.SearchOrganizationInvoicesResponse]
	searchOrganizationTokens                 *connect_go.Client[v1beta1.SearchOrganizationTokensRequest, v1beta1.SearchOrganizationTokensResponse]
	searchOrganizationServiceUserCredentials *connect_go.Client[v1beta1.SearchOrganizationServiceUserCredentialsRequest, v1beta1.SearchOrganizationServiceUserCredentialsResponse]
	exportOrganizations                      *connect_go.Client[v1beta1.ExportOrganizationsRequest, httpbody.HttpBody]
	exportOrganizationUsers                  *connect_go.Client[v1beta1.ExportOrganizationUsersRequest, httpbody.HttpBody]
	exportOrganizationProjects               *connect_go.Client[v1beta1.ExportOrganizationProjectsRequest, httpbody.HttpBody]
	exportOrganizationTokens                 *connect_go.Client[v1beta1.ExportOrganizationTokensRequest, httpbody.HttpBody]
	exportUsers                              *connect_go.Client[v1beta1.ExportUsersRequest, httpbody.HttpBody]
	searchUsers                              *connect_go.Client[v1beta1.SearchUsersRequest, v1beta1.SearchUsersResponse]
	searchUserOrganizations                  *connect_go.Client[v1beta1.SearchUserOrganizationsRequest, v1beta1.SearchUserOrganizationsResponse]
	searchUserProjects                       *connect_go.Client[v1beta1.SearchUserProjectsRequest, v1beta1.SearchUserProjectsResponse]
	setOrganizationKyc                       *connect_go.Client[v1beta1.SetOrganizationKycRequest, v1beta1.SetOrganizationKycResponse]
	listOrganizationsKyc                     *connect_go.Client[v1beta1.ListOrganizationsKycRequest, v1beta1.ListOrganizationsKycResponse]
	listProjects                             *connect_go.Client[v1beta1.ListProjectsRequest, v1beta1.ListProjectsResponse]
	listRelations                            *connect_go.Client[v1beta1.ListRelationsRequest, v1beta1.ListRelationsResponse]
	listResources                            *connect_go.Client[v1beta1.ListResourcesRequest, v1beta1.ListResourcesResponse]
	createRole                               *connect_go.Client[v1beta1.CreateRoleRequest, v1beta1.CreateRoleResponse]
	updateRole                               *connect_go.Client[v1beta1.UpdateRoleRequest, v1beta1.UpdateRoleResponse]
	deleteRole                               *connect_go.Client[v1beta1.DeleteRoleRequest, v1beta1.DeleteRoleResponse]
	createPermission                         *connect_go.Client[v1beta1.CreatePermissionRequest, v1beta1.CreatePermissionResponse]
	updatePermission                         *connect_go.Client[v1beta1.UpdatePermissionRequest, v1beta1.UpdatePermissionResponse]
	deletePermission                         *connect_go.Client[v1beta1.DeletePermissionRequest, v1beta1.DeletePermissionResponse]
	listPreferences                          *connect_go.Client[v1beta1.ListPreferencesRequest, v1beta1.ListPreferencesResponse]
	createPreferences                        *connect_go.Client[v1beta1.CreatePreferencesRequest, v1beta1.CreatePreferencesResponse]
	checkFederatedResourcePermission         *connect_go.Client[v1beta1.CheckFederatedResourcePermissionRequest, v1beta1.CheckFederatedResourcePermissionResponse]
	addPlatformUser                          *connect_go.Client[v1beta1.AddPlatformUserRequest, v1beta1.AddPlatformUserResponse]
	listPlatformUsers                        *connect_go.Client[v1beta1.ListPlatformUsersRequest, v1beta1.ListPlatformUsersResponse]
	removePlatformUser                       *connect_go.Client[v1beta1.RemovePlatformUserRequest, v1beta1.RemovePlatformUserResponse]
	delegatedCheckout                        *connect_go.Client[v1beta1.DelegatedCheckoutRequest, v1beta1.DelegatedCheckoutResponse]
	listAllInvoices                          *connect_go.Client[v1beta1.ListAllInvoicesRequest, v1beta1.ListAllInvoicesResponse]
	generateInvoices                         *connect_go.Client[v1beta1.GenerateInvoicesRequest, v1beta1.GenerateInvoicesResponse]
	listAllBillingAccounts                   *connect_go.Client[v1beta1.ListAllBillingAccountsRequest, v1beta1.ListAllBillingAccountsResponse]
	revertBillingUsage                       *connect_go.Client[v1beta1.RevertBillingUsageRequest, v1beta1.RevertBillingUsageResponse]
	createWebhook                            *connect_go.Client[v1beta1.CreateWebhookRequest, v1beta1.CreateWebhookResponse]
	updateWebhook                            *connect_go.Client[v1beta1.UpdateWebhookRequest, v1beta1.UpdateWebhookResponse]
	deleteWebhook                            *connect_go.Client[v1beta1.DeleteWebhookRequest, v1beta1.DeleteWebhookResponse]
	listWebhooks                             *connect_go.Client[v1beta1.ListWebhooksRequest, v1beta1.ListWebhooksResponse]
	updateBillingAccountLimits               *connect_go.Client[v1beta1.UpdateBillingAccountLimitsRequest, v1beta1.UpdateBillingAccountLimitsResponse]
	getBillingAccountDetails                 *connect_go.Client[v1beta1.GetBillingAccountDetailsRequest, v1beta1.GetBillingAccountDetailsResponse]
	updateBillingAccountDetails              *connect_go.Client[v1beta1.UpdateBillingAccountDetailsRequest, v1beta1.UpdateBillingAccountDetailsResponse]
	createProspect                           *connect_go.Client[v1beta1.CreateProspectRequest, v1beta1.CreateProspectResponse]
	listProspects                            *connect_go.Client[v1beta1.ListProspectsRequest, v1beta1.ListProspectsResponse]
	getProspect                              *connect_go.Client[v1beta1.GetProspectRequest, v1beta1.GetProspectResponse]
	updateProspect                           *connect_go.Client[v1beta1.UpdateProspectRequest, v1beta1.UpdateProspectResponse]
	deleteProspect                           *connect_go.Client[v1beta1.DeleteProspectRequest, v1beta1.DeleteProspectResponse]
	searchInvoices                           *connect_go.Client[v1beta1.SearchInvoicesRequest, v1beta1.SearchInvoicesResponse]
}

// ListAllUsers calls raystack.frontier.v1beta1.AdminService.ListAllUsers.
func (c *adminServiceClient) ListAllUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListAllUsersRequest]) (*connect_go.Response[v1beta1.ListAllUsersResponse], error) {
	return c.listAllUsers.CallUnary(ctx, req)
}

// ListGroups calls raystack.frontier.v1beta1.AdminService.ListGroups.
func (c *adminServiceClient) ListGroups(ctx context.Context, req *connect_go.Request[v1beta1.ListGroupsRequest]) (*connect_go.Response[v1beta1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// ListAllOrganizations calls raystack.frontier.v1beta1.AdminService.ListAllOrganizations.
func (c *adminServiceClient) ListAllOrganizations(ctx context.Context, req *connect_go.Request[v1beta1.ListAllOrganizationsRequest]) (*connect_go.Response[v1beta1.ListAllOrganizationsResponse], error) {
	return c.listAllOrganizations.CallUnary(ctx, req)
}

// AdminCreateOrganization calls raystack.frontier.v1beta1.AdminService.AdminCreateOrganization.
func (c *adminServiceClient) AdminCreateOrganization(ctx context.Context, req *connect_go.Request[v1beta1.AdminCreateOrganizationRequest]) (*connect_go.Response[v1beta1.AdminCreateOrganizationResponse], error) {
	return c.adminCreateOrganization.CallUnary(ctx, req)
}

// SearchOrganizations calls raystack.frontier.v1beta1.AdminService.SearchOrganizations.
func (c *adminServiceClient) SearchOrganizations(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationsResponse], error) {
	return c.searchOrganizations.CallUnary(ctx, req)
}

// SearchOrganizationUsers calls raystack.frontier.v1beta1.AdminService.SearchOrganizationUsers.
func (c *adminServiceClient) SearchOrganizationUsers(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationUsersRequest]) (*connect_go.Response[v1beta1.SearchOrganizationUsersResponse], error) {
	return c.searchOrganizationUsers.CallUnary(ctx, req)
}

// SearchProjectUsers calls raystack.frontier.v1beta1.AdminService.SearchProjectUsers.
func (c *adminServiceClient) SearchProjectUsers(ctx context.Context, req *connect_go.Request[v1beta1.SearchProjectUsersRequest]) (*connect_go.Response[v1beta1.SearchProjectUsersResponse], error) {
	return c.searchProjectUsers.CallUnary(ctx, req)
}

// SearchOrganizationProjects calls
// raystack.frontier.v1beta1.AdminService.SearchOrganizationProjects.
func (c *adminServiceClient) SearchOrganizationProjects(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationProjectsResponse], error) {
	return c.searchOrganizationProjects.CallUnary(ctx, req)
}

// SearchOrganizationInvoices calls
// raystack.frontier.v1beta1.AdminService.SearchOrganizationInvoices.
func (c *adminServiceClient) SearchOrganizationInvoices(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationInvoicesRequest]) (*connect_go.Response[v1beta1.SearchOrganizationInvoicesResponse], error) {
	return c.searchOrganizationInvoices.CallUnary(ctx, req)
}

// SearchOrganizationTokens calls raystack.frontier.v1beta1.AdminService.SearchOrganizationTokens.
func (c *adminServiceClient) SearchOrganizationTokens(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationTokensRequest]) (*connect_go.Response[v1beta1.SearchOrganizationTokensResponse], error) {
	return c.searchOrganizationTokens.CallUnary(ctx, req)
}

// SearchOrganizationServiceUserCredentials calls
// raystack.frontier.v1beta1.AdminService.SearchOrganizationServiceUserCredentials.
func (c *adminServiceClient) SearchOrganizationServiceUserCredentials(ctx context.Context, req *connect_go.Request[v1beta1.SearchOrganizationServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationServiceUserCredentialsResponse], error) {
	return c.searchOrganizationServiceUserCredentials.CallUnary(ctx, req)
}

// ExportOrganizations calls raystack.frontier.v1beta1.AdminService.ExportOrganizations.
func (c *adminServiceClient) ExportOrganizations(ctx context.Context, req *connect_go.Request[v1beta1.ExportOrganizationsRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.exportOrganizations.CallServerStream(ctx, req)
}

// ExportOrganizationUsers calls raystack.frontier.v1beta1.AdminService.ExportOrganizationUsers.
func (c *adminServiceClient) ExportOrganizationUsers(ctx context.Context, req *connect_go.Request[v1beta1.ExportOrganizationUsersRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.exportOrganizationUsers.CallServerStream(ctx, req)
}

// ExportOrganizationProjects calls
// raystack.frontier.v1beta1.AdminService.ExportOrganizationProjects.
func (c *adminServiceClient) ExportOrganizationProjects(ctx context.Context, req *connect_go.Request[v1beta1.ExportOrganizationProjectsRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.exportOrganizationProjects.CallServerStream(ctx, req)
}

// ExportOrganizationTokens calls raystack.frontier.v1beta1.AdminService.ExportOrganizationTokens.
func (c *adminServiceClient) ExportOrganizationTokens(ctx context.Context, req *connect_go.Request[v1beta1.ExportOrganizationTokensRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.exportOrganizationTokens.CallServerStream(ctx, req)
}

// ExportUsers calls raystack.frontier.v1beta1.AdminService.ExportUsers.
func (c *adminServiceClient) ExportUsers(ctx context.Context, req *connect_go.Request[v1beta1.ExportUsersRequest]) (*connect_go.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.exportUsers.CallServerStream(ctx, req)
}

// SearchUsers calls raystack.frontier.v1beta1.AdminService.SearchUsers.
func (c *adminServiceClient) SearchUsers(ctx context.Context, req *connect_go.Request[v1beta1.SearchUsersRequest]) (*connect_go.Response[v1beta1.SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// SearchUserOrganizations calls raystack.frontier.v1beta1.AdminService.SearchUserOrganizations.
func (c *adminServiceClient) SearchUserOrganizations(ctx context.Context, req *connect_go.Request[v1beta1.SearchUserOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchUserOrganizationsResponse], error) {
	return c.searchUserOrganizations.CallUnary(ctx, req)
}

// SearchUserProjects calls raystack.frontier.v1beta1.AdminService.SearchUserProjects.
func (c *adminServiceClient) SearchUserProjects(ctx context.Context, req *connect_go.Request[v1beta1.SearchUserProjectsRequest]) (*connect_go.Response[v1beta1.SearchUserProjectsResponse], error) {
	return c.searchUserProjects.CallUnary(ctx, req)
}

// SetOrganizationKyc calls raystack.frontier.v1beta1.AdminService.SetOrganizationKyc.
func (c *adminServiceClient) SetOrganizationKyc(ctx context.Context, req *connect_go.Request[v1beta1.SetOrganizationKycRequest]) (*connect_go.Response[v1beta1.SetOrganizationKycResponse], error) {
	return c.setOrganizationKyc.CallUnary(ctx, req)
}

// ListOrganizationsKyc calls raystack.frontier.v1beta1.AdminService.ListOrganizationsKyc.
func (c *adminServiceClient) ListOrganizationsKyc(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationsKycRequest]) (*connect_go.Response[v1beta1.ListOrganizationsKycResponse], error) {
	return c.listOrganizationsKyc.CallUnary(ctx, req)
}

// ListProjects calls raystack.frontier.v1beta1.AdminService.ListProjects.
func (c *adminServiceClient) ListProjects(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectsRequest]) (*connect_go.Response[v1beta1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// ListRelations calls raystack.frontier.v1beta1.AdminService.ListRelations.
func (c *adminServiceClient) ListRelations(ctx context.Context, req *connect_go.Request[v1beta1.ListRelationsRequest]) (*connect_go.Response[v1beta1.ListRelationsResponse], error) {
	return c.listRelations.CallUnary(ctx, req)
}

// ListResources calls raystack.frontier.v1beta1.AdminService.ListResources.
func (c *adminServiceClient) ListResources(ctx context.Context, req *connect_go.Request[v1beta1.ListResourcesRequest]) (*connect_go.Response[v1beta1.ListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// CreateRole calls raystack.frontier.v1beta1.AdminService.CreateRole.
func (c *adminServiceClient) CreateRole(ctx context.Context, req *connect_go.Request[v1beta1.CreateRoleRequest]) (*connect_go.Response[v1beta1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls raystack.frontier.v1beta1.AdminService.UpdateRole.
func (c *adminServiceClient) UpdateRole(ctx context.Context, req *connect_go.Request[v1beta1.UpdateRoleRequest]) (*connect_go.Response[v1beta1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls raystack.frontier.v1beta1.AdminService.DeleteRole.
func (c *adminServiceClient) DeleteRole(ctx context.Context, req *connect_go.Request[v1beta1.DeleteRoleRequest]) (*connect_go.Response[v1beta1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// CreatePermission calls raystack.frontier.v1beta1.AdminService.CreatePermission.
func (c *adminServiceClient) CreatePermission(ctx context.Context, req *connect_go.Request[v1beta1.CreatePermissionRequest]) (*connect_go.Response[v1beta1.CreatePermissionResponse], error) {
	return c.createPermission.CallUnary(ctx, req)
}

// UpdatePermission calls raystack.frontier.v1beta1.AdminService.UpdatePermission.
func (c *adminServiceClient) UpdatePermission(ctx context.Context, req *connect_go.Request[v1beta1.UpdatePermissionRequest]) (*connect_go.Response[v1beta1.UpdatePermissionResponse], error) {
	return c.updatePermission.CallUnary(ctx, req)
}

// DeletePermission calls raystack.frontier.v1beta1.AdminService.DeletePermission.
func (c *adminServiceClient) DeletePermission(ctx context.Context, req *connect_go.Request[v1beta1.DeletePermissionRequest]) (*connect_go.Response[v1beta1.DeletePermissionResponse], error) {
	return c.deletePermission.CallUnary(ctx, req)
}

// ListPreferences calls raystack.frontier.v1beta1.AdminService.ListPreferences.
func (c *adminServiceClient) ListPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListPreferencesRequest]) (*connect_go.Response[v1beta1.ListPreferencesResponse], error) {
	return c.listPreferences.CallUnary(ctx, req)
}

// CreatePreferences calls raystack.frontier.v1beta1.AdminService.CreatePreferences.
func (c *adminServiceClient) CreatePreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreatePreferencesRequest]) (*connect_go.Response[v1beta1.CreatePreferencesResponse], error) {
	return c.createPreferences.CallUnary(ctx, req)
}

// CheckFederatedResourcePermission calls
// raystack.frontier.v1beta1.AdminService.CheckFederatedResourcePermission.
func (c *adminServiceClient) CheckFederatedResourcePermission(ctx context.Context, req *connect_go.Request[v1beta1.CheckFederatedResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckFederatedResourcePermissionResponse], error) {
	return c.checkFederatedResourcePermission.CallUnary(ctx, req)
}

// AddPlatformUser calls raystack.frontier.v1beta1.AdminService.AddPlatformUser.
func (c *adminServiceClient) AddPlatformUser(ctx context.Context, req *connect_go.Request[v1beta1.AddPlatformUserRequest]) (*connect_go.Response[v1beta1.AddPlatformUserResponse], error) {
	return c.addPlatformUser.CallUnary(ctx, req)
}

// ListPlatformUsers calls raystack.frontier.v1beta1.AdminService.ListPlatformUsers.
func (c *adminServiceClient) ListPlatformUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListPlatformUsersRequest]) (*connect_go.Response[v1beta1.ListPlatformUsersResponse], error) {
	return c.listPlatformUsers.CallUnary(ctx, req)
}

// RemovePlatformUser calls raystack.frontier.v1beta1.AdminService.RemovePlatformUser.
func (c *adminServiceClient) RemovePlatformUser(ctx context.Context, req *connect_go.Request[v1beta1.RemovePlatformUserRequest]) (*connect_go.Response[v1beta1.RemovePlatformUserResponse], error) {
	return c.removePlatformUser.CallUnary(ctx, req)
}

// DelegatedCheckout calls raystack.frontier.v1beta1.AdminService.DelegatedCheckout.
func (c *adminServiceClient) DelegatedCheckout(ctx context.Context, req *connect_go.Request[v1beta1.DelegatedCheckoutRequest]) (*connect_go.Response[v1beta1.DelegatedCheckoutResponse], error) {
	return c.delegatedCheckout.CallUnary(ctx, req)
}

// ListAllInvoices calls raystack.frontier.v1beta1.AdminService.ListAllInvoices.
func (c *adminServiceClient) ListAllInvoices(ctx context.Context, req *connect_go.Request[v1beta1.ListAllInvoicesRequest]) (*connect_go.Response[v1beta1.ListAllInvoicesResponse], error) {
	return c.listAllInvoices.CallUnary(ctx, req)
}

// GenerateInvoices calls raystack.frontier.v1beta1.AdminService.GenerateInvoices.
func (c *adminServiceClient) GenerateInvoices(ctx context.Context, req *connect_go.Request[v1beta1.GenerateInvoicesRequest]) (*connect_go.Response[v1beta1.GenerateInvoicesResponse], error) {
	return c.generateInvoices.CallUnary(ctx, req)
}

// ListAllBillingAccounts calls raystack.frontier.v1beta1.AdminService.ListAllBillingAccounts.
func (c *adminServiceClient) ListAllBillingAccounts(ctx context.Context, req *connect_go.Request[v1beta1.ListAllBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListAllBillingAccountsResponse], error) {
	return c.listAllBillingAccounts.CallUnary(ctx, req)
}

// RevertBillingUsage calls raystack.frontier.v1beta1.AdminService.RevertBillingUsage.
func (c *adminServiceClient) RevertBillingUsage(ctx context.Context, req *connect_go.Request[v1beta1.RevertBillingUsageRequest]) (*connect_go.Response[v1beta1.RevertBillingUsageResponse], error) {
	return c.revertBillingUsage.CallUnary(ctx, req)
}

// CreateWebhook calls raystack.frontier.v1beta1.AdminService.CreateWebhook.
func (c *adminServiceClient) CreateWebhook(ctx context.Context, req *connect_go.Request[v1beta1.CreateWebhookRequest]) (*connect_go.Response[v1beta1.CreateWebhookResponse], error) {
	return c.createWebhook.CallUnary(ctx, req)
}

// UpdateWebhook calls raystack.frontier.v1beta1.AdminService.UpdateWebhook.
func (c *adminServiceClient) UpdateWebhook(ctx context.Context, req *connect_go.Request[v1beta1.UpdateWebhookRequest]) (*connect_go.Response[v1beta1.UpdateWebhookResponse], error) {
	return c.updateWebhook.CallUnary(ctx, req)
}

// DeleteWebhook calls raystack.frontier.v1beta1.AdminService.DeleteWebhook.
func (c *adminServiceClient) DeleteWebhook(ctx context.Context, req *connect_go.Request[v1beta1.DeleteWebhookRequest]) (*connect_go.Response[v1beta1.DeleteWebhookResponse], error) {
	return c.deleteWebhook.CallUnary(ctx, req)
}

// ListWebhooks calls raystack.frontier.v1beta1.AdminService.ListWebhooks.
func (c *adminServiceClient) ListWebhooks(ctx context.Context, req *connect_go.Request[v1beta1.ListWebhooksRequest]) (*connect_go.Response[v1beta1.ListWebhooksResponse], error) {
	return c.listWebhooks.CallUnary(ctx, req)
}

// UpdateBillingAccountLimits calls
// raystack.frontier.v1beta1.AdminService.UpdateBillingAccountLimits.
//
// Deprecated: do not use.
func (c *adminServiceClient) UpdateBillingAccountLimits(ctx context.Context, req *connect_go.Request[v1beta1.UpdateBillingAccountLimitsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountLimitsResponse], error) {
	return c.updateBillingAccountLimits.CallUnary(ctx, req)
}

// GetBillingAccountDetails calls raystack.frontier.v1beta1.AdminService.GetBillingAccountDetails.
func (c *adminServiceClient) GetBillingAccountDetails(ctx context.Context, req *connect_go.Request[v1beta1.GetBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.GetBillingAccountDetailsResponse], error) {
	return c.getBillingAccountDetails.CallUnary(ctx, req)
}

// UpdateBillingAccountDetails calls
// raystack.frontier.v1beta1.AdminService.UpdateBillingAccountDetails.
func (c *adminServiceClient) UpdateBillingAccountDetails(ctx context.Context, req *connect_go.Request[v1beta1.UpdateBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountDetailsResponse], error) {
	return c.updateBillingAccountDetails.CallUnary(ctx, req)
}

// CreateProspect calls raystack.frontier.v1beta1.AdminService.CreateProspect.
func (c *adminServiceClient) CreateProspect(ctx context.Context, req *connect_go.Request[v1beta1.CreateProspectRequest]) (*connect_go.Response[v1beta1.CreateProspectResponse], error) {
	return c.createProspect.CallUnary(ctx, req)
}

// ListProspects calls raystack.frontier.v1beta1.AdminService.ListProspects.
func (c *adminServiceClient) ListProspects(ctx context.Context, req *connect_go.Request[v1beta1.ListProspectsRequest]) (*connect_go.Response[v1beta1.ListProspectsResponse], error) {
	return c.listProspects.CallUnary(ctx, req)
}

// GetProspect calls raystack.frontier.v1beta1.AdminService.GetProspect.
func (c *adminServiceClient) GetProspect(ctx context.Context, req *connect_go.Request[v1beta1.GetProspectRequest]) (*connect_go.Response[v1beta1.GetProspectResponse], error) {
	return c.getProspect.CallUnary(ctx, req)
}

// UpdateProspect calls raystack.frontier.v1beta1.AdminService.UpdateProspect.
func (c *adminServiceClient) UpdateProspect(ctx context.Context, req *connect_go.Request[v1beta1.UpdateProspectRequest]) (*connect_go.Response[v1beta1.UpdateProspectResponse], error) {
	return c.updateProspect.CallUnary(ctx, req)
}

// DeleteProspect calls raystack.frontier.v1beta1.AdminService.DeleteProspect.
func (c *adminServiceClient) DeleteProspect(ctx context.Context, req *connect_go.Request[v1beta1.DeleteProspectRequest]) (*connect_go.Response[v1beta1.DeleteProspectResponse], error) {
	return c.deleteProspect.CallUnary(ctx, req)
}

// SearchInvoices calls raystack.frontier.v1beta1.AdminService.SearchInvoices.
func (c *adminServiceClient) SearchInvoices(ctx context.Context, req *connect_go.Request[v1beta1.SearchInvoicesRequest]) (*connect_go.Response[v1beta1.SearchInvoicesResponse], error) {
	return c.searchInvoices.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the raystack.frontier.v1beta1.AdminService service.
type AdminServiceHandler interface {
	// Users
	ListAllUsers(context.Context, *connect_go.Request[v1beta1.ListAllUsersRequest]) (*connect_go.Response[v1beta1.ListAllUsersResponse], error)
	// Group
	ListGroups(context.Context, *connect_go.Request[v1beta1.ListGroupsRequest]) (*connect_go.Response[v1beta1.ListGroupsResponse], error)
	// Organizations
	ListAllOrganizations(context.Context, *connect_go.Request[v1beta1.ListAllOrganizationsRequest]) (*connect_go.Response[v1beta1.ListAllOrganizationsResponse], error)
	AdminCreateOrganization(context.Context, *connect_go.Request[v1beta1.AdminCreateOrganizationRequest]) (*connect_go.Response[v1beta1.AdminCreateOrganizationResponse], error)
	SearchOrganizations(context.Context, *connect_go.Request[v1beta1.SearchOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationsResponse], error)
	SearchOrganizationUsers(context.Context, *connect_go.Request[v1beta1.SearchOrganizationUsersRequest]) (*connect_go.Response[v1beta1.SearchOrganizationUsersResponse], error)
	SearchProjectUsers(context.Context, *connect_go.Request[v1beta1.SearchProjectUsersRequest]) (*connect_go.Response[v1beta1.SearchProjectUsersResponse], error)
	SearchOrganizationProjects(context.Context, *connect_go.Request[v1beta1.SearchOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationProjectsResponse], error)
	SearchOrganizationInvoices(context.Context, *connect_go.Request[v1beta1.SearchOrganizationInvoicesRequest]) (*connect_go.Response[v1beta1.SearchOrganizationInvoicesResponse], error)
	SearchOrganizationTokens(context.Context, *connect_go.Request[v1beta1.SearchOrganizationTokensRequest]) (*connect_go.Response[v1beta1.SearchOrganizationTokensResponse], error)
	SearchOrganizationServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.SearchOrganizationServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationServiceUserCredentialsResponse], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizations(context.Context, *connect_go.Request[v1beta1.ExportOrganizationsRequest], *connect_go.ServerStream[httpbody.HttpBody]) error
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ExportOrganizationUsersRequest], *connect_go.ServerStream[httpbody.HttpBody]) error
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ExportOrganizationProjectsRequest], *connect_go.ServerStream[httpbody.HttpBody]) error
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportOrganizationTokens(context.Context, *connect_go.Request[v1beta1.ExportOrganizationTokensRequest], *connect_go.ServerStream[httpbody.HttpBody]) error
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportUsers(context.Context, *connect_go.Request[v1beta1.ExportUsersRequest], *connect_go.ServerStream[httpbody.HttpBody]) error
	SearchUsers(context.Context, *connect_go.Request[v1beta1.SearchUsersRequest]) (*connect_go.Response[v1beta1.SearchUsersResponse], error)
	SearchUserOrganizations(context.Context, *connect_go.Request[v1beta1.SearchUserOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchUserOrganizationsResponse], error)
	SearchUserProjects(context.Context, *connect_go.Request[v1beta1.SearchUserProjectsRequest]) (*connect_go.Response[v1beta1.SearchUserProjectsResponse], error)
	SetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.SetOrganizationKycRequest]) (*connect_go.Response[v1beta1.SetOrganizationKycResponse], error)
	ListOrganizationsKyc(context.Context, *connect_go.Request[v1beta1.ListOrganizationsKycRequest]) (*connect_go.Response[v1beta1.ListOrganizationsKycResponse], error)
	// Projects
	ListProjects(context.Context, *connect_go.Request[v1beta1.ListProjectsRequest]) (*connect_go.Response[v1beta1.ListProjectsResponse], error)
	// Relations
	ListRelations(context.Context, *connect_go.Request[v1beta1.ListRelationsRequest]) (*connect_go.Response[v1beta1.ListRelationsResponse], error)
	// Resources
	ListResources(context.Context, *connect_go.Request[v1beta1.ListResourcesRequest]) (*connect_go.Response[v1beta1.ListResourcesResponse], error)
	// Roles
	CreateRole(context.Context, *connect_go.Request[v1beta1.CreateRoleRequest]) (*connect_go.Response[v1beta1.CreateRoleResponse], error)
	UpdateRole(context.Context, *connect_go.Request[v1beta1.UpdateRoleRequest]) (*connect_go.Response[v1beta1.UpdateRoleResponse], error)
	DeleteRole(context.Context, *connect_go.Request[v1beta1.DeleteRoleRequest]) (*connect_go.Response[v1beta1.DeleteRoleResponse], error)
	// Permissions
	CreatePermission(context.Context, *connect_go.Request[v1beta1.CreatePermissionRequest]) (*connect_go.Response[v1beta1.CreatePermissionResponse], error)
	UpdatePermission(context.Context, *connect_go.Request[v1beta1.UpdatePermissionRequest]) (*connect_go.Response[v1beta1.UpdatePermissionResponse], error)
	DeletePermission(context.Context, *connect_go.Request[v1beta1.DeletePermissionRequest]) (*connect_go.Response[v1beta1.DeletePermissionResponse], error)
	// Preferences
	ListPreferences(context.Context, *connect_go.Request[v1beta1.ListPreferencesRequest]) (*connect_go.Response[v1beta1.ListPreferencesResponse], error)
	CreatePreferences(context.Context, *connect_go.Request[v1beta1.CreatePreferencesRequest]) (*connect_go.Response[v1beta1.CreatePreferencesResponse], error)
	// Check
	CheckFederatedResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckFederatedResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckFederatedResourcePermissionResponse], error)
	// Platform
	AddPlatformUser(context.Context, *connect_go.Request[v1beta1.AddPlatformUserRequest]) (*connect_go.Response[v1beta1.AddPlatformUserResponse], error)
	ListPlatformUsers(context.Context, *connect_go.Request[v1beta1.ListPlatformUsersRequest]) (*connect_go.Response[v1beta1.ListPlatformUsersResponse], error)
	RemovePlatformUser(context.Context, *connect_go.Request[v1beta1.RemovePlatformUserRequest]) (*connect_go.Response[v1beta1.RemovePlatformUserResponse], error)
	// Checkout
	DelegatedCheckout(context.Context, *connect_go.Request[v1beta1.DelegatedCheckoutRequest]) (*connect_go.Response[v1beta1.DelegatedCheckoutResponse], error)
	ListAllInvoices(context.Context, *connect_go.Request[v1beta1.ListAllInvoicesRequest]) (*connect_go.Response[v1beta1.ListAllInvoicesResponse], error)
	GenerateInvoices(context.Context, *connect_go.Request[v1beta1.GenerateInvoicesRequest]) (*connect_go.Response[v1beta1.GenerateInvoicesResponse], error)
	ListAllBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListAllBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListAllBillingAccountsResponse], error)
	// Usage
	RevertBillingUsage(context.Context, *connect_go.Request[v1beta1.RevertBillingUsageRequest]) (*connect_go.Response[v1beta1.RevertBillingUsageResponse], error)
	// Webhooks
	CreateWebhook(context.Context, *connect_go.Request[v1beta1.CreateWebhookRequest]) (*connect_go.Response[v1beta1.CreateWebhookResponse], error)
	UpdateWebhook(context.Context, *connect_go.Request[v1beta1.UpdateWebhookRequest]) (*connect_go.Response[v1beta1.UpdateWebhookResponse], error)
	DeleteWebhook(context.Context, *connect_go.Request[v1beta1.DeleteWebhookRequest]) (*connect_go.Response[v1beta1.DeleteWebhookResponse], error)
	ListWebhooks(context.Context, *connect_go.Request[v1beta1.ListWebhooksRequest]) (*connect_go.Response[v1beta1.ListWebhooksResponse], error)
	// Billing Account
	//
	// Deprecated: do not use.
	UpdateBillingAccountLimits(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountLimitsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountLimitsResponse], error)
	// GetBillingAccountDetails returns the billing account details that can be updated via UpdateBillingAccountDetails
	GetBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.GetBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.GetBillingAccountDetailsResponse], error)
	UpdateBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountDetailsResponse], error)
	// Prospects
	CreateProspect(context.Context, *connect_go.Request[v1beta1.CreateProspectRequest]) (*connect_go.Response[v1beta1.CreateProspectResponse], error)
	ListProspects(context.Context, *connect_go.Request[v1beta1.ListProspectsRequest]) (*connect_go.Response[v1beta1.ListProspectsResponse], error)
	GetProspect(context.Context, *connect_go.Request[v1beta1.GetProspectRequest]) (*connect_go.Response[v1beta1.GetProspectResponse], error)
	UpdateProspect(context.Context, *connect_go.Request[v1beta1.UpdateProspectRequest]) (*connect_go.Response[v1beta1.UpdateProspectResponse], error)
	DeleteProspect(context.Context, *connect_go.Request[v1beta1.DeleteProspectRequest]) (*connect_go.Response[v1beta1.DeleteProspectResponse], error)
	SearchInvoices(context.Context, *connect_go.Request[v1beta1.SearchInvoicesRequest]) (*connect_go.Response[v1beta1.SearchInvoicesResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminServiceListAllUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceListAllUsersProcedure,
		svc.ListAllUsers,
		opts...,
	)
	adminServiceListGroupsHandler := connect_go.NewUnaryHandler(
		AdminServiceListGroupsProcedure,
		svc.ListGroups,
		opts...,
	)
	adminServiceListAllOrganizationsHandler := connect_go.NewUnaryHandler(
		AdminServiceListAllOrganizationsProcedure,
		svc.ListAllOrganizations,
		opts...,
	)
	adminServiceAdminCreateOrganizationHandler := connect_go.NewUnaryHandler(
		AdminServiceAdminCreateOrganizationProcedure,
		svc.AdminCreateOrganization,
		opts...,
	)
	adminServiceSearchOrganizationsHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationsProcedure,
		svc.SearchOrganizations,
		opts...,
	)
	adminServiceSearchOrganizationUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationUsersProcedure,
		svc.SearchOrganizationUsers,
		opts...,
	)
	adminServiceSearchProjectUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchProjectUsersProcedure,
		svc.SearchProjectUsers,
		opts...,
	)
	adminServiceSearchOrganizationProjectsHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationProjectsProcedure,
		svc.SearchOrganizationProjects,
		opts...,
	)
	adminServiceSearchOrganizationInvoicesHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationInvoicesProcedure,
		svc.SearchOrganizationInvoices,
		opts...,
	)
	adminServiceSearchOrganizationTokensHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationTokensProcedure,
		svc.SearchOrganizationTokens,
		opts...,
	)
	adminServiceSearchOrganizationServiceUserCredentialsHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchOrganizationServiceUserCredentialsProcedure,
		svc.SearchOrganizationServiceUserCredentials,
		opts...,
	)
	adminServiceExportOrganizationsHandler := connect_go.NewServerStreamHandler(
		AdminServiceExportOrganizationsProcedure,
		svc.ExportOrganizations,
		opts...,
	)
	adminServiceExportOrganizationUsersHandler := connect_go.NewServerStreamHandler(
		AdminServiceExportOrganizationUsersProcedure,
		svc.ExportOrganizationUsers,
		opts...,
	)
	adminServiceExportOrganizationProjectsHandler := connect_go.NewServerStreamHandler(
		AdminServiceExportOrganizationProjectsProcedure,
		svc.ExportOrganizationProjects,
		opts...,
	)
	adminServiceExportOrganizationTokensHandler := connect_go.NewServerStreamHandler(
		AdminServiceExportOrganizationTokensProcedure,
		svc.ExportOrganizationTokens,
		opts...,
	)
	adminServiceExportUsersHandler := connect_go.NewServerStreamHandler(
		AdminServiceExportUsersProcedure,
		svc.ExportUsers,
		opts...,
	)
	adminServiceSearchUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchUsersProcedure,
		svc.SearchUsers,
		opts...,
	)
	adminServiceSearchUserOrganizationsHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchUserOrganizationsProcedure,
		svc.SearchUserOrganizations,
		opts...,
	)
	adminServiceSearchUserProjectsHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchUserProjectsProcedure,
		svc.SearchUserProjects,
		opts...,
	)
	adminServiceSetOrganizationKycHandler := connect_go.NewUnaryHandler(
		AdminServiceSetOrganizationKycProcedure,
		svc.SetOrganizationKyc,
		opts...,
	)
	adminServiceListOrganizationsKycHandler := connect_go.NewUnaryHandler(
		AdminServiceListOrganizationsKycProcedure,
		svc.ListOrganizationsKyc,
		opts...,
	)
	adminServiceListProjectsHandler := connect_go.NewUnaryHandler(
		AdminServiceListProjectsProcedure,
		svc.ListProjects,
		opts...,
	)
	adminServiceListRelationsHandler := connect_go.NewUnaryHandler(
		AdminServiceListRelationsProcedure,
		svc.ListRelations,
		opts...,
	)
	adminServiceListResourcesHandler := connect_go.NewUnaryHandler(
		AdminServiceListResourcesProcedure,
		svc.ListResources,
		opts...,
	)
	adminServiceCreateRoleHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateRoleProcedure,
		svc.CreateRole,
		opts...,
	)
	adminServiceUpdateRoleHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateRoleProcedure,
		svc.UpdateRole,
		opts...,
	)
	adminServiceDeleteRoleHandler := connect_go.NewUnaryHandler(
		AdminServiceDeleteRoleProcedure,
		svc.DeleteRole,
		opts...,
	)
	adminServiceCreatePermissionHandler := connect_go.NewUnaryHandler(
		AdminServiceCreatePermissionProcedure,
		svc.CreatePermission,
		opts...,
	)
	adminServiceUpdatePermissionHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdatePermissionProcedure,
		svc.UpdatePermission,
		opts...,
	)
	adminServiceDeletePermissionHandler := connect_go.NewUnaryHandler(
		AdminServiceDeletePermissionProcedure,
		svc.DeletePermission,
		opts...,
	)
	adminServiceListPreferencesHandler := connect_go.NewUnaryHandler(
		AdminServiceListPreferencesProcedure,
		svc.ListPreferences,
		opts...,
	)
	adminServiceCreatePreferencesHandler := connect_go.NewUnaryHandler(
		AdminServiceCreatePreferencesProcedure,
		svc.CreatePreferences,
		opts...,
	)
	adminServiceCheckFederatedResourcePermissionHandler := connect_go.NewUnaryHandler(
		AdminServiceCheckFederatedResourcePermissionProcedure,
		svc.CheckFederatedResourcePermission,
		opts...,
	)
	adminServiceAddPlatformUserHandler := connect_go.NewUnaryHandler(
		AdminServiceAddPlatformUserProcedure,
		svc.AddPlatformUser,
		opts...,
	)
	adminServiceListPlatformUsersHandler := connect_go.NewUnaryHandler(
		AdminServiceListPlatformUsersProcedure,
		svc.ListPlatformUsers,
		opts...,
	)
	adminServiceRemovePlatformUserHandler := connect_go.NewUnaryHandler(
		AdminServiceRemovePlatformUserProcedure,
		svc.RemovePlatformUser,
		opts...,
	)
	adminServiceDelegatedCheckoutHandler := connect_go.NewUnaryHandler(
		AdminServiceDelegatedCheckoutProcedure,
		svc.DelegatedCheckout,
		opts...,
	)
	adminServiceListAllInvoicesHandler := connect_go.NewUnaryHandler(
		AdminServiceListAllInvoicesProcedure,
		svc.ListAllInvoices,
		opts...,
	)
	adminServiceGenerateInvoicesHandler := connect_go.NewUnaryHandler(
		AdminServiceGenerateInvoicesProcedure,
		svc.GenerateInvoices,
		opts...,
	)
	adminServiceListAllBillingAccountsHandler := connect_go.NewUnaryHandler(
		AdminServiceListAllBillingAccountsProcedure,
		svc.ListAllBillingAccounts,
		opts...,
	)
	adminServiceRevertBillingUsageHandler := connect_go.NewUnaryHandler(
		AdminServiceRevertBillingUsageProcedure,
		svc.RevertBillingUsage,
		opts...,
	)
	adminServiceCreateWebhookHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateWebhookProcedure,
		svc.CreateWebhook,
		opts...,
	)
	adminServiceUpdateWebhookHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateWebhookProcedure,
		svc.UpdateWebhook,
		opts...,
	)
	adminServiceDeleteWebhookHandler := connect_go.NewUnaryHandler(
		AdminServiceDeleteWebhookProcedure,
		svc.DeleteWebhook,
		opts...,
	)
	adminServiceListWebhooksHandler := connect_go.NewUnaryHandler(
		AdminServiceListWebhooksProcedure,
		svc.ListWebhooks,
		opts...,
	)
	adminServiceUpdateBillingAccountLimitsHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateBillingAccountLimitsProcedure,
		svc.UpdateBillingAccountLimits,
		opts...,
	)
	adminServiceGetBillingAccountDetailsHandler := connect_go.NewUnaryHandler(
		AdminServiceGetBillingAccountDetailsProcedure,
		svc.GetBillingAccountDetails,
		opts...,
	)
	adminServiceUpdateBillingAccountDetailsHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateBillingAccountDetailsProcedure,
		svc.UpdateBillingAccountDetails,
		opts...,
	)
	adminServiceCreateProspectHandler := connect_go.NewUnaryHandler(
		AdminServiceCreateProspectProcedure,
		svc.CreateProspect,
		opts...,
	)
	adminServiceListProspectsHandler := connect_go.NewUnaryHandler(
		AdminServiceListProspectsProcedure,
		svc.ListProspects,
		opts...,
	)
	adminServiceGetProspectHandler := connect_go.NewUnaryHandler(
		AdminServiceGetProspectProcedure,
		svc.GetProspect,
		opts...,
	)
	adminServiceUpdateProspectHandler := connect_go.NewUnaryHandler(
		AdminServiceUpdateProspectProcedure,
		svc.UpdateProspect,
		opts...,
	)
	adminServiceDeleteProspectHandler := connect_go.NewUnaryHandler(
		AdminServiceDeleteProspectProcedure,
		svc.DeleteProspect,
		opts...,
	)
	adminServiceSearchInvoicesHandler := connect_go.NewUnaryHandler(
		AdminServiceSearchInvoicesProcedure,
		svc.SearchInvoices,
		opts...,
	)
	return "/raystack.frontier.v1beta1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListAllUsersProcedure:
			adminServiceListAllUsersHandler.ServeHTTP(w, r)
		case AdminServiceListGroupsProcedure:
			adminServiceListGroupsHandler.ServeHTTP(w, r)
		case AdminServiceListAllOrganizationsProcedure:
			adminServiceListAllOrganizationsHandler.ServeHTTP(w, r)
		case AdminServiceAdminCreateOrganizationProcedure:
			adminServiceAdminCreateOrganizationHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationsProcedure:
			adminServiceSearchOrganizationsHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationUsersProcedure:
			adminServiceSearchOrganizationUsersHandler.ServeHTTP(w, r)
		case AdminServiceSearchProjectUsersProcedure:
			adminServiceSearchProjectUsersHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationProjectsProcedure:
			adminServiceSearchOrganizationProjectsHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationInvoicesProcedure:
			adminServiceSearchOrganizationInvoicesHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationTokensProcedure:
			adminServiceSearchOrganizationTokensHandler.ServeHTTP(w, r)
		case AdminServiceSearchOrganizationServiceUserCredentialsProcedure:
			adminServiceSearchOrganizationServiceUserCredentialsHandler.ServeHTTP(w, r)
		case AdminServiceExportOrganizationsProcedure:
			adminServiceExportOrganizationsHandler.ServeHTTP(w, r)
		case AdminServiceExportOrganizationUsersProcedure:
			adminServiceExportOrganizationUsersHandler.ServeHTTP(w, r)
		case AdminServiceExportOrganizationProjectsProcedure:
			adminServiceExportOrganizationProjectsHandler.ServeHTTP(w, r)
		case AdminServiceExportOrganizationTokensProcedure:
			adminServiceExportOrganizationTokensHandler.ServeHTTP(w, r)
		case AdminServiceExportUsersProcedure:
			adminServiceExportUsersHandler.ServeHTTP(w, r)
		case AdminServiceSearchUsersProcedure:
			adminServiceSearchUsersHandler.ServeHTTP(w, r)
		case AdminServiceSearchUserOrganizationsProcedure:
			adminServiceSearchUserOrganizationsHandler.ServeHTTP(w, r)
		case AdminServiceSearchUserProjectsProcedure:
			adminServiceSearchUserProjectsHandler.ServeHTTP(w, r)
		case AdminServiceSetOrganizationKycProcedure:
			adminServiceSetOrganizationKycHandler.ServeHTTP(w, r)
		case AdminServiceListOrganizationsKycProcedure:
			adminServiceListOrganizationsKycHandler.ServeHTTP(w, r)
		case AdminServiceListProjectsProcedure:
			adminServiceListProjectsHandler.ServeHTTP(w, r)
		case AdminServiceListRelationsProcedure:
			adminServiceListRelationsHandler.ServeHTTP(w, r)
		case AdminServiceListResourcesProcedure:
			adminServiceListResourcesHandler.ServeHTTP(w, r)
		case AdminServiceCreateRoleProcedure:
			adminServiceCreateRoleHandler.ServeHTTP(w, r)
		case AdminServiceUpdateRoleProcedure:
			adminServiceUpdateRoleHandler.ServeHTTP(w, r)
		case AdminServiceDeleteRoleProcedure:
			adminServiceDeleteRoleHandler.ServeHTTP(w, r)
		case AdminServiceCreatePermissionProcedure:
			adminServiceCreatePermissionHandler.ServeHTTP(w, r)
		case AdminServiceUpdatePermissionProcedure:
			adminServiceUpdatePermissionHandler.ServeHTTP(w, r)
		case AdminServiceDeletePermissionProcedure:
			adminServiceDeletePermissionHandler.ServeHTTP(w, r)
		case AdminServiceListPreferencesProcedure:
			adminServiceListPreferencesHandler.ServeHTTP(w, r)
		case AdminServiceCreatePreferencesProcedure:
			adminServiceCreatePreferencesHandler.ServeHTTP(w, r)
		case AdminServiceCheckFederatedResourcePermissionProcedure:
			adminServiceCheckFederatedResourcePermissionHandler.ServeHTTP(w, r)
		case AdminServiceAddPlatformUserProcedure:
			adminServiceAddPlatformUserHandler.ServeHTTP(w, r)
		case AdminServiceListPlatformUsersProcedure:
			adminServiceListPlatformUsersHandler.ServeHTTP(w, r)
		case AdminServiceRemovePlatformUserProcedure:
			adminServiceRemovePlatformUserHandler.ServeHTTP(w, r)
		case AdminServiceDelegatedCheckoutProcedure:
			adminServiceDelegatedCheckoutHandler.ServeHTTP(w, r)
		case AdminServiceListAllInvoicesProcedure:
			adminServiceListAllInvoicesHandler.ServeHTTP(w, r)
		case AdminServiceGenerateInvoicesProcedure:
			adminServiceGenerateInvoicesHandler.ServeHTTP(w, r)
		case AdminServiceListAllBillingAccountsProcedure:
			adminServiceListAllBillingAccountsHandler.ServeHTTP(w, r)
		case AdminServiceRevertBillingUsageProcedure:
			adminServiceRevertBillingUsageHandler.ServeHTTP(w, r)
		case AdminServiceCreateWebhookProcedure:
			adminServiceCreateWebhookHandler.ServeHTTP(w, r)
		case AdminServiceUpdateWebhookProcedure:
			adminServiceUpdateWebhookHandler.ServeHTTP(w, r)
		case AdminServiceDeleteWebhookProcedure:
			adminServiceDeleteWebhookHandler.ServeHTTP(w, r)
		case AdminServiceListWebhooksProcedure:
			adminServiceListWebhooksHandler.ServeHTTP(w, r)
		case AdminServiceUpdateBillingAccountLimitsProcedure:
			adminServiceUpdateBillingAccountLimitsHandler.ServeHTTP(w, r)
		case AdminServiceGetBillingAccountDetailsProcedure:
			adminServiceGetBillingAccountDetailsHandler.ServeHTTP(w, r)
		case AdminServiceUpdateBillingAccountDetailsProcedure:
			adminServiceUpdateBillingAccountDetailsHandler.ServeHTTP(w, r)
		case AdminServiceCreateProspectProcedure:
			adminServiceCreateProspectHandler.ServeHTTP(w, r)
		case AdminServiceListProspectsProcedure:
			adminServiceListProspectsHandler.ServeHTTP(w, r)
		case AdminServiceGetProspectProcedure:
			adminServiceGetProspectHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProspectProcedure:
			adminServiceUpdateProspectHandler.ServeHTTP(w, r)
		case AdminServiceDeleteProspectProcedure:
			adminServiceDeleteProspectHandler.ServeHTTP(w, r)
		case AdminServiceSearchInvoicesProcedure:
			adminServiceSearchInvoicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListAllUsers(context.Context, *connect_go.Request[v1beta1.ListAllUsersRequest]) (*connect_go.Response[v1beta1.ListAllUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListAllUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListGroups(context.Context, *connect_go.Request[v1beta1.ListGroupsRequest]) (*connect_go.Response[v1beta1.ListGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListGroups is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAllOrganizations(context.Context, *connect_go.Request[v1beta1.ListAllOrganizationsRequest]) (*connect_go.Response[v1beta1.ListAllOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListAllOrganizations is not implemented"))
}

func (UnimplementedAdminServiceHandler) AdminCreateOrganization(context.Context, *connect_go.Request[v1beta1.AdminCreateOrganizationRequest]) (*connect_go.Response[v1beta1.AdminCreateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.AdminCreateOrganization is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizations(context.Context, *connect_go.Request[v1beta1.SearchOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizations is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizationUsers(context.Context, *connect_go.Request[v1beta1.SearchOrganizationUsersRequest]) (*connect_go.Response[v1beta1.SearchOrganizationUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizationUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchProjectUsers(context.Context, *connect_go.Request[v1beta1.SearchProjectUsersRequest]) (*connect_go.Response[v1beta1.SearchProjectUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchProjectUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizationProjects(context.Context, *connect_go.Request[v1beta1.SearchOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizationProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizationInvoices(context.Context, *connect_go.Request[v1beta1.SearchOrganizationInvoicesRequest]) (*connect_go.Response[v1beta1.SearchOrganizationInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizationInvoices is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizationTokens(context.Context, *connect_go.Request[v1beta1.SearchOrganizationTokensRequest]) (*connect_go.Response[v1beta1.SearchOrganizationTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizationTokens is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchOrganizationServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.SearchOrganizationServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.SearchOrganizationServiceUserCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchOrganizationServiceUserCredentials is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportOrganizations(context.Context, *connect_go.Request[v1beta1.ExportOrganizationsRequest], *connect_go.ServerStream[httpbody.HttpBody]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ExportOrganizations is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ExportOrganizationUsersRequest], *connect_go.ServerStream[httpbody.HttpBody]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ExportOrganizationUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ExportOrganizationProjectsRequest], *connect_go.ServerStream[httpbody.HttpBody]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ExportOrganizationProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportOrganizationTokens(context.Context, *connect_go.Request[v1beta1.ExportOrganizationTokensRequest], *connect_go.ServerStream[httpbody.HttpBody]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ExportOrganizationTokens is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportUsers(context.Context, *connect_go.Request[v1beta1.ExportUsersRequest], *connect_go.ServerStream[httpbody.HttpBody]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ExportUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchUsers(context.Context, *connect_go.Request[v1beta1.SearchUsersRequest]) (*connect_go.Response[v1beta1.SearchUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchUserOrganizations(context.Context, *connect_go.Request[v1beta1.SearchUserOrganizationsRequest]) (*connect_go.Response[v1beta1.SearchUserOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchUserOrganizations is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchUserProjects(context.Context, *connect_go.Request[v1beta1.SearchUserProjectsRequest]) (*connect_go.Response[v1beta1.SearchUserProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchUserProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.SetOrganizationKycRequest]) (*connect_go.Response[v1beta1.SetOrganizationKycResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SetOrganizationKyc is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListOrganizationsKyc(context.Context, *connect_go.Request[v1beta1.ListOrganizationsKycRequest]) (*connect_go.Response[v1beta1.ListOrganizationsKycResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListOrganizationsKyc is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjects(context.Context, *connect_go.Request[v1beta1.ListProjectsRequest]) (*connect_go.Response[v1beta1.ListProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListRelations(context.Context, *connect_go.Request[v1beta1.ListRelationsRequest]) (*connect_go.Response[v1beta1.ListRelationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListRelations is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListResources(context.Context, *connect_go.Request[v1beta1.ListResourcesRequest]) (*connect_go.Response[v1beta1.ListResourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListResources is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateRole(context.Context, *connect_go.Request[v1beta1.CreateRoleRequest]) (*connect_go.Response[v1beta1.CreateRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CreateRole is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateRole(context.Context, *connect_go.Request[v1beta1.UpdateRoleRequest]) (*connect_go.Response[v1beta1.UpdateRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdateRole is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteRole(context.Context, *connect_go.Request[v1beta1.DeleteRoleRequest]) (*connect_go.Response[v1beta1.DeleteRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.DeleteRole is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreatePermission(context.Context, *connect_go.Request[v1beta1.CreatePermissionRequest]) (*connect_go.Response[v1beta1.CreatePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CreatePermission is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdatePermission(context.Context, *connect_go.Request[v1beta1.UpdatePermissionRequest]) (*connect_go.Response[v1beta1.UpdatePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdatePermission is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeletePermission(context.Context, *connect_go.Request[v1beta1.DeletePermissionRequest]) (*connect_go.Response[v1beta1.DeletePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.DeletePermission is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListPreferences(context.Context, *connect_go.Request[v1beta1.ListPreferencesRequest]) (*connect_go.Response[v1beta1.ListPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListPreferences is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreatePreferences(context.Context, *connect_go.Request[v1beta1.CreatePreferencesRequest]) (*connect_go.Response[v1beta1.CreatePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CreatePreferences is not implemented"))
}

func (UnimplementedAdminServiceHandler) CheckFederatedResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckFederatedResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckFederatedResourcePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CheckFederatedResourcePermission is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddPlatformUser(context.Context, *connect_go.Request[v1beta1.AddPlatformUserRequest]) (*connect_go.Response[v1beta1.AddPlatformUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.AddPlatformUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListPlatformUsers(context.Context, *connect_go.Request[v1beta1.ListPlatformUsersRequest]) (*connect_go.Response[v1beta1.ListPlatformUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListPlatformUsers is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemovePlatformUser(context.Context, *connect_go.Request[v1beta1.RemovePlatformUserRequest]) (*connect_go.Response[v1beta1.RemovePlatformUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.RemovePlatformUser is not implemented"))
}

func (UnimplementedAdminServiceHandler) DelegatedCheckout(context.Context, *connect_go.Request[v1beta1.DelegatedCheckoutRequest]) (*connect_go.Response[v1beta1.DelegatedCheckoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.DelegatedCheckout is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAllInvoices(context.Context, *connect_go.Request[v1beta1.ListAllInvoicesRequest]) (*connect_go.Response[v1beta1.ListAllInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListAllInvoices is not implemented"))
}

func (UnimplementedAdminServiceHandler) GenerateInvoices(context.Context, *connect_go.Request[v1beta1.GenerateInvoicesRequest]) (*connect_go.Response[v1beta1.GenerateInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.GenerateInvoices is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAllBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListAllBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListAllBillingAccountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListAllBillingAccounts is not implemented"))
}

func (UnimplementedAdminServiceHandler) RevertBillingUsage(context.Context, *connect_go.Request[v1beta1.RevertBillingUsageRequest]) (*connect_go.Response[v1beta1.RevertBillingUsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.RevertBillingUsage is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateWebhook(context.Context, *connect_go.Request[v1beta1.CreateWebhookRequest]) (*connect_go.Response[v1beta1.CreateWebhookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CreateWebhook is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateWebhook(context.Context, *connect_go.Request[v1beta1.UpdateWebhookRequest]) (*connect_go.Response[v1beta1.UpdateWebhookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdateWebhook is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteWebhook(context.Context, *connect_go.Request[v1beta1.DeleteWebhookRequest]) (*connect_go.Response[v1beta1.DeleteWebhookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.DeleteWebhook is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListWebhooks(context.Context, *connect_go.Request[v1beta1.ListWebhooksRequest]) (*connect_go.Response[v1beta1.ListWebhooksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListWebhooks is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateBillingAccountLimits(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountLimitsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountLimitsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdateBillingAccountLimits is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.GetBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.GetBillingAccountDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.GetBillingAccountDetails is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateBillingAccountDetails(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountDetailsRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdateBillingAccountDetails is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateProspect(context.Context, *connect_go.Request[v1beta1.CreateProspectRequest]) (*connect_go.Response[v1beta1.CreateProspectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.CreateProspect is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProspects(context.Context, *connect_go.Request[v1beta1.ListProspectsRequest]) (*connect_go.Response[v1beta1.ListProspectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.ListProspects is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProspect(context.Context, *connect_go.Request[v1beta1.GetProspectRequest]) (*connect_go.Response[v1beta1.GetProspectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.GetProspect is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProspect(context.Context, *connect_go.Request[v1beta1.UpdateProspectRequest]) (*connect_go.Response[v1beta1.UpdateProspectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.UpdateProspect is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteProspect(context.Context, *connect_go.Request[v1beta1.DeleteProspectRequest]) (*connect_go.Response[v1beta1.DeleteProspectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.DeleteProspect is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchInvoices(context.Context, *connect_go.Request[v1beta1.SearchInvoicesRequest]) (*connect_go.Response[v1beta1.SearchInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.AdminService.SearchInvoices is not implemented"))
}
