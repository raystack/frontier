// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raystack/frontier/v1beta1/frontier.proto

package frontierv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/raystack/frontier/proto/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FrontierServiceName is the fully-qualified name of the FrontierService service.
	FrontierServiceName = "raystack.frontier.v1beta1.FrontierService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontierServiceListUsersProcedure is the fully-qualified name of the FrontierService's ListUsers
	// RPC.
	FrontierServiceListUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListUsers"
	// FrontierServiceCreateUserProcedure is the fully-qualified name of the FrontierService's
	// CreateUser RPC.
	FrontierServiceCreateUserProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateUser"
	// FrontierServiceGetUserProcedure is the fully-qualified name of the FrontierService's GetUser RPC.
	FrontierServiceGetUserProcedure = "/raystack.frontier.v1beta1.FrontierService/GetUser"
	// FrontierServiceListUserGroupsProcedure is the fully-qualified name of the FrontierService's
	// ListUserGroups RPC.
	FrontierServiceListUserGroupsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListUserGroups"
	// FrontierServiceListCurrentUserGroupsProcedure is the fully-qualified name of the
	// FrontierService's ListCurrentUserGroups RPC.
	FrontierServiceListCurrentUserGroupsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserGroups"
	// FrontierServiceGetCurrentUserProcedure is the fully-qualified name of the FrontierService's
	// GetCurrentUser RPC.
	FrontierServiceGetCurrentUserProcedure = "/raystack.frontier.v1beta1.FrontierService/GetCurrentUser"
	// FrontierServiceUpdateUserProcedure is the fully-qualified name of the FrontierService's
	// UpdateUser RPC.
	FrontierServiceUpdateUserProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateUser"
	// FrontierServiceUpdateCurrentUserProcedure is the fully-qualified name of the FrontierService's
	// UpdateCurrentUser RPC.
	FrontierServiceUpdateCurrentUserProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateCurrentUser"
	// FrontierServiceEnableUserProcedure is the fully-qualified name of the FrontierService's
	// EnableUser RPC.
	FrontierServiceEnableUserProcedure = "/raystack.frontier.v1beta1.FrontierService/EnableUser"
	// FrontierServiceDisableUserProcedure is the fully-qualified name of the FrontierService's
	// DisableUser RPC.
	FrontierServiceDisableUserProcedure = "/raystack.frontier.v1beta1.FrontierService/DisableUser"
	// FrontierServiceDeleteUserProcedure is the fully-qualified name of the FrontierService's
	// DeleteUser RPC.
	FrontierServiceDeleteUserProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteUser"
	// FrontierServiceListOrganizationsByUserProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationsByUser RPC.
	FrontierServiceListOrganizationsByUserProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationsByUser"
	// FrontierServiceListOrganizationsByCurrentUserProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationsByCurrentUser RPC.
	FrontierServiceListOrganizationsByCurrentUserProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationsByCurrentUser"
	// FrontierServiceListProjectsByUserProcedure is the fully-qualified name of the FrontierService's
	// ListProjectsByUser RPC.
	FrontierServiceListProjectsByUserProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectsByUser"
	// FrontierServiceListProjectsByCurrentUserProcedure is the fully-qualified name of the
	// FrontierService's ListProjectsByCurrentUser RPC.
	FrontierServiceListProjectsByCurrentUserProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectsByCurrentUser"
	// FrontierServiceListUserInvitationsProcedure is the fully-qualified name of the FrontierService's
	// ListUserInvitations RPC.
	FrontierServiceListUserInvitationsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListUserInvitations"
	// FrontierServiceListCurrentUserInvitationsProcedure is the fully-qualified name of the
	// FrontierService's ListCurrentUserInvitations RPC.
	FrontierServiceListCurrentUserInvitationsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserInvitations"
	// FrontierServiceListServiceUsersProcedure is the fully-qualified name of the FrontierService's
	// ListServiceUsers RPC.
	FrontierServiceListServiceUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListServiceUsers"
	// FrontierServiceCreateServiceUserProcedure is the fully-qualified name of the FrontierService's
	// CreateServiceUser RPC.
	FrontierServiceCreateServiceUserProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUser"
	// FrontierServiceGetServiceUserProcedure is the fully-qualified name of the FrontierService's
	// GetServiceUser RPC.
	FrontierServiceGetServiceUserProcedure = "/raystack.frontier.v1beta1.FrontierService/GetServiceUser"
	// FrontierServiceDeleteServiceUserProcedure is the fully-qualified name of the FrontierService's
	// DeleteServiceUser RPC.
	FrontierServiceDeleteServiceUserProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUser"
	// FrontierServiceCreateServiceUserJWKProcedure is the fully-qualified name of the FrontierService's
	// CreateServiceUserJWK RPC.
	FrontierServiceCreateServiceUserJWKProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserJWK"
	// FrontierServiceListServiceUserJWKsProcedure is the fully-qualified name of the FrontierService's
	// ListServiceUserJWKs RPC.
	FrontierServiceListServiceUserJWKsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserJWKs"
	// FrontierServiceGetServiceUserJWKProcedure is the fully-qualified name of the FrontierService's
	// GetServiceUserJWK RPC.
	FrontierServiceGetServiceUserJWKProcedure = "/raystack.frontier.v1beta1.FrontierService/GetServiceUserJWK"
	// FrontierServiceDeleteServiceUserJWKProcedure is the fully-qualified name of the FrontierService's
	// DeleteServiceUserJWK RPC.
	FrontierServiceDeleteServiceUserJWKProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserJWK"
	// FrontierServiceCreateServiceUserCredentialProcedure is the fully-qualified name of the
	// FrontierService's CreateServiceUserCredential RPC.
	FrontierServiceCreateServiceUserCredentialProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserCredential"
	// FrontierServiceListServiceUserCredentialsProcedure is the fully-qualified name of the
	// FrontierService's ListServiceUserCredentials RPC.
	FrontierServiceListServiceUserCredentialsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserCredentials"
	// FrontierServiceDeleteServiceUserCredentialProcedure is the fully-qualified name of the
	// FrontierService's DeleteServiceUserCredential RPC.
	FrontierServiceDeleteServiceUserCredentialProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserCredential"
	// FrontierServiceCreateServiceUserTokenProcedure is the fully-qualified name of the
	// FrontierService's CreateServiceUserToken RPC.
	FrontierServiceCreateServiceUserTokenProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserToken"
	// FrontierServiceListServiceUserTokensProcedure is the fully-qualified name of the
	// FrontierService's ListServiceUserTokens RPC.
	FrontierServiceListServiceUserTokensProcedure = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserTokens"
	// FrontierServiceDeleteServiceUserTokenProcedure is the fully-qualified name of the
	// FrontierService's DeleteServiceUserToken RPC.
	FrontierServiceDeleteServiceUserTokenProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserToken"
	// FrontierServiceListServiceUserProjectsProcedure is the fully-qualified name of the
	// FrontierService's ListServiceUserProjects RPC.
	FrontierServiceListServiceUserProjectsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserProjects"
	// FrontierServiceListOrganizationGroupsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationGroups RPC.
	FrontierServiceListOrganizationGroupsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationGroups"
	// FrontierServiceCreateGroupProcedure is the fully-qualified name of the FrontierService's
	// CreateGroup RPC.
	FrontierServiceCreateGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateGroup"
	// FrontierServiceGetGroupProcedure is the fully-qualified name of the FrontierService's GetGroup
	// RPC.
	FrontierServiceGetGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/GetGroup"
	// FrontierServiceUpdateGroupProcedure is the fully-qualified name of the FrontierService's
	// UpdateGroup RPC.
	FrontierServiceUpdateGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateGroup"
	// FrontierServiceListGroupUsersProcedure is the fully-qualified name of the FrontierService's
	// ListGroupUsers RPC.
	FrontierServiceListGroupUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListGroupUsers"
	// FrontierServiceAddGroupUsersProcedure is the fully-qualified name of the FrontierService's
	// AddGroupUsers RPC.
	FrontierServiceAddGroupUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/AddGroupUsers"
	// FrontierServiceRemoveGroupUserProcedure is the fully-qualified name of the FrontierService's
	// RemoveGroupUser RPC.
	FrontierServiceRemoveGroupUserProcedure = "/raystack.frontier.v1beta1.FrontierService/RemoveGroupUser"
	// FrontierServiceEnableGroupProcedure is the fully-qualified name of the FrontierService's
	// EnableGroup RPC.
	FrontierServiceEnableGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/EnableGroup"
	// FrontierServiceDisableGroupProcedure is the fully-qualified name of the FrontierService's
	// DisableGroup RPC.
	FrontierServiceDisableGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/DisableGroup"
	// FrontierServiceDeleteGroupProcedure is the fully-qualified name of the FrontierService's
	// DeleteGroup RPC.
	FrontierServiceDeleteGroupProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteGroup"
	// FrontierServiceListRolesProcedure is the fully-qualified name of the FrontierService's ListRoles
	// RPC.
	FrontierServiceListRolesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListRoles"
	// FrontierServiceListOrganizationRolesProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationRoles RPC.
	FrontierServiceListOrganizationRolesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationRoles"
	// FrontierServiceCreateOrganizationRoleProcedure is the fully-qualified name of the
	// FrontierService's CreateOrganizationRole RPC.
	FrontierServiceCreateOrganizationRoleProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationRole"
	// FrontierServiceGetOrganizationRoleProcedure is the fully-qualified name of the FrontierService's
	// GetOrganizationRole RPC.
	FrontierServiceGetOrganizationRoleProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationRole"
	// FrontierServiceUpdateOrganizationRoleProcedure is the fully-qualified name of the
	// FrontierService's UpdateOrganizationRole RPC.
	FrontierServiceUpdateOrganizationRoleProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateOrganizationRole"
	// FrontierServiceDeleteOrganizationRoleProcedure is the fully-qualified name of the
	// FrontierService's DeleteOrganizationRole RPC.
	FrontierServiceDeleteOrganizationRoleProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationRole"
	// FrontierServiceListOrganizationsProcedure is the fully-qualified name of the FrontierService's
	// ListOrganizations RPC.
	FrontierServiceListOrganizationsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizations"
	// FrontierServiceCreateOrganizationProcedure is the fully-qualified name of the FrontierService's
	// CreateOrganization RPC.
	FrontierServiceCreateOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganization"
	// FrontierServiceGetOrganizationProcedure is the fully-qualified name of the FrontierService's
	// GetOrganization RPC.
	FrontierServiceGetOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganization"
	// FrontierServiceUpdateOrganizationProcedure is the fully-qualified name of the FrontierService's
	// UpdateOrganization RPC.
	FrontierServiceUpdateOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateOrganization"
	// FrontierServiceListOrganizationProjectsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationProjects RPC.
	FrontierServiceListOrganizationProjectsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationProjects"
	// FrontierServiceListOrganizationAdminsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationAdmins RPC.
	FrontierServiceListOrganizationAdminsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationAdmins"
	// FrontierServiceListOrganizationUsersProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationUsers RPC.
	FrontierServiceListOrganizationUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationUsers"
	// FrontierServiceAddOrganizationUsersProcedure is the fully-qualified name of the FrontierService's
	// AddOrganizationUsers RPC.
	FrontierServiceAddOrganizationUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/AddOrganizationUsers"
	// FrontierServiceRemoveOrganizationUserProcedure is the fully-qualified name of the
	// FrontierService's RemoveOrganizationUser RPC.
	FrontierServiceRemoveOrganizationUserProcedure = "/raystack.frontier.v1beta1.FrontierService/RemoveOrganizationUser"
	// FrontierServiceGetOrganizationKycProcedure is the fully-qualified name of the FrontierService's
	// GetOrganizationKyc RPC.
	FrontierServiceGetOrganizationKycProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationKyc"
	// FrontierServiceListOrganizationServiceUsersProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationServiceUsers RPC.
	FrontierServiceListOrganizationServiceUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationServiceUsers"
	// FrontierServiceListOrganizationInvitationsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationInvitations RPC.
	FrontierServiceListOrganizationInvitationsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationInvitations"
	// FrontierServiceCreateOrganizationInvitationProcedure is the fully-qualified name of the
	// FrontierService's CreateOrganizationInvitation RPC.
	FrontierServiceCreateOrganizationInvitationProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationInvitation"
	// FrontierServiceGetOrganizationInvitationProcedure is the fully-qualified name of the
	// FrontierService's GetOrganizationInvitation RPC.
	FrontierServiceGetOrganizationInvitationProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationInvitation"
	// FrontierServiceAcceptOrganizationInvitationProcedure is the fully-qualified name of the
	// FrontierService's AcceptOrganizationInvitation RPC.
	FrontierServiceAcceptOrganizationInvitationProcedure = "/raystack.frontier.v1beta1.FrontierService/AcceptOrganizationInvitation"
	// FrontierServiceDeleteOrganizationInvitationProcedure is the fully-qualified name of the
	// FrontierService's DeleteOrganizationInvitation RPC.
	FrontierServiceDeleteOrganizationInvitationProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationInvitation"
	// FrontierServiceListOrganizationDomainsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationDomains RPC.
	FrontierServiceListOrganizationDomainsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationDomains"
	// FrontierServiceCreateOrganizationDomainProcedure is the fully-qualified name of the
	// FrontierService's CreateOrganizationDomain RPC.
	FrontierServiceCreateOrganizationDomainProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationDomain"
	// FrontierServiceDeleteOrganizationDomainProcedure is the fully-qualified name of the
	// FrontierService's DeleteOrganizationDomain RPC.
	FrontierServiceDeleteOrganizationDomainProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationDomain"
	// FrontierServiceGetOrganizationDomainProcedure is the fully-qualified name of the
	// FrontierService's GetOrganizationDomain RPC.
	FrontierServiceGetOrganizationDomainProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationDomain"
	// FrontierServiceVerifyOrganizationDomainProcedure is the fully-qualified name of the
	// FrontierService's VerifyOrganizationDomain RPC.
	FrontierServiceVerifyOrganizationDomainProcedure = "/raystack.frontier.v1beta1.FrontierService/VerifyOrganizationDomain"
	// FrontierServiceJoinOrganizationProcedure is the fully-qualified name of the FrontierService's
	// JoinOrganization RPC.
	FrontierServiceJoinOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/JoinOrganization"
	// FrontierServiceEnableOrganizationProcedure is the fully-qualified name of the FrontierService's
	// EnableOrganization RPC.
	FrontierServiceEnableOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/EnableOrganization"
	// FrontierServiceDisableOrganizationProcedure is the fully-qualified name of the FrontierService's
	// DisableOrganization RPC.
	FrontierServiceDisableOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/DisableOrganization"
	// FrontierServiceDeleteOrganizationProcedure is the fully-qualified name of the FrontierService's
	// DeleteOrganization RPC.
	FrontierServiceDeleteOrganizationProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganization"
	// FrontierServiceCreateProjectProcedure is the fully-qualified name of the FrontierService's
	// CreateProject RPC.
	FrontierServiceCreateProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateProject"
	// FrontierServiceGetProjectProcedure is the fully-qualified name of the FrontierService's
	// GetProject RPC.
	FrontierServiceGetProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/GetProject"
	// FrontierServiceUpdateProjectProcedure is the fully-qualified name of the FrontierService's
	// UpdateProject RPC.
	FrontierServiceUpdateProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateProject"
	// FrontierServiceListProjectAdminsProcedure is the fully-qualified name of the FrontierService's
	// ListProjectAdmins RPC.
	FrontierServiceListProjectAdminsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectAdmins"
	// FrontierServiceListProjectUsersProcedure is the fully-qualified name of the FrontierService's
	// ListProjectUsers RPC.
	FrontierServiceListProjectUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectUsers"
	// FrontierServiceListProjectServiceUsersProcedure is the fully-qualified name of the
	// FrontierService's ListProjectServiceUsers RPC.
	FrontierServiceListProjectServiceUsersProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectServiceUsers"
	// FrontierServiceListProjectGroupsProcedure is the fully-qualified name of the FrontierService's
	// ListProjectGroups RPC.
	FrontierServiceListProjectGroupsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectGroups"
	// FrontierServiceEnableProjectProcedure is the fully-qualified name of the FrontierService's
	// EnableProject RPC.
	FrontierServiceEnableProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/EnableProject"
	// FrontierServiceDisableProjectProcedure is the fully-qualified name of the FrontierService's
	// DisableProject RPC.
	FrontierServiceDisableProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/DisableProject"
	// FrontierServiceDeleteProjectProcedure is the fully-qualified name of the FrontierService's
	// DeleteProject RPC.
	FrontierServiceDeleteProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteProject"
	// FrontierServiceCreatePolicyProcedure is the fully-qualified name of the FrontierService's
	// CreatePolicy RPC.
	FrontierServiceCreatePolicyProcedure = "/raystack.frontier.v1beta1.FrontierService/CreatePolicy"
	// FrontierServiceGetPolicyProcedure is the fully-qualified name of the FrontierService's GetPolicy
	// RPC.
	FrontierServiceGetPolicyProcedure = "/raystack.frontier.v1beta1.FrontierService/GetPolicy"
	// FrontierServiceListPoliciesProcedure is the fully-qualified name of the FrontierService's
	// ListPolicies RPC.
	FrontierServiceListPoliciesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListPolicies"
	// FrontierServiceUpdatePolicyProcedure is the fully-qualified name of the FrontierService's
	// UpdatePolicy RPC.
	FrontierServiceUpdatePolicyProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdatePolicy"
	// FrontierServiceDeletePolicyProcedure is the fully-qualified name of the FrontierService's
	// DeletePolicy RPC.
	FrontierServiceDeletePolicyProcedure = "/raystack.frontier.v1beta1.FrontierService/DeletePolicy"
	// FrontierServiceCreatePolicyForProjectProcedure is the fully-qualified name of the
	// FrontierService's CreatePolicyForProject RPC.
	FrontierServiceCreatePolicyForProjectProcedure = "/raystack.frontier.v1beta1.FrontierService/CreatePolicyForProject"
	// FrontierServiceCreateRelationProcedure is the fully-qualified name of the FrontierService's
	// CreateRelation RPC.
	FrontierServiceCreateRelationProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateRelation"
	// FrontierServiceGetRelationProcedure is the fully-qualified name of the FrontierService's
	// GetRelation RPC.
	FrontierServiceGetRelationProcedure = "/raystack.frontier.v1beta1.FrontierService/GetRelation"
	// FrontierServiceDeleteRelationProcedure is the fully-qualified name of the FrontierService's
	// DeleteRelation RPC.
	FrontierServiceDeleteRelationProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteRelation"
	// FrontierServiceListPermissionsProcedure is the fully-qualified name of the FrontierService's
	// ListPermissions RPC.
	FrontierServiceListPermissionsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListPermissions"
	// FrontierServiceGetPermissionProcedure is the fully-qualified name of the FrontierService's
	// GetPermission RPC.
	FrontierServiceGetPermissionProcedure = "/raystack.frontier.v1beta1.FrontierService/GetPermission"
	// FrontierServiceListNamespacesProcedure is the fully-qualified name of the FrontierService's
	// ListNamespaces RPC.
	FrontierServiceListNamespacesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListNamespaces"
	// FrontierServiceGetNamespaceProcedure is the fully-qualified name of the FrontierService's
	// GetNamespace RPC.
	FrontierServiceGetNamespaceProcedure = "/raystack.frontier.v1beta1.FrontierService/GetNamespace"
	// FrontierServiceListProjectResourcesProcedure is the fully-qualified name of the FrontierService's
	// ListProjectResources RPC.
	FrontierServiceListProjectResourcesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectResources"
	// FrontierServiceCreateProjectResourceProcedure is the fully-qualified name of the
	// FrontierService's CreateProjectResource RPC.
	FrontierServiceCreateProjectResourceProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateProjectResource"
	// FrontierServiceGetProjectResourceProcedure is the fully-qualified name of the FrontierService's
	// GetProjectResource RPC.
	FrontierServiceGetProjectResourceProcedure = "/raystack.frontier.v1beta1.FrontierService/GetProjectResource"
	// FrontierServiceUpdateProjectResourceProcedure is the fully-qualified name of the
	// FrontierService's UpdateProjectResource RPC.
	FrontierServiceUpdateProjectResourceProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateProjectResource"
	// FrontierServiceDeleteProjectResourceProcedure is the fully-qualified name of the
	// FrontierService's DeleteProjectResource RPC.
	FrontierServiceDeleteProjectResourceProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteProjectResource"
	// FrontierServiceCheckResourcePermissionProcedure is the fully-qualified name of the
	// FrontierService's CheckResourcePermission RPC.
	FrontierServiceCheckResourcePermissionProcedure = "/raystack.frontier.v1beta1.FrontierService/CheckResourcePermission"
	// FrontierServiceBatchCheckPermissionProcedure is the fully-qualified name of the FrontierService's
	// BatchCheckPermission RPC.
	FrontierServiceBatchCheckPermissionProcedure = "/raystack.frontier.v1beta1.FrontierService/BatchCheckPermission"
	// FrontierServiceGetJWKsProcedure is the fully-qualified name of the FrontierService's GetJWKs RPC.
	FrontierServiceGetJWKsProcedure = "/raystack.frontier.v1beta1.FrontierService/GetJWKs"
	// FrontierServiceListAuthStrategiesProcedure is the fully-qualified name of the FrontierService's
	// ListAuthStrategies RPC.
	FrontierServiceListAuthStrategiesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListAuthStrategies"
	// FrontierServiceAuthenticateProcedure is the fully-qualified name of the FrontierService's
	// Authenticate RPC.
	FrontierServiceAuthenticateProcedure = "/raystack.frontier.v1beta1.FrontierService/Authenticate"
	// FrontierServiceAuthCallbackProcedure is the fully-qualified name of the FrontierService's
	// AuthCallback RPC.
	FrontierServiceAuthCallbackProcedure = "/raystack.frontier.v1beta1.FrontierService/AuthCallback"
	// FrontierServiceAuthTokenProcedure is the fully-qualified name of the FrontierService's AuthToken
	// RPC.
	FrontierServiceAuthTokenProcedure = "/raystack.frontier.v1beta1.FrontierService/AuthToken"
	// FrontierServiceAuthLogoutProcedure is the fully-qualified name of the FrontierService's
	// AuthLogout RPC.
	FrontierServiceAuthLogoutProcedure = "/raystack.frontier.v1beta1.FrontierService/AuthLogout"
	// FrontierServiceListMetaSchemasProcedure is the fully-qualified name of the FrontierService's
	// ListMetaSchemas RPC.
	FrontierServiceListMetaSchemasProcedure = "/raystack.frontier.v1beta1.FrontierService/ListMetaSchemas"
	// FrontierServiceCreateMetaSchemaProcedure is the fully-qualified name of the FrontierService's
	// CreateMetaSchema RPC.
	FrontierServiceCreateMetaSchemaProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateMetaSchema"
	// FrontierServiceGetMetaSchemaProcedure is the fully-qualified name of the FrontierService's
	// GetMetaSchema RPC.
	FrontierServiceGetMetaSchemaProcedure = "/raystack.frontier.v1beta1.FrontierService/GetMetaSchema"
	// FrontierServiceUpdateMetaSchemaProcedure is the fully-qualified name of the FrontierService's
	// UpdateMetaSchema RPC.
	FrontierServiceUpdateMetaSchemaProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateMetaSchema"
	// FrontierServiceDeleteMetaSchemaProcedure is the fully-qualified name of the FrontierService's
	// DeleteMetaSchema RPC.
	FrontierServiceDeleteMetaSchemaProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteMetaSchema"
	// FrontierServiceListOrganizationAuditLogsProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationAuditLogs RPC.
	FrontierServiceListOrganizationAuditLogsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationAuditLogs"
	// FrontierServiceCreateOrganizationAuditLogsProcedure is the fully-qualified name of the
	// FrontierService's CreateOrganizationAuditLogs RPC.
	FrontierServiceCreateOrganizationAuditLogsProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationAuditLogs"
	// FrontierServiceGetOrganizationAuditLogProcedure is the fully-qualified name of the
	// FrontierService's GetOrganizationAuditLog RPC.
	FrontierServiceGetOrganizationAuditLogProcedure = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationAuditLog"
	// FrontierServiceDescribePreferencesProcedure is the fully-qualified name of the FrontierService's
	// DescribePreferences RPC.
	FrontierServiceDescribePreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/DescribePreferences"
	// FrontierServiceCreateOrganizationPreferencesProcedure is the fully-qualified name of the
	// FrontierService's CreateOrganizationPreferences RPC.
	FrontierServiceCreateOrganizationPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationPreferences"
	// FrontierServiceListOrganizationPreferencesProcedure is the fully-qualified name of the
	// FrontierService's ListOrganizationPreferences RPC.
	FrontierServiceListOrganizationPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationPreferences"
	// FrontierServiceCreateProjectPreferencesProcedure is the fully-qualified name of the
	// FrontierService's CreateProjectPreferences RPC.
	FrontierServiceCreateProjectPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateProjectPreferences"
	// FrontierServiceListProjectPreferencesProcedure is the fully-qualified name of the
	// FrontierService's ListProjectPreferences RPC.
	FrontierServiceListProjectPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProjectPreferences"
	// FrontierServiceCreateGroupPreferencesProcedure is the fully-qualified name of the
	// FrontierService's CreateGroupPreferences RPC.
	FrontierServiceCreateGroupPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateGroupPreferences"
	// FrontierServiceListGroupPreferencesProcedure is the fully-qualified name of the FrontierService's
	// ListGroupPreferences RPC.
	FrontierServiceListGroupPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListGroupPreferences"
	// FrontierServiceCreateUserPreferencesProcedure is the fully-qualified name of the
	// FrontierService's CreateUserPreferences RPC.
	FrontierServiceCreateUserPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateUserPreferences"
	// FrontierServiceListUserPreferencesProcedure is the fully-qualified name of the FrontierService's
	// ListUserPreferences RPC.
	FrontierServiceListUserPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListUserPreferences"
	// FrontierServiceCreateCurrentUserPreferencesProcedure is the fully-qualified name of the
	// FrontierService's CreateCurrentUserPreferences RPC.
	FrontierServiceCreateCurrentUserPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateCurrentUserPreferences"
	// FrontierServiceListCurrentUserPreferencesProcedure is the fully-qualified name of the
	// FrontierService's ListCurrentUserPreferences RPC.
	FrontierServiceListCurrentUserPreferencesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserPreferences"
	// FrontierServiceCreateBillingAccountProcedure is the fully-qualified name of the FrontierService's
	// CreateBillingAccount RPC.
	FrontierServiceCreateBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateBillingAccount"
	// FrontierServiceGetBillingAccountProcedure is the fully-qualified name of the FrontierService's
	// GetBillingAccount RPC.
	FrontierServiceGetBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/GetBillingAccount"
	// FrontierServiceUpdateBillingAccountProcedure is the fully-qualified name of the FrontierService's
	// UpdateBillingAccount RPC.
	FrontierServiceUpdateBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateBillingAccount"
	// FrontierServiceRegisterBillingAccountProcedure is the fully-qualified name of the
	// FrontierService's RegisterBillingAccount RPC.
	FrontierServiceRegisterBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/RegisterBillingAccount"
	// FrontierServiceListBillingAccountsProcedure is the fully-qualified name of the FrontierService's
	// ListBillingAccounts RPC.
	FrontierServiceListBillingAccountsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListBillingAccounts"
	// FrontierServiceDeleteBillingAccountProcedure is the fully-qualified name of the FrontierService's
	// DeleteBillingAccount RPC.
	FrontierServiceDeleteBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/DeleteBillingAccount"
	// FrontierServiceEnableBillingAccountProcedure is the fully-qualified name of the FrontierService's
	// EnableBillingAccount RPC.
	FrontierServiceEnableBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/EnableBillingAccount"
	// FrontierServiceDisableBillingAccountProcedure is the fully-qualified name of the
	// FrontierService's DisableBillingAccount RPC.
	FrontierServiceDisableBillingAccountProcedure = "/raystack.frontier.v1beta1.FrontierService/DisableBillingAccount"
	// FrontierServiceGetBillingBalanceProcedure is the fully-qualified name of the FrontierService's
	// GetBillingBalance RPC.
	FrontierServiceGetBillingBalanceProcedure = "/raystack.frontier.v1beta1.FrontierService/GetBillingBalance"
	// FrontierServiceHasTrialedProcedure is the fully-qualified name of the FrontierService's
	// HasTrialed RPC.
	FrontierServiceHasTrialedProcedure = "/raystack.frontier.v1beta1.FrontierService/HasTrialed"
	// FrontierServiceGetSubscriptionProcedure is the fully-qualified name of the FrontierService's
	// GetSubscription RPC.
	FrontierServiceGetSubscriptionProcedure = "/raystack.frontier.v1beta1.FrontierService/GetSubscription"
	// FrontierServiceCancelSubscriptionProcedure is the fully-qualified name of the FrontierService's
	// CancelSubscription RPC.
	FrontierServiceCancelSubscriptionProcedure = "/raystack.frontier.v1beta1.FrontierService/CancelSubscription"
	// FrontierServiceListSubscriptionsProcedure is the fully-qualified name of the FrontierService's
	// ListSubscriptions RPC.
	FrontierServiceListSubscriptionsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListSubscriptions"
	// FrontierServiceChangeSubscriptionProcedure is the fully-qualified name of the FrontierService's
	// ChangeSubscription RPC.
	FrontierServiceChangeSubscriptionProcedure = "/raystack.frontier.v1beta1.FrontierService/ChangeSubscription"
	// FrontierServiceUpdateSubscriptionProcedure is the fully-qualified name of the FrontierService's
	// UpdateSubscription RPC.
	FrontierServiceUpdateSubscriptionProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateSubscription"
	// FrontierServiceCreateProductProcedure is the fully-qualified name of the FrontierService's
	// CreateProduct RPC.
	FrontierServiceCreateProductProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateProduct"
	// FrontierServiceGetProductProcedure is the fully-qualified name of the FrontierService's
	// GetProduct RPC.
	FrontierServiceGetProductProcedure = "/raystack.frontier.v1beta1.FrontierService/GetProduct"
	// FrontierServiceListProductsProcedure is the fully-qualified name of the FrontierService's
	// ListProducts RPC.
	FrontierServiceListProductsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListProducts"
	// FrontierServiceUpdateProductProcedure is the fully-qualified name of the FrontierService's
	// UpdateProduct RPC.
	FrontierServiceUpdateProductProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateProduct"
	// FrontierServiceCreateFeatureProcedure is the fully-qualified name of the FrontierService's
	// CreateFeature RPC.
	FrontierServiceCreateFeatureProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateFeature"
	// FrontierServiceGetFeatureProcedure is the fully-qualified name of the FrontierService's
	// GetFeature RPC.
	FrontierServiceGetFeatureProcedure = "/raystack.frontier.v1beta1.FrontierService/GetFeature"
	// FrontierServiceUpdateFeatureProcedure is the fully-qualified name of the FrontierService's
	// UpdateFeature RPC.
	FrontierServiceUpdateFeatureProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdateFeature"
	// FrontierServiceListFeaturesProcedure is the fully-qualified name of the FrontierService's
	// ListFeatures RPC.
	FrontierServiceListFeaturesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListFeatures"
	// FrontierServiceCreatePlanProcedure is the fully-qualified name of the FrontierService's
	// CreatePlan RPC.
	FrontierServiceCreatePlanProcedure = "/raystack.frontier.v1beta1.FrontierService/CreatePlan"
	// FrontierServiceListPlansProcedure is the fully-qualified name of the FrontierService's ListPlans
	// RPC.
	FrontierServiceListPlansProcedure = "/raystack.frontier.v1beta1.FrontierService/ListPlans"
	// FrontierServiceGetPlanProcedure is the fully-qualified name of the FrontierService's GetPlan RPC.
	FrontierServiceGetPlanProcedure = "/raystack.frontier.v1beta1.FrontierService/GetPlan"
	// FrontierServiceUpdatePlanProcedure is the fully-qualified name of the FrontierService's
	// UpdatePlan RPC.
	FrontierServiceUpdatePlanProcedure = "/raystack.frontier.v1beta1.FrontierService/UpdatePlan"
	// FrontierServiceCreateCheckoutProcedure is the fully-qualified name of the FrontierService's
	// CreateCheckout RPC.
	FrontierServiceCreateCheckoutProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateCheckout"
	// FrontierServiceListCheckoutsProcedure is the fully-qualified name of the FrontierService's
	// ListCheckouts RPC.
	FrontierServiceListCheckoutsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListCheckouts"
	// FrontierServiceGetCheckoutProcedure is the fully-qualified name of the FrontierService's
	// GetCheckout RPC.
	FrontierServiceGetCheckoutProcedure = "/raystack.frontier.v1beta1.FrontierService/GetCheckout"
	// FrontierServiceCheckFeatureEntitlementProcedure is the fully-qualified name of the
	// FrontierService's CheckFeatureEntitlement RPC.
	FrontierServiceCheckFeatureEntitlementProcedure = "/raystack.frontier.v1beta1.FrontierService/CheckFeatureEntitlement"
	// FrontierServiceCreateBillingUsageProcedure is the fully-qualified name of the FrontierService's
	// CreateBillingUsage RPC.
	FrontierServiceCreateBillingUsageProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateBillingUsage"
	// FrontierServiceListBillingTransactionsProcedure is the fully-qualified name of the
	// FrontierService's ListBillingTransactions RPC.
	FrontierServiceListBillingTransactionsProcedure = "/raystack.frontier.v1beta1.FrontierService/ListBillingTransactions"
	// FrontierServiceTotalDebitedTransactionsProcedure is the fully-qualified name of the
	// FrontierService's TotalDebitedTransactions RPC.
	FrontierServiceTotalDebitedTransactionsProcedure = "/raystack.frontier.v1beta1.FrontierService/TotalDebitedTransactions"
	// FrontierServiceListInvoicesProcedure is the fully-qualified name of the FrontierService's
	// ListInvoices RPC.
	FrontierServiceListInvoicesProcedure = "/raystack.frontier.v1beta1.FrontierService/ListInvoices"
	// FrontierServiceGetUpcomingInvoiceProcedure is the fully-qualified name of the FrontierService's
	// GetUpcomingInvoice RPC.
	FrontierServiceGetUpcomingInvoiceProcedure = "/raystack.frontier.v1beta1.FrontierService/GetUpcomingInvoice"
	// FrontierServiceBillingWebhookCallbackProcedure is the fully-qualified name of the
	// FrontierService's BillingWebhookCallback RPC.
	FrontierServiceBillingWebhookCallbackProcedure = "/raystack.frontier.v1beta1.FrontierService/BillingWebhookCallback"
	// FrontierServiceCreateProspectPublicProcedure is the fully-qualified name of the FrontierService's
	// CreateProspectPublic RPC.
	FrontierServiceCreateProspectPublicProcedure = "/raystack.frontier.v1beta1.FrontierService/CreateProspectPublic"
)

// FrontierServiceClient is a client for the raystack.frontier.v1beta1.FrontierService service.
type FrontierServiceClient interface {
	// Users
	ListUsers(context.Context, *connect_go.Request[v1beta1.ListUsersRequest]) (*connect_go.Response[v1beta1.ListUsersResponse], error)
	CreateUser(context.Context, *connect_go.Request[v1beta1.CreateUserRequest]) (*connect_go.Response[v1beta1.CreateUserResponse], error)
	GetUser(context.Context, *connect_go.Request[v1beta1.GetUserRequest]) (*connect_go.Response[v1beta1.GetUserResponse], error)
	ListUserGroups(context.Context, *connect_go.Request[v1beta1.ListUserGroupsRequest]) (*connect_go.Response[v1beta1.ListUserGroupsResponse], error)
	ListCurrentUserGroups(context.Context, *connect_go.Request[v1beta1.ListCurrentUserGroupsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserGroupsResponse], error)
	GetCurrentUser(context.Context, *connect_go.Request[v1beta1.GetCurrentUserRequest]) (*connect_go.Response[v1beta1.GetCurrentUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[v1beta1.UpdateUserRequest]) (*connect_go.Response[v1beta1.UpdateUserResponse], error)
	UpdateCurrentUser(context.Context, *connect_go.Request[v1beta1.UpdateCurrentUserRequest]) (*connect_go.Response[v1beta1.UpdateCurrentUserResponse], error)
	EnableUser(context.Context, *connect_go.Request[v1beta1.EnableUserRequest]) (*connect_go.Response[v1beta1.EnableUserResponse], error)
	DisableUser(context.Context, *connect_go.Request[v1beta1.DisableUserRequest]) (*connect_go.Response[v1beta1.DisableUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[v1beta1.DeleteUserRequest]) (*connect_go.Response[v1beta1.DeleteUserResponse], error)
	ListOrganizationsByUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByUserResponse], error)
	ListOrganizationsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByCurrentUserResponse], error)
	ListProjectsByUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByUserResponse], error)
	ListProjectsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByCurrentUserResponse], error)
	ListUserInvitations(context.Context, *connect_go.Request[v1beta1.ListUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListUserInvitationsResponse], error)
	ListCurrentUserInvitations(context.Context, *connect_go.Request[v1beta1.ListCurrentUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserInvitationsResponse], error)
	// ServiceUser
	ListServiceUsers(context.Context, *connect_go.Request[v1beta1.ListServiceUsersRequest]) (*connect_go.Response[v1beta1.ListServiceUsersResponse], error)
	CreateServiceUser(context.Context, *connect_go.Request[v1beta1.CreateServiceUserRequest]) (*connect_go.Response[v1beta1.CreateServiceUserResponse], error)
	GetServiceUser(context.Context, *connect_go.Request[v1beta1.GetServiceUserRequest]) (*connect_go.Response[v1beta1.GetServiceUserResponse], error)
	DeleteServiceUser(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserResponse], error)
	CreateServiceUserJWK(context.Context, *connect_go.Request[v1beta1.CreateServiceUserJWKRequest]) (*connect_go.Response[v1beta1.CreateServiceUserJWKResponse], error)
	ListServiceUserJWKs(context.Context, *connect_go.Request[v1beta1.ListServiceUserJWKsRequest]) (*connect_go.Response[v1beta1.ListServiceUserJWKsResponse], error)
	GetServiceUserJWK(context.Context, *connect_go.Request[v1beta1.GetServiceUserJWKRequest]) (*connect_go.Response[v1beta1.GetServiceUserJWKResponse], error)
	DeleteServiceUserJWK(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserJWKRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserJWKResponse], error)
	CreateServiceUserCredential(context.Context, *connect_go.Request[v1beta1.CreateServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.CreateServiceUserCredentialResponse], error)
	ListServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.ListServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.ListServiceUserCredentialsResponse], error)
	DeleteServiceUserCredential(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserCredentialResponse], error)
	CreateServiceUserToken(context.Context, *connect_go.Request[v1beta1.CreateServiceUserTokenRequest]) (*connect_go.Response[v1beta1.CreateServiceUserTokenResponse], error)
	ListServiceUserTokens(context.Context, *connect_go.Request[v1beta1.ListServiceUserTokensRequest]) (*connect_go.Response[v1beta1.ListServiceUserTokensResponse], error)
	DeleteServiceUserToken(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserTokenRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserTokenResponse], error)
	ListServiceUserProjects(context.Context, *connect_go.Request[v1beta1.ListServiceUserProjectsRequest]) (*connect_go.Response[v1beta1.ListServiceUserProjectsResponse], error)
	// Group
	ListOrganizationGroups(context.Context, *connect_go.Request[v1beta1.ListOrganizationGroupsRequest]) (*connect_go.Response[v1beta1.ListOrganizationGroupsResponse], error)
	CreateGroup(context.Context, *connect_go.Request[v1beta1.CreateGroupRequest]) (*connect_go.Response[v1beta1.CreateGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[v1beta1.GetGroupRequest]) (*connect_go.Response[v1beta1.GetGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[v1beta1.UpdateGroupRequest]) (*connect_go.Response[v1beta1.UpdateGroupResponse], error)
	ListGroupUsers(context.Context, *connect_go.Request[v1beta1.ListGroupUsersRequest]) (*connect_go.Response[v1beta1.ListGroupUsersResponse], error)
	AddGroupUsers(context.Context, *connect_go.Request[v1beta1.AddGroupUsersRequest]) (*connect_go.Response[v1beta1.AddGroupUsersResponse], error)
	RemoveGroupUser(context.Context, *connect_go.Request[v1beta1.RemoveGroupUserRequest]) (*connect_go.Response[v1beta1.RemoveGroupUserResponse], error)
	EnableGroup(context.Context, *connect_go.Request[v1beta1.EnableGroupRequest]) (*connect_go.Response[v1beta1.EnableGroupResponse], error)
	DisableGroup(context.Context, *connect_go.Request[v1beta1.DisableGroupRequest]) (*connect_go.Response[v1beta1.DisableGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[v1beta1.DeleteGroupRequest]) (*connect_go.Response[v1beta1.DeleteGroupResponse], error)
	// Roles
	ListRoles(context.Context, *connect_go.Request[v1beta1.ListRolesRequest]) (*connect_go.Response[v1beta1.ListRolesResponse], error)
	ListOrganizationRoles(context.Context, *connect_go.Request[v1beta1.ListOrganizationRolesRequest]) (*connect_go.Response[v1beta1.ListOrganizationRolesResponse], error)
	CreateOrganizationRole(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.CreateOrganizationRoleResponse], error)
	GetOrganizationRole(context.Context, *connect_go.Request[v1beta1.GetOrganizationRoleRequest]) (*connect_go.Response[v1beta1.GetOrganizationRoleResponse], error)
	UpdateOrganizationRole(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationRoleResponse], error)
	DeleteOrganizationRole(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRoleRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationRoleResponse], error)
	// Organizations
	ListOrganizations(context.Context, *connect_go.Request[v1beta1.ListOrganizationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationsResponse], error)
	CreateOrganization(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect_go.Request[v1beta1.GetOrganizationRequest]) (*connect_go.Response[v1beta1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationResponse], error)
	ListOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ListOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.ListOrganizationProjectsResponse], error)
	ListOrganizationAdmins(context.Context, *connect_go.Request[v1beta1.ListOrganizationAdminsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAdminsResponse], error)
	ListOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationUsersResponse], error)
	AddOrganizationUsers(context.Context, *connect_go.Request[v1beta1.AddOrganizationUsersRequest]) (*connect_go.Response[v1beta1.AddOrganizationUsersResponse], error)
	RemoveOrganizationUser(context.Context, *connect_go.Request[v1beta1.RemoveOrganizationUserRequest]) (*connect_go.Response[v1beta1.RemoveOrganizationUserResponse], error)
	GetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.GetOrganizationKycRequest]) (*connect_go.Response[v1beta1.GetOrganizationKycResponse], error)
	// Deprecated: use ListServiceUsers instead
	ListOrganizationServiceUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationServiceUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationServiceUsersResponse], error)
	ListOrganizationInvitations(context.Context, *connect_go.Request[v1beta1.ListOrganizationInvitationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationInvitationsResponse], error)
	CreateOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.CreateOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationInvitationResponse], error)
	GetOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.GetOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.GetOrganizationInvitationResponse], error)
	AcceptOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.AcceptOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.AcceptOrganizationInvitationResponse], error)
	DeleteOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationInvitationResponse], error)
	ListOrganizationDomains(context.Context, *connect_go.Request[v1beta1.ListOrganizationDomainsRequest]) (*connect_go.Response[v1beta1.ListOrganizationDomainsResponse], error)
	CreateOrganizationDomain(context.Context, *connect_go.Request[v1beta1.CreateOrganizationDomainRequest]) (*connect_go.Response[v1beta1.CreateOrganizationDomainResponse], error)
	DeleteOrganizationDomain(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationDomainRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationDomainResponse], error)
	GetOrganizationDomain(context.Context, *connect_go.Request[v1beta1.GetOrganizationDomainRequest]) (*connect_go.Response[v1beta1.GetOrganizationDomainResponse], error)
	VerifyOrganizationDomain(context.Context, *connect_go.Request[v1beta1.VerifyOrganizationDomainRequest]) (*connect_go.Response[v1beta1.VerifyOrganizationDomainResponse], error)
	JoinOrganization(context.Context, *connect_go.Request[v1beta1.JoinOrganizationRequest]) (*connect_go.Response[v1beta1.JoinOrganizationResponse], error)
	EnableOrganization(context.Context, *connect_go.Request[v1beta1.EnableOrganizationRequest]) (*connect_go.Response[v1beta1.EnableOrganizationResponse], error)
	DisableOrganization(context.Context, *connect_go.Request[v1beta1.DisableOrganizationRequest]) (*connect_go.Response[v1beta1.DisableOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationResponse], error)
	// Projects
	CreateProject(context.Context, *connect_go.Request[v1beta1.CreateProjectRequest]) (*connect_go.Response[v1beta1.CreateProjectResponse], error)
	GetProject(context.Context, *connect_go.Request[v1beta1.GetProjectRequest]) (*connect_go.Response[v1beta1.GetProjectResponse], error)
	UpdateProject(context.Context, *connect_go.Request[v1beta1.UpdateProjectRequest]) (*connect_go.Response[v1beta1.UpdateProjectResponse], error)
	ListProjectAdmins(context.Context, *connect_go.Request[v1beta1.ListProjectAdminsRequest]) (*connect_go.Response[v1beta1.ListProjectAdminsResponse], error)
	ListProjectUsers(context.Context, *connect_go.Request[v1beta1.ListProjectUsersRequest]) (*connect_go.Response[v1beta1.ListProjectUsersResponse], error)
	ListProjectServiceUsers(context.Context, *connect_go.Request[v1beta1.ListProjectServiceUsersRequest]) (*connect_go.Response[v1beta1.ListProjectServiceUsersResponse], error)
	ListProjectGroups(context.Context, *connect_go.Request[v1beta1.ListProjectGroupsRequest]) (*connect_go.Response[v1beta1.ListProjectGroupsResponse], error)
	EnableProject(context.Context, *connect_go.Request[v1beta1.EnableProjectRequest]) (*connect_go.Response[v1beta1.EnableProjectResponse], error)
	DisableProject(context.Context, *connect_go.Request[v1beta1.DisableProjectRequest]) (*connect_go.Response[v1beta1.DisableProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[v1beta1.DeleteProjectRequest]) (*connect_go.Response[v1beta1.DeleteProjectResponse], error)
	// Policies
	CreatePolicy(context.Context, *connect_go.Request[v1beta1.CreatePolicyRequest]) (*connect_go.Response[v1beta1.CreatePolicyResponse], error)
	GetPolicy(context.Context, *connect_go.Request[v1beta1.GetPolicyRequest]) (*connect_go.Response[v1beta1.GetPolicyResponse], error)
	ListPolicies(context.Context, *connect_go.Request[v1beta1.ListPoliciesRequest]) (*connect_go.Response[v1beta1.ListPoliciesResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1beta1.UpdatePolicyRequest]) (*connect_go.Response[v1beta1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1beta1.DeletePolicyRequest]) (*connect_go.Response[v1beta1.DeletePolicyResponse], error)
	CreatePolicyForProject(context.Context, *connect_go.Request[v1beta1.CreatePolicyForProjectRequest]) (*connect_go.Response[v1beta1.CreatePolicyForProjectResponse], error)
	// Relations
	CreateRelation(context.Context, *connect_go.Request[v1beta1.CreateRelationRequest]) (*connect_go.Response[v1beta1.CreateRelationResponse], error)
	GetRelation(context.Context, *connect_go.Request[v1beta1.GetRelationRequest]) (*connect_go.Response[v1beta1.GetRelationResponse], error)
	DeleteRelation(context.Context, *connect_go.Request[v1beta1.DeleteRelationRequest]) (*connect_go.Response[v1beta1.DeleteRelationResponse], error)
	// Permissions
	ListPermissions(context.Context, *connect_go.Request[v1beta1.ListPermissionsRequest]) (*connect_go.Response[v1beta1.ListPermissionsResponse], error)
	GetPermission(context.Context, *connect_go.Request[v1beta1.GetPermissionRequest]) (*connect_go.Response[v1beta1.GetPermissionResponse], error)
	// Namespaces
	ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error)
	GetNamespace(context.Context, *connect_go.Request[v1beta1.GetNamespaceRequest]) (*connect_go.Response[v1beta1.GetNamespaceResponse], error)
	// Resources
	ListProjectResources(context.Context, *connect_go.Request[v1beta1.ListProjectResourcesRequest]) (*connect_go.Response[v1beta1.ListProjectResourcesResponse], error)
	CreateProjectResource(context.Context, *connect_go.Request[v1beta1.CreateProjectResourceRequest]) (*connect_go.Response[v1beta1.CreateProjectResourceResponse], error)
	GetProjectResource(context.Context, *connect_go.Request[v1beta1.GetProjectResourceRequest]) (*connect_go.Response[v1beta1.GetProjectResourceResponse], error)
	UpdateProjectResource(context.Context, *connect_go.Request[v1beta1.UpdateProjectResourceRequest]) (*connect_go.Response[v1beta1.UpdateProjectResourceResponse], error)
	DeleteProjectResource(context.Context, *connect_go.Request[v1beta1.DeleteProjectResourceRequest]) (*connect_go.Response[v1beta1.DeleteProjectResourceResponse], error)
	// Authz
	CheckResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckResourcePermissionResponse], error)
	BatchCheckPermission(context.Context, *connect_go.Request[v1beta1.BatchCheckPermissionRequest]) (*connect_go.Response[v1beta1.BatchCheckPermissionResponse], error)
	// Authn
	GetJWKs(context.Context, *connect_go.Request[v1beta1.GetJWKsRequest]) (*connect_go.Response[v1beta1.GetJWKsResponse], error)
	ListAuthStrategies(context.Context, *connect_go.Request[v1beta1.ListAuthStrategiesRequest]) (*connect_go.Response[v1beta1.ListAuthStrategiesResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1beta1.AuthenticateRequest]) (*connect_go.Response[v1beta1.AuthenticateResponse], error)
	AuthCallback(context.Context, *connect_go.Request[v1beta1.AuthCallbackRequest]) (*connect_go.Response[v1beta1.AuthCallbackResponse], error)
	AuthToken(context.Context, *connect_go.Request[v1beta1.AuthTokenRequest]) (*connect_go.Response[v1beta1.AuthTokenResponse], error)
	AuthLogout(context.Context, *connect_go.Request[v1beta1.AuthLogoutRequest]) (*connect_go.Response[v1beta1.AuthLogoutResponse], error)
	// MetaSchemas
	ListMetaSchemas(context.Context, *connect_go.Request[v1beta1.ListMetaSchemasRequest]) (*connect_go.Response[v1beta1.ListMetaSchemasResponse], error)
	CreateMetaSchema(context.Context, *connect_go.Request[v1beta1.CreateMetaSchemaRequest]) (*connect_go.Response[v1beta1.CreateMetaSchemaResponse], error)
	GetMetaSchema(context.Context, *connect_go.Request[v1beta1.GetMetaSchemaRequest]) (*connect_go.Response[v1beta1.GetMetaSchemaResponse], error)
	UpdateMetaSchema(context.Context, *connect_go.Request[v1beta1.UpdateMetaSchemaRequest]) (*connect_go.Response[v1beta1.UpdateMetaSchemaResponse], error)
	DeleteMetaSchema(context.Context, *connect_go.Request[v1beta1.DeleteMetaSchemaRequest]) (*connect_go.Response[v1beta1.DeleteMetaSchemaResponse], error)
	// Audit logs
	ListOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.ListOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAuditLogsResponse], error)
	CreateOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.CreateOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.CreateOrganizationAuditLogsResponse], error)
	GetOrganizationAuditLog(context.Context, *connect_go.Request[v1beta1.GetOrganizationAuditLogRequest]) (*connect_go.Response[v1beta1.GetOrganizationAuditLogResponse], error)
	// DescribePreferences list down all the supported preferences of entities
	DescribePreferences(context.Context, *connect_go.Request[v1beta1.DescribePreferencesRequest]) (*connect_go.Response[v1beta1.DescribePreferencesResponse], error)
	CreateOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.CreateOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.CreateOrganizationPreferencesResponse], error)
	ListOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.ListOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.ListOrganizationPreferencesResponse], error)
	CreateProjectPreferences(context.Context, *connect_go.Request[v1beta1.CreateProjectPreferencesRequest]) (*connect_go.Response[v1beta1.CreateProjectPreferencesResponse], error)
	ListProjectPreferences(context.Context, *connect_go.Request[v1beta1.ListProjectPreferencesRequest]) (*connect_go.Response[v1beta1.ListProjectPreferencesResponse], error)
	CreateGroupPreferences(context.Context, *connect_go.Request[v1beta1.CreateGroupPreferencesRequest]) (*connect_go.Response[v1beta1.CreateGroupPreferencesResponse], error)
	ListGroupPreferences(context.Context, *connect_go.Request[v1beta1.ListGroupPreferencesRequest]) (*connect_go.Response[v1beta1.ListGroupPreferencesResponse], error)
	CreateUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateUserPreferencesResponse], error)
	ListUserPreferences(context.Context, *connect_go.Request[v1beta1.ListUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListUserPreferencesResponse], error)
	CreateCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateCurrentUserPreferencesResponse], error)
	ListCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.ListCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListCurrentUserPreferencesResponse], error)
	// Billing account
	CreateBillingAccount(context.Context, *connect_go.Request[v1beta1.CreateBillingAccountRequest]) (*connect_go.Response[v1beta1.CreateBillingAccountResponse], error)
	GetBillingAccount(context.Context, *connect_go.Request[v1beta1.GetBillingAccountRequest]) (*connect_go.Response[v1beta1.GetBillingAccountResponse], error)
	UpdateBillingAccount(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountResponse], error)
	RegisterBillingAccount(context.Context, *connect_go.Request[v1beta1.RegisterBillingAccountRequest]) (*connect_go.Response[v1beta1.RegisterBillingAccountResponse], error)
	ListBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListBillingAccountsResponse], error)
	DeleteBillingAccount(context.Context, *connect_go.Request[v1beta1.DeleteBillingAccountRequest]) (*connect_go.Response[v1beta1.DeleteBillingAccountResponse], error)
	EnableBillingAccount(context.Context, *connect_go.Request[v1beta1.EnableBillingAccountRequest]) (*connect_go.Response[v1beta1.EnableBillingAccountResponse], error)
	DisableBillingAccount(context.Context, *connect_go.Request[v1beta1.DisableBillingAccountRequest]) (*connect_go.Response[v1beta1.DisableBillingAccountResponse], error)
	GetBillingBalance(context.Context, *connect_go.Request[v1beta1.GetBillingBalanceRequest]) (*connect_go.Response[v1beta1.GetBillingBalanceResponse], error)
	HasTrialed(context.Context, *connect_go.Request[v1beta1.HasTrialedRequest]) (*connect_go.Response[v1beta1.HasTrialedResponse], error)
	// Subscriptions
	GetSubscription(context.Context, *connect_go.Request[v1beta1.GetSubscriptionRequest]) (*connect_go.Response[v1beta1.GetSubscriptionResponse], error)
	CancelSubscription(context.Context, *connect_go.Request[v1beta1.CancelSubscriptionRequest]) (*connect_go.Response[v1beta1.CancelSubscriptionResponse], error)
	ListSubscriptions(context.Context, *connect_go.Request[v1beta1.ListSubscriptionsRequest]) (*connect_go.Response[v1beta1.ListSubscriptionsResponse], error)
	ChangeSubscription(context.Context, *connect_go.Request[v1beta1.ChangeSubscriptionRequest]) (*connect_go.Response[v1beta1.ChangeSubscriptionResponse], error)
	UpdateSubscription(context.Context, *connect_go.Request[v1beta1.UpdateSubscriptionRequest]) (*connect_go.Response[v1beta1.UpdateSubscriptionResponse], error)
	// Billing Product
	CreateProduct(context.Context, *connect_go.Request[v1beta1.CreateProductRequest]) (*connect_go.Response[v1beta1.CreateProductResponse], error)
	GetProduct(context.Context, *connect_go.Request[v1beta1.GetProductRequest]) (*connect_go.Response[v1beta1.GetProductResponse], error)
	ListProducts(context.Context, *connect_go.Request[v1beta1.ListProductsRequest]) (*connect_go.Response[v1beta1.ListProductsResponse], error)
	UpdateProduct(context.Context, *connect_go.Request[v1beta1.UpdateProductRequest]) (*connect_go.Response[v1beta1.UpdateProductResponse], error)
	CreateFeature(context.Context, *connect_go.Request[v1beta1.CreateFeatureRequest]) (*connect_go.Response[v1beta1.CreateFeatureResponse], error)
	GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error)
	UpdateFeature(context.Context, *connect_go.Request[v1beta1.UpdateFeatureRequest]) (*connect_go.Response[v1beta1.UpdateFeatureResponse], error)
	ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error)
	// Plans
	CreatePlan(context.Context, *connect_go.Request[v1beta1.CreatePlanRequest]) (*connect_go.Response[v1beta1.CreatePlanResponse], error)
	ListPlans(context.Context, *connect_go.Request[v1beta1.ListPlansRequest]) (*connect_go.Response[v1beta1.ListPlansResponse], error)
	GetPlan(context.Context, *connect_go.Request[v1beta1.GetPlanRequest]) (*connect_go.Response[v1beta1.GetPlanResponse], error)
	UpdatePlan(context.Context, *connect_go.Request[v1beta1.UpdatePlanRequest]) (*connect_go.Response[v1beta1.UpdatePlanResponse], error)
	// Checkout
	CreateCheckout(context.Context, *connect_go.Request[v1beta1.CreateCheckoutRequest]) (*connect_go.Response[v1beta1.CreateCheckoutResponse], error)
	ListCheckouts(context.Context, *connect_go.Request[v1beta1.ListCheckoutsRequest]) (*connect_go.Response[v1beta1.ListCheckoutsResponse], error)
	GetCheckout(context.Context, *connect_go.Request[v1beta1.GetCheckoutRequest]) (*connect_go.Response[v1beta1.GetCheckoutResponse], error)
	// Billing Entitlements
	CheckFeatureEntitlement(context.Context, *connect_go.Request[v1beta1.CheckFeatureEntitlementRequest]) (*connect_go.Response[v1beta1.CheckFeatureEntitlementResponse], error)
	// Transactions
	CreateBillingUsage(context.Context, *connect_go.Request[v1beta1.CreateBillingUsageRequest]) (*connect_go.Response[v1beta1.CreateBillingUsageResponse], error)
	ListBillingTransactions(context.Context, *connect_go.Request[v1beta1.ListBillingTransactionsRequest]) (*connect_go.Response[v1beta1.ListBillingTransactionsResponse], error)
	TotalDebitedTransactions(context.Context, *connect_go.Request[v1beta1.TotalDebitedTransactionsRequest]) (*connect_go.Response[v1beta1.TotalDebitedTransactionsResponse], error)
	// Invoice
	ListInvoices(context.Context, *connect_go.Request[v1beta1.ListInvoicesRequest]) (*connect_go.Response[v1beta1.ListInvoicesResponse], error)
	GetUpcomingInvoice(context.Context, *connect_go.Request[v1beta1.GetUpcomingInvoiceRequest]) (*connect_go.Response[v1beta1.GetUpcomingInvoiceResponse], error)
	// Incoming Webhooks
	BillingWebhookCallback(context.Context, *connect_go.Request[v1beta1.BillingWebhookCallbackRequest]) (*connect_go.Response[v1beta1.BillingWebhookCallbackResponse], error)
	// Prospects
	CreateProspectPublic(context.Context, *connect_go.Request[v1beta1.CreateProspectPublicRequest]) (*connect_go.Response[v1beta1.CreateProspectPublicResponse], error)
}

// NewFrontierServiceClient constructs a client for the raystack.frontier.v1beta1.FrontierService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontierServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FrontierServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &frontierServiceClient{
		listUsers: connect_go.NewClient[v1beta1.ListUsersRequest, v1beta1.ListUsersResponse](
			httpClient,
			baseURL+FrontierServiceListUsersProcedure,
			opts...,
		),
		createUser: connect_go.NewClient[v1beta1.CreateUserRequest, v1beta1.CreateUserResponse](
			httpClient,
			baseURL+FrontierServiceCreateUserProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[v1beta1.GetUserRequest, v1beta1.GetUserResponse](
			httpClient,
			baseURL+FrontierServiceGetUserProcedure,
			opts...,
		),
		listUserGroups: connect_go.NewClient[v1beta1.ListUserGroupsRequest, v1beta1.ListUserGroupsResponse](
			httpClient,
			baseURL+FrontierServiceListUserGroupsProcedure,
			opts...,
		),
		listCurrentUserGroups: connect_go.NewClient[v1beta1.ListCurrentUserGroupsRequest, v1beta1.ListCurrentUserGroupsResponse](
			httpClient,
			baseURL+FrontierServiceListCurrentUserGroupsProcedure,
			opts...,
		),
		getCurrentUser: connect_go.NewClient[v1beta1.GetCurrentUserRequest, v1beta1.GetCurrentUserResponse](
			httpClient,
			baseURL+FrontierServiceGetCurrentUserProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[v1beta1.UpdateUserRequest, v1beta1.UpdateUserResponse](
			httpClient,
			baseURL+FrontierServiceUpdateUserProcedure,
			opts...,
		),
		updateCurrentUser: connect_go.NewClient[v1beta1.UpdateCurrentUserRequest, v1beta1.UpdateCurrentUserResponse](
			httpClient,
			baseURL+FrontierServiceUpdateCurrentUserProcedure,
			opts...,
		),
		enableUser: connect_go.NewClient[v1beta1.EnableUserRequest, v1beta1.EnableUserResponse](
			httpClient,
			baseURL+FrontierServiceEnableUserProcedure,
			opts...,
		),
		disableUser: connect_go.NewClient[v1beta1.DisableUserRequest, v1beta1.DisableUserResponse](
			httpClient,
			baseURL+FrontierServiceDisableUserProcedure,
			opts...,
		),
		deleteUser: connect_go.NewClient[v1beta1.DeleteUserRequest, v1beta1.DeleteUserResponse](
			httpClient,
			baseURL+FrontierServiceDeleteUserProcedure,
			opts...,
		),
		listOrganizationsByUser: connect_go.NewClient[v1beta1.ListOrganizationsByUserRequest, v1beta1.ListOrganizationsByUserResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationsByUserProcedure,
			opts...,
		),
		listOrganizationsByCurrentUser: connect_go.NewClient[v1beta1.ListOrganizationsByCurrentUserRequest, v1beta1.ListOrganizationsByCurrentUserResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationsByCurrentUserProcedure,
			opts...,
		),
		listProjectsByUser: connect_go.NewClient[v1beta1.ListProjectsByUserRequest, v1beta1.ListProjectsByUserResponse](
			httpClient,
			baseURL+FrontierServiceListProjectsByUserProcedure,
			opts...,
		),
		listProjectsByCurrentUser: connect_go.NewClient[v1beta1.ListProjectsByCurrentUserRequest, v1beta1.ListProjectsByCurrentUserResponse](
			httpClient,
			baseURL+FrontierServiceListProjectsByCurrentUserProcedure,
			opts...,
		),
		listUserInvitations: connect_go.NewClient[v1beta1.ListUserInvitationsRequest, v1beta1.ListUserInvitationsResponse](
			httpClient,
			baseURL+FrontierServiceListUserInvitationsProcedure,
			opts...,
		),
		listCurrentUserInvitations: connect_go.NewClient[v1beta1.ListCurrentUserInvitationsRequest, v1beta1.ListCurrentUserInvitationsResponse](
			httpClient,
			baseURL+FrontierServiceListCurrentUserInvitationsProcedure,
			opts...,
		),
		listServiceUsers: connect_go.NewClient[v1beta1.ListServiceUsersRequest, v1beta1.ListServiceUsersResponse](
			httpClient,
			baseURL+FrontierServiceListServiceUsersProcedure,
			opts...,
		),
		createServiceUser: connect_go.NewClient[v1beta1.CreateServiceUserRequest, v1beta1.CreateServiceUserResponse](
			httpClient,
			baseURL+FrontierServiceCreateServiceUserProcedure,
			opts...,
		),
		getServiceUser: connect_go.NewClient[v1beta1.GetServiceUserRequest, v1beta1.GetServiceUserResponse](
			httpClient,
			baseURL+FrontierServiceGetServiceUserProcedure,
			opts...,
		),
		deleteServiceUser: connect_go.NewClient[v1beta1.DeleteServiceUserRequest, v1beta1.DeleteServiceUserResponse](
			httpClient,
			baseURL+FrontierServiceDeleteServiceUserProcedure,
			opts...,
		),
		createServiceUserJWK: connect_go.NewClient[v1beta1.CreateServiceUserJWKRequest, v1beta1.CreateServiceUserJWKResponse](
			httpClient,
			baseURL+FrontierServiceCreateServiceUserJWKProcedure,
			opts...,
		),
		listServiceUserJWKs: connect_go.NewClient[v1beta1.ListServiceUserJWKsRequest, v1beta1.ListServiceUserJWKsResponse](
			httpClient,
			baseURL+FrontierServiceListServiceUserJWKsProcedure,
			opts...,
		),
		getServiceUserJWK: connect_go.NewClient[v1beta1.GetServiceUserJWKRequest, v1beta1.GetServiceUserJWKResponse](
			httpClient,
			baseURL+FrontierServiceGetServiceUserJWKProcedure,
			opts...,
		),
		deleteServiceUserJWK: connect_go.NewClient[v1beta1.DeleteServiceUserJWKRequest, v1beta1.DeleteServiceUserJWKResponse](
			httpClient,
			baseURL+FrontierServiceDeleteServiceUserJWKProcedure,
			opts...,
		),
		createServiceUserCredential: connect_go.NewClient[v1beta1.CreateServiceUserCredentialRequest, v1beta1.CreateServiceUserCredentialResponse](
			httpClient,
			baseURL+FrontierServiceCreateServiceUserCredentialProcedure,
			opts...,
		),
		listServiceUserCredentials: connect_go.NewClient[v1beta1.ListServiceUserCredentialsRequest, v1beta1.ListServiceUserCredentialsResponse](
			httpClient,
			baseURL+FrontierServiceListServiceUserCredentialsProcedure,
			opts...,
		),
		deleteServiceUserCredential: connect_go.NewClient[v1beta1.DeleteServiceUserCredentialRequest, v1beta1.DeleteServiceUserCredentialResponse](
			httpClient,
			baseURL+FrontierServiceDeleteServiceUserCredentialProcedure,
			opts...,
		),
		createServiceUserToken: connect_go.NewClient[v1beta1.CreateServiceUserTokenRequest, v1beta1.CreateServiceUserTokenResponse](
			httpClient,
			baseURL+FrontierServiceCreateServiceUserTokenProcedure,
			opts...,
		),
		listServiceUserTokens: connect_go.NewClient[v1beta1.ListServiceUserTokensRequest, v1beta1.ListServiceUserTokensResponse](
			httpClient,
			baseURL+FrontierServiceListServiceUserTokensProcedure,
			opts...,
		),
		deleteServiceUserToken: connect_go.NewClient[v1beta1.DeleteServiceUserTokenRequest, v1beta1.DeleteServiceUserTokenResponse](
			httpClient,
			baseURL+FrontierServiceDeleteServiceUserTokenProcedure,
			opts...,
		),
		listServiceUserProjects: connect_go.NewClient[v1beta1.ListServiceUserProjectsRequest, v1beta1.ListServiceUserProjectsResponse](
			httpClient,
			baseURL+FrontierServiceListServiceUserProjectsProcedure,
			opts...,
		),
		listOrganizationGroups: connect_go.NewClient[v1beta1.ListOrganizationGroupsRequest, v1beta1.ListOrganizationGroupsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationGroupsProcedure,
			opts...,
		),
		createGroup: connect_go.NewClient[v1beta1.CreateGroupRequest, v1beta1.CreateGroupResponse](
			httpClient,
			baseURL+FrontierServiceCreateGroupProcedure,
			opts...,
		),
		getGroup: connect_go.NewClient[v1beta1.GetGroupRequest, v1beta1.GetGroupResponse](
			httpClient,
			baseURL+FrontierServiceGetGroupProcedure,
			opts...,
		),
		updateGroup: connect_go.NewClient[v1beta1.UpdateGroupRequest, v1beta1.UpdateGroupResponse](
			httpClient,
			baseURL+FrontierServiceUpdateGroupProcedure,
			opts...,
		),
		listGroupUsers: connect_go.NewClient[v1beta1.ListGroupUsersRequest, v1beta1.ListGroupUsersResponse](
			httpClient,
			baseURL+FrontierServiceListGroupUsersProcedure,
			opts...,
		),
		addGroupUsers: connect_go.NewClient[v1beta1.AddGroupUsersRequest, v1beta1.AddGroupUsersResponse](
			httpClient,
			baseURL+FrontierServiceAddGroupUsersProcedure,
			opts...,
		),
		removeGroupUser: connect_go.NewClient[v1beta1.RemoveGroupUserRequest, v1beta1.RemoveGroupUserResponse](
			httpClient,
			baseURL+FrontierServiceRemoveGroupUserProcedure,
			opts...,
		),
		enableGroup: connect_go.NewClient[v1beta1.EnableGroupRequest, v1beta1.EnableGroupResponse](
			httpClient,
			baseURL+FrontierServiceEnableGroupProcedure,
			opts...,
		),
		disableGroup: connect_go.NewClient[v1beta1.DisableGroupRequest, v1beta1.DisableGroupResponse](
			httpClient,
			baseURL+FrontierServiceDisableGroupProcedure,
			opts...,
		),
		deleteGroup: connect_go.NewClient[v1beta1.DeleteGroupRequest, v1beta1.DeleteGroupResponse](
			httpClient,
			baseURL+FrontierServiceDeleteGroupProcedure,
			opts...,
		),
		listRoles: connect_go.NewClient[v1beta1.ListRolesRequest, v1beta1.ListRolesResponse](
			httpClient,
			baseURL+FrontierServiceListRolesProcedure,
			opts...,
		),
		listOrganizationRoles: connect_go.NewClient[v1beta1.ListOrganizationRolesRequest, v1beta1.ListOrganizationRolesResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationRolesProcedure,
			opts...,
		),
		createOrganizationRole: connect_go.NewClient[v1beta1.CreateOrganizationRoleRequest, v1beta1.CreateOrganizationRoleResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationRoleProcedure,
			opts...,
		),
		getOrganizationRole: connect_go.NewClient[v1beta1.GetOrganizationRoleRequest, v1beta1.GetOrganizationRoleResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationRoleProcedure,
			opts...,
		),
		updateOrganizationRole: connect_go.NewClient[v1beta1.UpdateOrganizationRoleRequest, v1beta1.UpdateOrganizationRoleResponse](
			httpClient,
			baseURL+FrontierServiceUpdateOrganizationRoleProcedure,
			opts...,
		),
		deleteOrganizationRole: connect_go.NewClient[v1beta1.DeleteOrganizationRoleRequest, v1beta1.DeleteOrganizationRoleResponse](
			httpClient,
			baseURL+FrontierServiceDeleteOrganizationRoleProcedure,
			opts...,
		),
		listOrganizations: connect_go.NewClient[v1beta1.ListOrganizationsRequest, v1beta1.ListOrganizationsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationsProcedure,
			opts...,
		),
		createOrganization: connect_go.NewClient[v1beta1.CreateOrganizationRequest, v1beta1.CreateOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationProcedure,
			opts...,
		),
		getOrganization: connect_go.NewClient[v1beta1.GetOrganizationRequest, v1beta1.GetOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationProcedure,
			opts...,
		),
		updateOrganization: connect_go.NewClient[v1beta1.UpdateOrganizationRequest, v1beta1.UpdateOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceUpdateOrganizationProcedure,
			opts...,
		),
		listOrganizationProjects: connect_go.NewClient[v1beta1.ListOrganizationProjectsRequest, v1beta1.ListOrganizationProjectsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationProjectsProcedure,
			opts...,
		),
		listOrganizationAdmins: connect_go.NewClient[v1beta1.ListOrganizationAdminsRequest, v1beta1.ListOrganizationAdminsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationAdminsProcedure,
			opts...,
		),
		listOrganizationUsers: connect_go.NewClient[v1beta1.ListOrganizationUsersRequest, v1beta1.ListOrganizationUsersResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationUsersProcedure,
			opts...,
		),
		addOrganizationUsers: connect_go.NewClient[v1beta1.AddOrganizationUsersRequest, v1beta1.AddOrganizationUsersResponse](
			httpClient,
			baseURL+FrontierServiceAddOrganizationUsersProcedure,
			opts...,
		),
		removeOrganizationUser: connect_go.NewClient[v1beta1.RemoveOrganizationUserRequest, v1beta1.RemoveOrganizationUserResponse](
			httpClient,
			baseURL+FrontierServiceRemoveOrganizationUserProcedure,
			opts...,
		),
		getOrganizationKyc: connect_go.NewClient[v1beta1.GetOrganizationKycRequest, v1beta1.GetOrganizationKycResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationKycProcedure,
			opts...,
		),
		listOrganizationServiceUsers: connect_go.NewClient[v1beta1.ListOrganizationServiceUsersRequest, v1beta1.ListOrganizationServiceUsersResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationServiceUsersProcedure,
			opts...,
		),
		listOrganizationInvitations: connect_go.NewClient[v1beta1.ListOrganizationInvitationsRequest, v1beta1.ListOrganizationInvitationsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationInvitationsProcedure,
			opts...,
		),
		createOrganizationInvitation: connect_go.NewClient[v1beta1.CreateOrganizationInvitationRequest, v1beta1.CreateOrganizationInvitationResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationInvitationProcedure,
			opts...,
		),
		getOrganizationInvitation: connect_go.NewClient[v1beta1.GetOrganizationInvitationRequest, v1beta1.GetOrganizationInvitationResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationInvitationProcedure,
			opts...,
		),
		acceptOrganizationInvitation: connect_go.NewClient[v1beta1.AcceptOrganizationInvitationRequest, v1beta1.AcceptOrganizationInvitationResponse](
			httpClient,
			baseURL+FrontierServiceAcceptOrganizationInvitationProcedure,
			opts...,
		),
		deleteOrganizationInvitation: connect_go.NewClient[v1beta1.DeleteOrganizationInvitationRequest, v1beta1.DeleteOrganizationInvitationResponse](
			httpClient,
			baseURL+FrontierServiceDeleteOrganizationInvitationProcedure,
			opts...,
		),
		listOrganizationDomains: connect_go.NewClient[v1beta1.ListOrganizationDomainsRequest, v1beta1.ListOrganizationDomainsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationDomainsProcedure,
			opts...,
		),
		createOrganizationDomain: connect_go.NewClient[v1beta1.CreateOrganizationDomainRequest, v1beta1.CreateOrganizationDomainResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationDomainProcedure,
			opts...,
		),
		deleteOrganizationDomain: connect_go.NewClient[v1beta1.DeleteOrganizationDomainRequest, v1beta1.DeleteOrganizationDomainResponse](
			httpClient,
			baseURL+FrontierServiceDeleteOrganizationDomainProcedure,
			opts...,
		),
		getOrganizationDomain: connect_go.NewClient[v1beta1.GetOrganizationDomainRequest, v1beta1.GetOrganizationDomainResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationDomainProcedure,
			opts...,
		),
		verifyOrganizationDomain: connect_go.NewClient[v1beta1.VerifyOrganizationDomainRequest, v1beta1.VerifyOrganizationDomainResponse](
			httpClient,
			baseURL+FrontierServiceVerifyOrganizationDomainProcedure,
			opts...,
		),
		joinOrganization: connect_go.NewClient[v1beta1.JoinOrganizationRequest, v1beta1.JoinOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceJoinOrganizationProcedure,
			opts...,
		),
		enableOrganization: connect_go.NewClient[v1beta1.EnableOrganizationRequest, v1beta1.EnableOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceEnableOrganizationProcedure,
			opts...,
		),
		disableOrganization: connect_go.NewClient[v1beta1.DisableOrganizationRequest, v1beta1.DisableOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceDisableOrganizationProcedure,
			opts...,
		),
		deleteOrganization: connect_go.NewClient[v1beta1.DeleteOrganizationRequest, v1beta1.DeleteOrganizationResponse](
			httpClient,
			baseURL+FrontierServiceDeleteOrganizationProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[v1beta1.CreateProjectRequest, v1beta1.CreateProjectResponse](
			httpClient,
			baseURL+FrontierServiceCreateProjectProcedure,
			opts...,
		),
		getProject: connect_go.NewClient[v1beta1.GetProjectRequest, v1beta1.GetProjectResponse](
			httpClient,
			baseURL+FrontierServiceGetProjectProcedure,
			opts...,
		),
		updateProject: connect_go.NewClient[v1beta1.UpdateProjectRequest, v1beta1.UpdateProjectResponse](
			httpClient,
			baseURL+FrontierServiceUpdateProjectProcedure,
			opts...,
		),
		listProjectAdmins: connect_go.NewClient[v1beta1.ListProjectAdminsRequest, v1beta1.ListProjectAdminsResponse](
			httpClient,
			baseURL+FrontierServiceListProjectAdminsProcedure,
			opts...,
		),
		listProjectUsers: connect_go.NewClient[v1beta1.ListProjectUsersRequest, v1beta1.ListProjectUsersResponse](
			httpClient,
			baseURL+FrontierServiceListProjectUsersProcedure,
			opts...,
		),
		listProjectServiceUsers: connect_go.NewClient[v1beta1.ListProjectServiceUsersRequest, v1beta1.ListProjectServiceUsersResponse](
			httpClient,
			baseURL+FrontierServiceListProjectServiceUsersProcedure,
			opts...,
		),
		listProjectGroups: connect_go.NewClient[v1beta1.ListProjectGroupsRequest, v1beta1.ListProjectGroupsResponse](
			httpClient,
			baseURL+FrontierServiceListProjectGroupsProcedure,
			opts...,
		),
		enableProject: connect_go.NewClient[v1beta1.EnableProjectRequest, v1beta1.EnableProjectResponse](
			httpClient,
			baseURL+FrontierServiceEnableProjectProcedure,
			opts...,
		),
		disableProject: connect_go.NewClient[v1beta1.DisableProjectRequest, v1beta1.DisableProjectResponse](
			httpClient,
			baseURL+FrontierServiceDisableProjectProcedure,
			opts...,
		),
		deleteProject: connect_go.NewClient[v1beta1.DeleteProjectRequest, v1beta1.DeleteProjectResponse](
			httpClient,
			baseURL+FrontierServiceDeleteProjectProcedure,
			opts...,
		),
		createPolicy: connect_go.NewClient[v1beta1.CreatePolicyRequest, v1beta1.CreatePolicyResponse](
			httpClient,
			baseURL+FrontierServiceCreatePolicyProcedure,
			opts...,
		),
		getPolicy: connect_go.NewClient[v1beta1.GetPolicyRequest, v1beta1.GetPolicyResponse](
			httpClient,
			baseURL+FrontierServiceGetPolicyProcedure,
			opts...,
		),
		listPolicies: connect_go.NewClient[v1beta1.ListPoliciesRequest, v1beta1.ListPoliciesResponse](
			httpClient,
			baseURL+FrontierServiceListPoliciesProcedure,
			opts...,
		),
		updatePolicy: connect_go.NewClient[v1beta1.UpdatePolicyRequest, v1beta1.UpdatePolicyResponse](
			httpClient,
			baseURL+FrontierServiceUpdatePolicyProcedure,
			opts...,
		),
		deletePolicy: connect_go.NewClient[v1beta1.DeletePolicyRequest, v1beta1.DeletePolicyResponse](
			httpClient,
			baseURL+FrontierServiceDeletePolicyProcedure,
			opts...,
		),
		createPolicyForProject: connect_go.NewClient[v1beta1.CreatePolicyForProjectRequest, v1beta1.CreatePolicyForProjectResponse](
			httpClient,
			baseURL+FrontierServiceCreatePolicyForProjectProcedure,
			opts...,
		),
		createRelation: connect_go.NewClient[v1beta1.CreateRelationRequest, v1beta1.CreateRelationResponse](
			httpClient,
			baseURL+FrontierServiceCreateRelationProcedure,
			opts...,
		),
		getRelation: connect_go.NewClient[v1beta1.GetRelationRequest, v1beta1.GetRelationResponse](
			httpClient,
			baseURL+FrontierServiceGetRelationProcedure,
			opts...,
		),
		deleteRelation: connect_go.NewClient[v1beta1.DeleteRelationRequest, v1beta1.DeleteRelationResponse](
			httpClient,
			baseURL+FrontierServiceDeleteRelationProcedure,
			opts...,
		),
		listPermissions: connect_go.NewClient[v1beta1.ListPermissionsRequest, v1beta1.ListPermissionsResponse](
			httpClient,
			baseURL+FrontierServiceListPermissionsProcedure,
			opts...,
		),
		getPermission: connect_go.NewClient[v1beta1.GetPermissionRequest, v1beta1.GetPermissionResponse](
			httpClient,
			baseURL+FrontierServiceGetPermissionProcedure,
			opts...,
		),
		listNamespaces: connect_go.NewClient[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse](
			httpClient,
			baseURL+FrontierServiceListNamespacesProcedure,
			opts...,
		),
		getNamespace: connect_go.NewClient[v1beta1.GetNamespaceRequest, v1beta1.GetNamespaceResponse](
			httpClient,
			baseURL+FrontierServiceGetNamespaceProcedure,
			opts...,
		),
		listProjectResources: connect_go.NewClient[v1beta1.ListProjectResourcesRequest, v1beta1.ListProjectResourcesResponse](
			httpClient,
			baseURL+FrontierServiceListProjectResourcesProcedure,
			opts...,
		),
		createProjectResource: connect_go.NewClient[v1beta1.CreateProjectResourceRequest, v1beta1.CreateProjectResourceResponse](
			httpClient,
			baseURL+FrontierServiceCreateProjectResourceProcedure,
			opts...,
		),
		getProjectResource: connect_go.NewClient[v1beta1.GetProjectResourceRequest, v1beta1.GetProjectResourceResponse](
			httpClient,
			baseURL+FrontierServiceGetProjectResourceProcedure,
			opts...,
		),
		updateProjectResource: connect_go.NewClient[v1beta1.UpdateProjectResourceRequest, v1beta1.UpdateProjectResourceResponse](
			httpClient,
			baseURL+FrontierServiceUpdateProjectResourceProcedure,
			opts...,
		),
		deleteProjectResource: connect_go.NewClient[v1beta1.DeleteProjectResourceRequest, v1beta1.DeleteProjectResourceResponse](
			httpClient,
			baseURL+FrontierServiceDeleteProjectResourceProcedure,
			opts...,
		),
		checkResourcePermission: connect_go.NewClient[v1beta1.CheckResourcePermissionRequest, v1beta1.CheckResourcePermissionResponse](
			httpClient,
			baseURL+FrontierServiceCheckResourcePermissionProcedure,
			opts...,
		),
		batchCheckPermission: connect_go.NewClient[v1beta1.BatchCheckPermissionRequest, v1beta1.BatchCheckPermissionResponse](
			httpClient,
			baseURL+FrontierServiceBatchCheckPermissionProcedure,
			opts...,
		),
		getJWKs: connect_go.NewClient[v1beta1.GetJWKsRequest, v1beta1.GetJWKsResponse](
			httpClient,
			baseURL+FrontierServiceGetJWKsProcedure,
			opts...,
		),
		listAuthStrategies: connect_go.NewClient[v1beta1.ListAuthStrategiesRequest, v1beta1.ListAuthStrategiesResponse](
			httpClient,
			baseURL+FrontierServiceListAuthStrategiesProcedure,
			opts...,
		),
		authenticate: connect_go.NewClient[v1beta1.AuthenticateRequest, v1beta1.AuthenticateResponse](
			httpClient,
			baseURL+FrontierServiceAuthenticateProcedure,
			opts...,
		),
		authCallback: connect_go.NewClient[v1beta1.AuthCallbackRequest, v1beta1.AuthCallbackResponse](
			httpClient,
			baseURL+FrontierServiceAuthCallbackProcedure,
			opts...,
		),
		authToken: connect_go.NewClient[v1beta1.AuthTokenRequest, v1beta1.AuthTokenResponse](
			httpClient,
			baseURL+FrontierServiceAuthTokenProcedure,
			opts...,
		),
		authLogout: connect_go.NewClient[v1beta1.AuthLogoutRequest, v1beta1.AuthLogoutResponse](
			httpClient,
			baseURL+FrontierServiceAuthLogoutProcedure,
			opts...,
		),
		listMetaSchemas: connect_go.NewClient[v1beta1.ListMetaSchemasRequest, v1beta1.ListMetaSchemasResponse](
			httpClient,
			baseURL+FrontierServiceListMetaSchemasProcedure,
			opts...,
		),
		createMetaSchema: connect_go.NewClient[v1beta1.CreateMetaSchemaRequest, v1beta1.CreateMetaSchemaResponse](
			httpClient,
			baseURL+FrontierServiceCreateMetaSchemaProcedure,
			opts...,
		),
		getMetaSchema: connect_go.NewClient[v1beta1.GetMetaSchemaRequest, v1beta1.GetMetaSchemaResponse](
			httpClient,
			baseURL+FrontierServiceGetMetaSchemaProcedure,
			opts...,
		),
		updateMetaSchema: connect_go.NewClient[v1beta1.UpdateMetaSchemaRequest, v1beta1.UpdateMetaSchemaResponse](
			httpClient,
			baseURL+FrontierServiceUpdateMetaSchemaProcedure,
			opts...,
		),
		deleteMetaSchema: connect_go.NewClient[v1beta1.DeleteMetaSchemaRequest, v1beta1.DeleteMetaSchemaResponse](
			httpClient,
			baseURL+FrontierServiceDeleteMetaSchemaProcedure,
			opts...,
		),
		listOrganizationAuditLogs: connect_go.NewClient[v1beta1.ListOrganizationAuditLogsRequest, v1beta1.ListOrganizationAuditLogsResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationAuditLogsProcedure,
			opts...,
		),
		createOrganizationAuditLogs: connect_go.NewClient[v1beta1.CreateOrganizationAuditLogsRequest, v1beta1.CreateOrganizationAuditLogsResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationAuditLogsProcedure,
			opts...,
		),
		getOrganizationAuditLog: connect_go.NewClient[v1beta1.GetOrganizationAuditLogRequest, v1beta1.GetOrganizationAuditLogResponse](
			httpClient,
			baseURL+FrontierServiceGetOrganizationAuditLogProcedure,
			opts...,
		),
		describePreferences: connect_go.NewClient[v1beta1.DescribePreferencesRequest, v1beta1.DescribePreferencesResponse](
			httpClient,
			baseURL+FrontierServiceDescribePreferencesProcedure,
			opts...,
		),
		createOrganizationPreferences: connect_go.NewClient[v1beta1.CreateOrganizationPreferencesRequest, v1beta1.CreateOrganizationPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceCreateOrganizationPreferencesProcedure,
			opts...,
		),
		listOrganizationPreferences: connect_go.NewClient[v1beta1.ListOrganizationPreferencesRequest, v1beta1.ListOrganizationPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceListOrganizationPreferencesProcedure,
			opts...,
		),
		createProjectPreferences: connect_go.NewClient[v1beta1.CreateProjectPreferencesRequest, v1beta1.CreateProjectPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceCreateProjectPreferencesProcedure,
			opts...,
		),
		listProjectPreferences: connect_go.NewClient[v1beta1.ListProjectPreferencesRequest, v1beta1.ListProjectPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceListProjectPreferencesProcedure,
			opts...,
		),
		createGroupPreferences: connect_go.NewClient[v1beta1.CreateGroupPreferencesRequest, v1beta1.CreateGroupPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceCreateGroupPreferencesProcedure,
			opts...,
		),
		listGroupPreferences: connect_go.NewClient[v1beta1.ListGroupPreferencesRequest, v1beta1.ListGroupPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceListGroupPreferencesProcedure,
			opts...,
		),
		createUserPreferences: connect_go.NewClient[v1beta1.CreateUserPreferencesRequest, v1beta1.CreateUserPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceCreateUserPreferencesProcedure,
			opts...,
		),
		listUserPreferences: connect_go.NewClient[v1beta1.ListUserPreferencesRequest, v1beta1.ListUserPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceListUserPreferencesProcedure,
			opts...,
		),
		createCurrentUserPreferences: connect_go.NewClient[v1beta1.CreateCurrentUserPreferencesRequest, v1beta1.CreateCurrentUserPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceCreateCurrentUserPreferencesProcedure,
			opts...,
		),
		listCurrentUserPreferences: connect_go.NewClient[v1beta1.ListCurrentUserPreferencesRequest, v1beta1.ListCurrentUserPreferencesResponse](
			httpClient,
			baseURL+FrontierServiceListCurrentUserPreferencesProcedure,
			opts...,
		),
		createBillingAccount: connect_go.NewClient[v1beta1.CreateBillingAccountRequest, v1beta1.CreateBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceCreateBillingAccountProcedure,
			opts...,
		),
		getBillingAccount: connect_go.NewClient[v1beta1.GetBillingAccountRequest, v1beta1.GetBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceGetBillingAccountProcedure,
			opts...,
		),
		updateBillingAccount: connect_go.NewClient[v1beta1.UpdateBillingAccountRequest, v1beta1.UpdateBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceUpdateBillingAccountProcedure,
			opts...,
		),
		registerBillingAccount: connect_go.NewClient[v1beta1.RegisterBillingAccountRequest, v1beta1.RegisterBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceRegisterBillingAccountProcedure,
			opts...,
		),
		listBillingAccounts: connect_go.NewClient[v1beta1.ListBillingAccountsRequest, v1beta1.ListBillingAccountsResponse](
			httpClient,
			baseURL+FrontierServiceListBillingAccountsProcedure,
			opts...,
		),
		deleteBillingAccount: connect_go.NewClient[v1beta1.DeleteBillingAccountRequest, v1beta1.DeleteBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceDeleteBillingAccountProcedure,
			opts...,
		),
		enableBillingAccount: connect_go.NewClient[v1beta1.EnableBillingAccountRequest, v1beta1.EnableBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceEnableBillingAccountProcedure,
			opts...,
		),
		disableBillingAccount: connect_go.NewClient[v1beta1.DisableBillingAccountRequest, v1beta1.DisableBillingAccountResponse](
			httpClient,
			baseURL+FrontierServiceDisableBillingAccountProcedure,
			opts...,
		),
		getBillingBalance: connect_go.NewClient[v1beta1.GetBillingBalanceRequest, v1beta1.GetBillingBalanceResponse](
			httpClient,
			baseURL+FrontierServiceGetBillingBalanceProcedure,
			opts...,
		),
		hasTrialed: connect_go.NewClient[v1beta1.HasTrialedRequest, v1beta1.HasTrialedResponse](
			httpClient,
			baseURL+FrontierServiceHasTrialedProcedure,
			opts...,
		),
		getSubscription: connect_go.NewClient[v1beta1.GetSubscriptionRequest, v1beta1.GetSubscriptionResponse](
			httpClient,
			baseURL+FrontierServiceGetSubscriptionProcedure,
			opts...,
		),
		cancelSubscription: connect_go.NewClient[v1beta1.CancelSubscriptionRequest, v1beta1.CancelSubscriptionResponse](
			httpClient,
			baseURL+FrontierServiceCancelSubscriptionProcedure,
			opts...,
		),
		listSubscriptions: connect_go.NewClient[v1beta1.ListSubscriptionsRequest, v1beta1.ListSubscriptionsResponse](
			httpClient,
			baseURL+FrontierServiceListSubscriptionsProcedure,
			opts...,
		),
		changeSubscription: connect_go.NewClient[v1beta1.ChangeSubscriptionRequest, v1beta1.ChangeSubscriptionResponse](
			httpClient,
			baseURL+FrontierServiceChangeSubscriptionProcedure,
			opts...,
		),
		updateSubscription: connect_go.NewClient[v1beta1.UpdateSubscriptionRequest, v1beta1.UpdateSubscriptionResponse](
			httpClient,
			baseURL+FrontierServiceUpdateSubscriptionProcedure,
			opts...,
		),
		createProduct: connect_go.NewClient[v1beta1.CreateProductRequest, v1beta1.CreateProductResponse](
			httpClient,
			baseURL+FrontierServiceCreateProductProcedure,
			opts...,
		),
		getProduct: connect_go.NewClient[v1beta1.GetProductRequest, v1beta1.GetProductResponse](
			httpClient,
			baseURL+FrontierServiceGetProductProcedure,
			opts...,
		),
		listProducts: connect_go.NewClient[v1beta1.ListProductsRequest, v1beta1.ListProductsResponse](
			httpClient,
			baseURL+FrontierServiceListProductsProcedure,
			opts...,
		),
		updateProduct: connect_go.NewClient[v1beta1.UpdateProductRequest, v1beta1.UpdateProductResponse](
			httpClient,
			baseURL+FrontierServiceUpdateProductProcedure,
			opts...,
		),
		createFeature: connect_go.NewClient[v1beta1.CreateFeatureRequest, v1beta1.CreateFeatureResponse](
			httpClient,
			baseURL+FrontierServiceCreateFeatureProcedure,
			opts...,
		),
		getFeature: connect_go.NewClient[v1beta1.GetFeatureRequest, v1beta1.GetFeatureResponse](
			httpClient,
			baseURL+FrontierServiceGetFeatureProcedure,
			opts...,
		),
		updateFeature: connect_go.NewClient[v1beta1.UpdateFeatureRequest, v1beta1.UpdateFeatureResponse](
			httpClient,
			baseURL+FrontierServiceUpdateFeatureProcedure,
			opts...,
		),
		listFeatures: connect_go.NewClient[v1beta1.ListFeaturesRequest, v1beta1.ListFeaturesResponse](
			httpClient,
			baseURL+FrontierServiceListFeaturesProcedure,
			opts...,
		),
		createPlan: connect_go.NewClient[v1beta1.CreatePlanRequest, v1beta1.CreatePlanResponse](
			httpClient,
			baseURL+FrontierServiceCreatePlanProcedure,
			opts...,
		),
		listPlans: connect_go.NewClient[v1beta1.ListPlansRequest, v1beta1.ListPlansResponse](
			httpClient,
			baseURL+FrontierServiceListPlansProcedure,
			opts...,
		),
		getPlan: connect_go.NewClient[v1beta1.GetPlanRequest, v1beta1.GetPlanResponse](
			httpClient,
			baseURL+FrontierServiceGetPlanProcedure,
			opts...,
		),
		updatePlan: connect_go.NewClient[v1beta1.UpdatePlanRequest, v1beta1.UpdatePlanResponse](
			httpClient,
			baseURL+FrontierServiceUpdatePlanProcedure,
			opts...,
		),
		createCheckout: connect_go.NewClient[v1beta1.CreateCheckoutRequest, v1beta1.CreateCheckoutResponse](
			httpClient,
			baseURL+FrontierServiceCreateCheckoutProcedure,
			opts...,
		),
		listCheckouts: connect_go.NewClient[v1beta1.ListCheckoutsRequest, v1beta1.ListCheckoutsResponse](
			httpClient,
			baseURL+FrontierServiceListCheckoutsProcedure,
			opts...,
		),
		getCheckout: connect_go.NewClient[v1beta1.GetCheckoutRequest, v1beta1.GetCheckoutResponse](
			httpClient,
			baseURL+FrontierServiceGetCheckoutProcedure,
			opts...,
		),
		checkFeatureEntitlement: connect_go.NewClient[v1beta1.CheckFeatureEntitlementRequest, v1beta1.CheckFeatureEntitlementResponse](
			httpClient,
			baseURL+FrontierServiceCheckFeatureEntitlementProcedure,
			opts...,
		),
		createBillingUsage: connect_go.NewClient[v1beta1.CreateBillingUsageRequest, v1beta1.CreateBillingUsageResponse](
			httpClient,
			baseURL+FrontierServiceCreateBillingUsageProcedure,
			opts...,
		),
		listBillingTransactions: connect_go.NewClient[v1beta1.ListBillingTransactionsRequest, v1beta1.ListBillingTransactionsResponse](
			httpClient,
			baseURL+FrontierServiceListBillingTransactionsProcedure,
			opts...,
		),
		totalDebitedTransactions: connect_go.NewClient[v1beta1.TotalDebitedTransactionsRequest, v1beta1.TotalDebitedTransactionsResponse](
			httpClient,
			baseURL+FrontierServiceTotalDebitedTransactionsProcedure,
			opts...,
		),
		listInvoices: connect_go.NewClient[v1beta1.ListInvoicesRequest, v1beta1.ListInvoicesResponse](
			httpClient,
			baseURL+FrontierServiceListInvoicesProcedure,
			opts...,
		),
		getUpcomingInvoice: connect_go.NewClient[v1beta1.GetUpcomingInvoiceRequest, v1beta1.GetUpcomingInvoiceResponse](
			httpClient,
			baseURL+FrontierServiceGetUpcomingInvoiceProcedure,
			opts...,
		),
		billingWebhookCallback: connect_go.NewClient[v1beta1.BillingWebhookCallbackRequest, v1beta1.BillingWebhookCallbackResponse](
			httpClient,
			baseURL+FrontierServiceBillingWebhookCallbackProcedure,
			opts...,
		),
		createProspectPublic: connect_go.NewClient[v1beta1.CreateProspectPublicRequest, v1beta1.CreateProspectPublicResponse](
			httpClient,
			baseURL+FrontierServiceCreateProspectPublicProcedure,
			opts...,
		),
	}
}

// frontierServiceClient implements FrontierServiceClient.
type frontierServiceClient struct {
	listUsers                      *connect_go.Client[v1beta1.ListUsersRequest, v1beta1.ListUsersResponse]
	createUser                     *connect_go.Client[v1beta1.CreateUserRequest, v1beta1.CreateUserResponse]
	getUser                        *connect_go.Client[v1beta1.GetUserRequest, v1beta1.GetUserResponse]
	listUserGroups                 *connect_go.Client[v1beta1.ListUserGroupsRequest, v1beta1.ListUserGroupsResponse]
	listCurrentUserGroups          *connect_go.Client[v1beta1.ListCurrentUserGroupsRequest, v1beta1.ListCurrentUserGroupsResponse]
	getCurrentUser                 *connect_go.Client[v1beta1.GetCurrentUserRequest, v1beta1.GetCurrentUserResponse]
	updateUser                     *connect_go.Client[v1beta1.UpdateUserRequest, v1beta1.UpdateUserResponse]
	updateCurrentUser              *connect_go.Client[v1beta1.UpdateCurrentUserRequest, v1beta1.UpdateCurrentUserResponse]
	enableUser                     *connect_go.Client[v1beta1.EnableUserRequest, v1beta1.EnableUserResponse]
	disableUser                    *connect_go.Client[v1beta1.DisableUserRequest, v1beta1.DisableUserResponse]
	deleteUser                     *connect_go.Client[v1beta1.DeleteUserRequest, v1beta1.DeleteUserResponse]
	listOrganizationsByUser        *connect_go.Client[v1beta1.ListOrganizationsByUserRequest, v1beta1.ListOrganizationsByUserResponse]
	listOrganizationsByCurrentUser *connect_go.Client[v1beta1.ListOrganizationsByCurrentUserRequest, v1beta1.ListOrganizationsByCurrentUserResponse]
	listProjectsByUser             *connect_go.Client[v1beta1.ListProjectsByUserRequest, v1beta1.ListProjectsByUserResponse]
	listProjectsByCurrentUser      *connect_go.Client[v1beta1.ListProjectsByCurrentUserRequest, v1beta1.ListProjectsByCurrentUserResponse]
	listUserInvitations            *connect_go.Client[v1beta1.ListUserInvitationsRequest, v1beta1.ListUserInvitationsResponse]
	listCurrentUserInvitations     *connect_go.Client[v1beta1.ListCurrentUserInvitationsRequest, v1beta1.ListCurrentUserInvitationsResponse]
	listServiceUsers               *connect_go.Client[v1beta1.ListServiceUsersRequest, v1beta1.ListServiceUsersResponse]
	createServiceUser              *connect_go.Client[v1beta1.CreateServiceUserRequest, v1beta1.CreateServiceUserResponse]
	getServiceUser                 *connect_go.Client[v1beta1.GetServiceUserRequest, v1beta1.GetServiceUserResponse]
	deleteServiceUser              *connect_go.Client[v1beta1.DeleteServiceUserRequest, v1beta1.DeleteServiceUserResponse]
	createServiceUserJWK           *connect_go.Client[v1beta1.CreateServiceUserJWKRequest, v1beta1.CreateServiceUserJWKResponse]
	listServiceUserJWKs            *connect_go.Client[v1beta1.ListServiceUserJWKsRequest, v1beta1.ListServiceUserJWKsResponse]
	getServiceUserJWK              *connect_go.Client[v1beta1.GetServiceUserJWKRequest, v1beta1.GetServiceUserJWKResponse]
	deleteServiceUserJWK           *connect_go.Client[v1beta1.DeleteServiceUserJWKRequest, v1beta1.DeleteServiceUserJWKResponse]
	createServiceUserCredential    *connect_go.Client[v1beta1.CreateServiceUserCredentialRequest, v1beta1.CreateServiceUserCredentialResponse]
	listServiceUserCredentials     *connect_go.Client[v1beta1.ListServiceUserCredentialsRequest, v1beta1.ListServiceUserCredentialsResponse]
	deleteServiceUserCredential    *connect_go.Client[v1beta1.DeleteServiceUserCredentialRequest, v1beta1.DeleteServiceUserCredentialResponse]
	createServiceUserToken         *connect_go.Client[v1beta1.CreateServiceUserTokenRequest, v1beta1.CreateServiceUserTokenResponse]
	listServiceUserTokens          *connect_go.Client[v1beta1.ListServiceUserTokensRequest, v1beta1.ListServiceUserTokensResponse]
	deleteServiceUserToken         *connect_go.Client[v1beta1.DeleteServiceUserTokenRequest, v1beta1.DeleteServiceUserTokenResponse]
	listServiceUserProjects        *connect_go.Client[v1beta1.ListServiceUserProjectsRequest, v1beta1.ListServiceUserProjectsResponse]
	listOrganizationGroups         *connect_go.Client[v1beta1.ListOrganizationGroupsRequest, v1beta1.ListOrganizationGroupsResponse]
	createGroup                    *connect_go.Client[v1beta1.CreateGroupRequest, v1beta1.CreateGroupResponse]
	getGroup                       *connect_go.Client[v1beta1.GetGroupRequest, v1beta1.GetGroupResponse]
	updateGroup                    *connect_go.Client[v1beta1.UpdateGroupRequest, v1beta1.UpdateGroupResponse]
	listGroupUsers                 *connect_go.Client[v1beta1.ListGroupUsersRequest, v1beta1.ListGroupUsersResponse]
	addGroupUsers                  *connect_go.Client[v1beta1.AddGroupUsersRequest, v1beta1.AddGroupUsersResponse]
	removeGroupUser                *connect_go.Client[v1beta1.RemoveGroupUserRequest, v1beta1.RemoveGroupUserResponse]
	enableGroup                    *connect_go.Client[v1beta1.EnableGroupRequest, v1beta1.EnableGroupResponse]
	disableGroup                   *connect_go.Client[v1beta1.DisableGroupRequest, v1beta1.DisableGroupResponse]
	deleteGroup                    *connect_go.Client[v1beta1.DeleteGroupRequest, v1beta1.DeleteGroupResponse]
	listRoles                      *connect_go.Client[v1beta1.ListRolesRequest, v1beta1.ListRolesResponse]
	listOrganizationRoles          *connect_go.Client[v1beta1.ListOrganizationRolesRequest, v1beta1.ListOrganizationRolesResponse]
	createOrganizationRole         *connect_go.Client[v1beta1.CreateOrganizationRoleRequest, v1beta1.CreateOrganizationRoleResponse]
	getOrganizationRole            *connect_go.Client[v1beta1.GetOrganizationRoleRequest, v1beta1.GetOrganizationRoleResponse]
	updateOrganizationRole         *connect_go.Client[v1beta1.UpdateOrganizationRoleRequest, v1beta1.UpdateOrganizationRoleResponse]
	deleteOrganizationRole         *connect_go.Client[v1beta1.DeleteOrganizationRoleRequest, v1beta1.DeleteOrganizationRoleResponse]
	listOrganizations              *connect_go.Client[v1beta1.ListOrganizationsRequest, v1beta1.ListOrganizationsResponse]
	createOrganization             *connect_go.Client[v1beta1.CreateOrganizationRequest, v1beta1.CreateOrganizationResponse]
	getOrganization                *connect_go.Client[v1beta1.GetOrganizationRequest, v1beta1.GetOrganizationResponse]
	updateOrganization             *connect_go.Client[v1beta1.UpdateOrganizationRequest, v1beta1.UpdateOrganizationResponse]
	listOrganizationProjects       *connect_go.Client[v1beta1.ListOrganizationProjectsRequest, v1beta1.ListOrganizationProjectsResponse]
	listOrganizationAdmins         *connect_go.Client[v1beta1.ListOrganizationAdminsRequest, v1beta1.ListOrganizationAdminsResponse]
	listOrganizationUsers          *connect_go.Client[v1beta1.ListOrganizationUsersRequest, v1beta1.ListOrganizationUsersResponse]
	addOrganizationUsers           *connect_go.Client[v1beta1.AddOrganizationUsersRequest, v1beta1.AddOrganizationUsersResponse]
	removeOrganizationUser         *connect_go.Client[v1beta1.RemoveOrganizationUserRequest, v1beta1.RemoveOrganizationUserResponse]
	getOrganizationKyc             *connect_go.Client[v1beta1.GetOrganizationKycRequest, v1beta1.GetOrganizationKycResponse]
	listOrganizationServiceUsers   *connect_go.Client[v1beta1.ListOrganizationServiceUsersRequest, v1beta1.ListOrganizationServiceUsersResponse]
	listOrganizationInvitations    *connect_go.Client[v1beta1.ListOrganizationInvitationsRequest, v1beta1.ListOrganizationInvitationsResponse]
	createOrganizationInvitation   *connect_go.Client[v1beta1.CreateOrganizationInvitationRequest, v1beta1.CreateOrganizationInvitationResponse]
	getOrganizationInvitation      *connect_go.Client[v1beta1.GetOrganizationInvitationRequest, v1beta1.GetOrganizationInvitationResponse]
	acceptOrganizationInvitation   *connect_go.Client[v1beta1.AcceptOrganizationInvitationRequest, v1beta1.AcceptOrganizationInvitationResponse]
	deleteOrganizationInvitation   *connect_go.Client[v1beta1.DeleteOrganizationInvitationRequest, v1beta1.DeleteOrganizationInvitationResponse]
	listOrganizationDomains        *connect_go.Client[v1beta1.ListOrganizationDomainsRequest, v1beta1.ListOrganizationDomainsResponse]
	createOrganizationDomain       *connect_go.Client[v1beta1.CreateOrganizationDomainRequest, v1beta1.CreateOrganizationDomainResponse]
	deleteOrganizationDomain       *connect_go.Client[v1beta1.DeleteOrganizationDomainRequest, v1beta1.DeleteOrganizationDomainResponse]
	getOrganizationDomain          *connect_go.Client[v1beta1.GetOrganizationDomainRequest, v1beta1.GetOrganizationDomainResponse]
	verifyOrganizationDomain       *connect_go.Client[v1beta1.VerifyOrganizationDomainRequest, v1beta1.VerifyOrganizationDomainResponse]
	joinOrganization               *connect_go.Client[v1beta1.JoinOrganizationRequest, v1beta1.JoinOrganizationResponse]
	enableOrganization             *connect_go.Client[v1beta1.EnableOrganizationRequest, v1beta1.EnableOrganizationResponse]
	disableOrganization            *connect_go.Client[v1beta1.DisableOrganizationRequest, v1beta1.DisableOrganizationResponse]
	deleteOrganization             *connect_go.Client[v1beta1.DeleteOrganizationRequest, v1beta1.DeleteOrganizationResponse]
	createProject                  *connect_go.Client[v1beta1.CreateProjectRequest, v1beta1.CreateProjectResponse]
	getProject                     *connect_go.Client[v1beta1.GetProjectRequest, v1beta1.GetProjectResponse]
	updateProject                  *connect_go.Client[v1beta1.UpdateProjectRequest, v1beta1.UpdateProjectResponse]
	listProjectAdmins              *connect_go.Client[v1beta1.ListProjectAdminsRequest, v1beta1.ListProjectAdminsResponse]
	listProjectUsers               *connect_go.Client[v1beta1.ListProjectUsersRequest, v1beta1.ListProjectUsersResponse]
	listProjectServiceUsers        *connect_go.Client[v1beta1.ListProjectServiceUsersRequest, v1beta1.ListProjectServiceUsersResponse]
	listProjectGroups              *connect_go.Client[v1beta1.ListProjectGroupsRequest, v1beta1.ListProjectGroupsResponse]
	enableProject                  *connect_go.Client[v1beta1.EnableProjectRequest, v1beta1.EnableProjectResponse]
	disableProject                 *connect_go.Client[v1beta1.DisableProjectRequest, v1beta1.DisableProjectResponse]
	deleteProject                  *connect_go.Client[v1beta1.DeleteProjectRequest, v1beta1.DeleteProjectResponse]
	createPolicy                   *connect_go.Client[v1beta1.CreatePolicyRequest, v1beta1.CreatePolicyResponse]
	getPolicy                      *connect_go.Client[v1beta1.GetPolicyRequest, v1beta1.GetPolicyResponse]
	listPolicies                   *connect_go.Client[v1beta1.ListPoliciesRequest, v1beta1.ListPoliciesResponse]
	updatePolicy                   *connect_go.Client[v1beta1.UpdatePolicyRequest, v1beta1.UpdatePolicyResponse]
	deletePolicy                   *connect_go.Client[v1beta1.DeletePolicyRequest, v1beta1.DeletePolicyResponse]
	createPolicyForProject         *connect_go.Client[v1beta1.CreatePolicyForProjectRequest, v1beta1.CreatePolicyForProjectResponse]
	createRelation                 *connect_go.Client[v1beta1.CreateRelationRequest, v1beta1.CreateRelationResponse]
	getRelation                    *connect_go.Client[v1beta1.GetRelationRequest, v1beta1.GetRelationResponse]
	deleteRelation                 *connect_go.Client[v1beta1.DeleteRelationRequest, v1beta1.DeleteRelationResponse]
	listPermissions                *connect_go.Client[v1beta1.ListPermissionsRequest, v1beta1.ListPermissionsResponse]
	getPermission                  *connect_go.Client[v1beta1.GetPermissionRequest, v1beta1.GetPermissionResponse]
	listNamespaces                 *connect_go.Client[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse]
	getNamespace                   *connect_go.Client[v1beta1.GetNamespaceRequest, v1beta1.GetNamespaceResponse]
	listProjectResources           *connect_go.Client[v1beta1.ListProjectResourcesRequest, v1beta1.ListProjectResourcesResponse]
	createProjectResource          *connect_go.Client[v1beta1.CreateProjectResourceRequest, v1beta1.CreateProjectResourceResponse]
	getProjectResource             *connect_go.Client[v1beta1.GetProjectResourceRequest, v1beta1.GetProjectResourceResponse]
	updateProjectResource          *connect_go.Client[v1beta1.UpdateProjectResourceRequest, v1beta1.UpdateProjectResourceResponse]
	deleteProjectResource          *connect_go.Client[v1beta1.DeleteProjectResourceRequest, v1beta1.DeleteProjectResourceResponse]
	checkResourcePermission        *connect_go.Client[v1beta1.CheckResourcePermissionRequest, v1beta1.CheckResourcePermissionResponse]
	batchCheckPermission           *connect_go.Client[v1beta1.BatchCheckPermissionRequest, v1beta1.BatchCheckPermissionResponse]
	getJWKs                        *connect_go.Client[v1beta1.GetJWKsRequest, v1beta1.GetJWKsResponse]
	listAuthStrategies             *connect_go.Client[v1beta1.ListAuthStrategiesRequest, v1beta1.ListAuthStrategiesResponse]
	authenticate                   *connect_go.Client[v1beta1.AuthenticateRequest, v1beta1.AuthenticateResponse]
	authCallback                   *connect_go.Client[v1beta1.AuthCallbackRequest, v1beta1.AuthCallbackResponse]
	authToken                      *connect_go.Client[v1beta1.AuthTokenRequest, v1beta1.AuthTokenResponse]
	authLogout                     *connect_go.Client[v1beta1.AuthLogoutRequest, v1beta1.AuthLogoutResponse]
	listMetaSchemas                *connect_go.Client[v1beta1.ListMetaSchemasRequest, v1beta1.ListMetaSchemasResponse]
	createMetaSchema               *connect_go.Client[v1beta1.CreateMetaSchemaRequest, v1beta1.CreateMetaSchemaResponse]
	getMetaSchema                  *connect_go.Client[v1beta1.GetMetaSchemaRequest, v1beta1.GetMetaSchemaResponse]
	updateMetaSchema               *connect_go.Client[v1beta1.UpdateMetaSchemaRequest, v1beta1.UpdateMetaSchemaResponse]
	deleteMetaSchema               *connect_go.Client[v1beta1.DeleteMetaSchemaRequest, v1beta1.DeleteMetaSchemaResponse]
	listOrganizationAuditLogs      *connect_go.Client[v1beta1.ListOrganizationAuditLogsRequest, v1beta1.ListOrganizationAuditLogsResponse]
	createOrganizationAuditLogs    *connect_go.Client[v1beta1.CreateOrganizationAuditLogsRequest, v1beta1.CreateOrganizationAuditLogsResponse]
	getOrganizationAuditLog        *connect_go.Client[v1beta1.GetOrganizationAuditLogRequest, v1beta1.GetOrganizationAuditLogResponse]
	describePreferences            *connect_go.Client[v1beta1.DescribePreferencesRequest, v1beta1.DescribePreferencesResponse]
	createOrganizationPreferences  *connect_go.Client[v1beta1.CreateOrganizationPreferencesRequest, v1beta1.CreateOrganizationPreferencesResponse]
	listOrganizationPreferences    *connect_go.Client[v1beta1.ListOrganizationPreferencesRequest, v1beta1.ListOrganizationPreferencesResponse]
	createProjectPreferences       *connect_go.Client[v1beta1.CreateProjectPreferencesRequest, v1beta1.CreateProjectPreferencesResponse]
	listProjectPreferences         *connect_go.Client[v1beta1.ListProjectPreferencesRequest, v1beta1.ListProjectPreferencesResponse]
	createGroupPreferences         *connect_go.Client[v1beta1.CreateGroupPreferencesRequest, v1beta1.CreateGroupPreferencesResponse]
	listGroupPreferences           *connect_go.Client[v1beta1.ListGroupPreferencesRequest, v1beta1.ListGroupPreferencesResponse]
	createUserPreferences          *connect_go.Client[v1beta1.CreateUserPreferencesRequest, v1beta1.CreateUserPreferencesResponse]
	listUserPreferences            *connect_go.Client[v1beta1.ListUserPreferencesRequest, v1beta1.ListUserPreferencesResponse]
	createCurrentUserPreferences   *connect_go.Client[v1beta1.CreateCurrentUserPreferencesRequest, v1beta1.CreateCurrentUserPreferencesResponse]
	listCurrentUserPreferences     *connect_go.Client[v1beta1.ListCurrentUserPreferencesRequest, v1beta1.ListCurrentUserPreferencesResponse]
	createBillingAccount           *connect_go.Client[v1beta1.CreateBillingAccountRequest, v1beta1.CreateBillingAccountResponse]
	getBillingAccount              *connect_go.Client[v1beta1.GetBillingAccountRequest, v1beta1.GetBillingAccountResponse]
	updateBillingAccount           *connect_go.Client[v1beta1.UpdateBillingAccountRequest, v1beta1.UpdateBillingAccountResponse]
	registerBillingAccount         *connect_go.Client[v1beta1.RegisterBillingAccountRequest, v1beta1.RegisterBillingAccountResponse]
	listBillingAccounts            *connect_go.Client[v1beta1.ListBillingAccountsRequest, v1beta1.ListBillingAccountsResponse]
	deleteBillingAccount           *connect_go.Client[v1beta1.DeleteBillingAccountRequest, v1beta1.DeleteBillingAccountResponse]
	enableBillingAccount           *connect_go.Client[v1beta1.EnableBillingAccountRequest, v1beta1.EnableBillingAccountResponse]
	disableBillingAccount          *connect_go.Client[v1beta1.DisableBillingAccountRequest, v1beta1.DisableBillingAccountResponse]
	getBillingBalance              *connect_go.Client[v1beta1.GetBillingBalanceRequest, v1beta1.GetBillingBalanceResponse]
	hasTrialed                     *connect_go.Client[v1beta1.HasTrialedRequest, v1beta1.HasTrialedResponse]
	getSubscription                *connect_go.Client[v1beta1.GetSubscriptionRequest, v1beta1.GetSubscriptionResponse]
	cancelSubscription             *connect_go.Client[v1beta1.CancelSubscriptionRequest, v1beta1.CancelSubscriptionResponse]
	listSubscriptions              *connect_go.Client[v1beta1.ListSubscriptionsRequest, v1beta1.ListSubscriptionsResponse]
	changeSubscription             *connect_go.Client[v1beta1.ChangeSubscriptionRequest, v1beta1.ChangeSubscriptionResponse]
	updateSubscription             *connect_go.Client[v1beta1.UpdateSubscriptionRequest, v1beta1.UpdateSubscriptionResponse]
	createProduct                  *connect_go.Client[v1beta1.CreateProductRequest, v1beta1.CreateProductResponse]
	getProduct                     *connect_go.Client[v1beta1.GetProductRequest, v1beta1.GetProductResponse]
	listProducts                   *connect_go.Client[v1beta1.ListProductsRequest, v1beta1.ListProductsResponse]
	updateProduct                  *connect_go.Client[v1beta1.UpdateProductRequest, v1beta1.UpdateProductResponse]
	createFeature                  *connect_go.Client[v1beta1.CreateFeatureRequest, v1beta1.CreateFeatureResponse]
	getFeature                     *connect_go.Client[v1beta1.GetFeatureRequest, v1beta1.GetFeatureResponse]
	updateFeature                  *connect_go.Client[v1beta1.UpdateFeatureRequest, v1beta1.UpdateFeatureResponse]
	listFeatures                   *connect_go.Client[v1beta1.ListFeaturesRequest, v1beta1.ListFeaturesResponse]
	createPlan                     *connect_go.Client[v1beta1.CreatePlanRequest, v1beta1.CreatePlanResponse]
	listPlans                      *connect_go.Client[v1beta1.ListPlansRequest, v1beta1.ListPlansResponse]
	getPlan                        *connect_go.Client[v1beta1.GetPlanRequest, v1beta1.GetPlanResponse]
	updatePlan                     *connect_go.Client[v1beta1.UpdatePlanRequest, v1beta1.UpdatePlanResponse]
	createCheckout                 *connect_go.Client[v1beta1.CreateCheckoutRequest, v1beta1.CreateCheckoutResponse]
	listCheckouts                  *connect_go.Client[v1beta1.ListCheckoutsRequest, v1beta1.ListCheckoutsResponse]
	getCheckout                    *connect_go.Client[v1beta1.GetCheckoutRequest, v1beta1.GetCheckoutResponse]
	checkFeatureEntitlement        *connect_go.Client[v1beta1.CheckFeatureEntitlementRequest, v1beta1.CheckFeatureEntitlementResponse]
	createBillingUsage             *connect_go.Client[v1beta1.CreateBillingUsageRequest, v1beta1.CreateBillingUsageResponse]
	listBillingTransactions        *connect_go.Client[v1beta1.ListBillingTransactionsRequest, v1beta1.ListBillingTransactionsResponse]
	totalDebitedTransactions       *connect_go.Client[v1beta1.TotalDebitedTransactionsRequest, v1beta1.TotalDebitedTransactionsResponse]
	listInvoices                   *connect_go.Client[v1beta1.ListInvoicesRequest, v1beta1.ListInvoicesResponse]
	getUpcomingInvoice             *connect_go.Client[v1beta1.GetUpcomingInvoiceRequest, v1beta1.GetUpcomingInvoiceResponse]
	billingWebhookCallback         *connect_go.Client[v1beta1.BillingWebhookCallbackRequest, v1beta1.BillingWebhookCallbackResponse]
	createProspectPublic           *connect_go.Client[v1beta1.CreateProspectPublicRequest, v1beta1.CreateProspectPublicResponse]
}

// ListUsers calls raystack.frontier.v1beta1.FrontierService.ListUsers.
func (c *frontierServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListUsersRequest]) (*connect_go.Response[v1beta1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// CreateUser calls raystack.frontier.v1beta1.FrontierService.CreateUser.
func (c *frontierServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[v1beta1.CreateUserRequest]) (*connect_go.Response[v1beta1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls raystack.frontier.v1beta1.FrontierService.GetUser.
func (c *frontierServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1beta1.GetUserRequest]) (*connect_go.Response[v1beta1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ListUserGroups calls raystack.frontier.v1beta1.FrontierService.ListUserGroups.
func (c *frontierServiceClient) ListUserGroups(ctx context.Context, req *connect_go.Request[v1beta1.ListUserGroupsRequest]) (*connect_go.Response[v1beta1.ListUserGroupsResponse], error) {
	return c.listUserGroups.CallUnary(ctx, req)
}

// ListCurrentUserGroups calls raystack.frontier.v1beta1.FrontierService.ListCurrentUserGroups.
func (c *frontierServiceClient) ListCurrentUserGroups(ctx context.Context, req *connect_go.Request[v1beta1.ListCurrentUserGroupsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserGroupsResponse], error) {
	return c.listCurrentUserGroups.CallUnary(ctx, req)
}

// GetCurrentUser calls raystack.frontier.v1beta1.FrontierService.GetCurrentUser.
func (c *frontierServiceClient) GetCurrentUser(ctx context.Context, req *connect_go.Request[v1beta1.GetCurrentUserRequest]) (*connect_go.Response[v1beta1.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// UpdateUser calls raystack.frontier.v1beta1.FrontierService.UpdateUser.
func (c *frontierServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[v1beta1.UpdateUserRequest]) (*connect_go.Response[v1beta1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// UpdateCurrentUser calls raystack.frontier.v1beta1.FrontierService.UpdateCurrentUser.
func (c *frontierServiceClient) UpdateCurrentUser(ctx context.Context, req *connect_go.Request[v1beta1.UpdateCurrentUserRequest]) (*connect_go.Response[v1beta1.UpdateCurrentUserResponse], error) {
	return c.updateCurrentUser.CallUnary(ctx, req)
}

// EnableUser calls raystack.frontier.v1beta1.FrontierService.EnableUser.
func (c *frontierServiceClient) EnableUser(ctx context.Context, req *connect_go.Request[v1beta1.EnableUserRequest]) (*connect_go.Response[v1beta1.EnableUserResponse], error) {
	return c.enableUser.CallUnary(ctx, req)
}

// DisableUser calls raystack.frontier.v1beta1.FrontierService.DisableUser.
func (c *frontierServiceClient) DisableUser(ctx context.Context, req *connect_go.Request[v1beta1.DisableUserRequest]) (*connect_go.Response[v1beta1.DisableUserResponse], error) {
	return c.disableUser.CallUnary(ctx, req)
}

// DeleteUser calls raystack.frontier.v1beta1.FrontierService.DeleteUser.
func (c *frontierServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[v1beta1.DeleteUserRequest]) (*connect_go.Response[v1beta1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListOrganizationsByUser calls raystack.frontier.v1beta1.FrontierService.ListOrganizationsByUser.
func (c *frontierServiceClient) ListOrganizationsByUser(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationsByUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByUserResponse], error) {
	return c.listOrganizationsByUser.CallUnary(ctx, req)
}

// ListOrganizationsByCurrentUser calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationsByCurrentUser.
func (c *frontierServiceClient) ListOrganizationsByCurrentUser(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByCurrentUserResponse], error) {
	return c.listOrganizationsByCurrentUser.CallUnary(ctx, req)
}

// ListProjectsByUser calls raystack.frontier.v1beta1.FrontierService.ListProjectsByUser.
func (c *frontierServiceClient) ListProjectsByUser(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectsByUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByUserResponse], error) {
	return c.listProjectsByUser.CallUnary(ctx, req)
}

// ListProjectsByCurrentUser calls
// raystack.frontier.v1beta1.FrontierService.ListProjectsByCurrentUser.
func (c *frontierServiceClient) ListProjectsByCurrentUser(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByCurrentUserResponse], error) {
	return c.listProjectsByCurrentUser.CallUnary(ctx, req)
}

// ListUserInvitations calls raystack.frontier.v1beta1.FrontierService.ListUserInvitations.
func (c *frontierServiceClient) ListUserInvitations(ctx context.Context, req *connect_go.Request[v1beta1.ListUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListUserInvitationsResponse], error) {
	return c.listUserInvitations.CallUnary(ctx, req)
}

// ListCurrentUserInvitations calls
// raystack.frontier.v1beta1.FrontierService.ListCurrentUserInvitations.
func (c *frontierServiceClient) ListCurrentUserInvitations(ctx context.Context, req *connect_go.Request[v1beta1.ListCurrentUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserInvitationsResponse], error) {
	return c.listCurrentUserInvitations.CallUnary(ctx, req)
}

// ListServiceUsers calls raystack.frontier.v1beta1.FrontierService.ListServiceUsers.
func (c *frontierServiceClient) ListServiceUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListServiceUsersRequest]) (*connect_go.Response[v1beta1.ListServiceUsersResponse], error) {
	return c.listServiceUsers.CallUnary(ctx, req)
}

// CreateServiceUser calls raystack.frontier.v1beta1.FrontierService.CreateServiceUser.
func (c *frontierServiceClient) CreateServiceUser(ctx context.Context, req *connect_go.Request[v1beta1.CreateServiceUserRequest]) (*connect_go.Response[v1beta1.CreateServiceUserResponse], error) {
	return c.createServiceUser.CallUnary(ctx, req)
}

// GetServiceUser calls raystack.frontier.v1beta1.FrontierService.GetServiceUser.
func (c *frontierServiceClient) GetServiceUser(ctx context.Context, req *connect_go.Request[v1beta1.GetServiceUserRequest]) (*connect_go.Response[v1beta1.GetServiceUserResponse], error) {
	return c.getServiceUser.CallUnary(ctx, req)
}

// DeleteServiceUser calls raystack.frontier.v1beta1.FrontierService.DeleteServiceUser.
func (c *frontierServiceClient) DeleteServiceUser(ctx context.Context, req *connect_go.Request[v1beta1.DeleteServiceUserRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserResponse], error) {
	return c.deleteServiceUser.CallUnary(ctx, req)
}

// CreateServiceUserJWK calls raystack.frontier.v1beta1.FrontierService.CreateServiceUserJWK.
func (c *frontierServiceClient) CreateServiceUserJWK(ctx context.Context, req *connect_go.Request[v1beta1.CreateServiceUserJWKRequest]) (*connect_go.Response[v1beta1.CreateServiceUserJWKResponse], error) {
	return c.createServiceUserJWK.CallUnary(ctx, req)
}

// ListServiceUserJWKs calls raystack.frontier.v1beta1.FrontierService.ListServiceUserJWKs.
func (c *frontierServiceClient) ListServiceUserJWKs(ctx context.Context, req *connect_go.Request[v1beta1.ListServiceUserJWKsRequest]) (*connect_go.Response[v1beta1.ListServiceUserJWKsResponse], error) {
	return c.listServiceUserJWKs.CallUnary(ctx, req)
}

// GetServiceUserJWK calls raystack.frontier.v1beta1.FrontierService.GetServiceUserJWK.
func (c *frontierServiceClient) GetServiceUserJWK(ctx context.Context, req *connect_go.Request[v1beta1.GetServiceUserJWKRequest]) (*connect_go.Response[v1beta1.GetServiceUserJWKResponse], error) {
	return c.getServiceUserJWK.CallUnary(ctx, req)
}

// DeleteServiceUserJWK calls raystack.frontier.v1beta1.FrontierService.DeleteServiceUserJWK.
func (c *frontierServiceClient) DeleteServiceUserJWK(ctx context.Context, req *connect_go.Request[v1beta1.DeleteServiceUserJWKRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserJWKResponse], error) {
	return c.deleteServiceUserJWK.CallUnary(ctx, req)
}

// CreateServiceUserCredential calls
// raystack.frontier.v1beta1.FrontierService.CreateServiceUserCredential.
func (c *frontierServiceClient) CreateServiceUserCredential(ctx context.Context, req *connect_go.Request[v1beta1.CreateServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.CreateServiceUserCredentialResponse], error) {
	return c.createServiceUserCredential.CallUnary(ctx, req)
}

// ListServiceUserCredentials calls
// raystack.frontier.v1beta1.FrontierService.ListServiceUserCredentials.
func (c *frontierServiceClient) ListServiceUserCredentials(ctx context.Context, req *connect_go.Request[v1beta1.ListServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.ListServiceUserCredentialsResponse], error) {
	return c.listServiceUserCredentials.CallUnary(ctx, req)
}

// DeleteServiceUserCredential calls
// raystack.frontier.v1beta1.FrontierService.DeleteServiceUserCredential.
func (c *frontierServiceClient) DeleteServiceUserCredential(ctx context.Context, req *connect_go.Request[v1beta1.DeleteServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserCredentialResponse], error) {
	return c.deleteServiceUserCredential.CallUnary(ctx, req)
}

// CreateServiceUserToken calls raystack.frontier.v1beta1.FrontierService.CreateServiceUserToken.
func (c *frontierServiceClient) CreateServiceUserToken(ctx context.Context, req *connect_go.Request[v1beta1.CreateServiceUserTokenRequest]) (*connect_go.Response[v1beta1.CreateServiceUserTokenResponse], error) {
	return c.createServiceUserToken.CallUnary(ctx, req)
}

// ListServiceUserTokens calls raystack.frontier.v1beta1.FrontierService.ListServiceUserTokens.
func (c *frontierServiceClient) ListServiceUserTokens(ctx context.Context, req *connect_go.Request[v1beta1.ListServiceUserTokensRequest]) (*connect_go.Response[v1beta1.ListServiceUserTokensResponse], error) {
	return c.listServiceUserTokens.CallUnary(ctx, req)
}

// DeleteServiceUserToken calls raystack.frontier.v1beta1.FrontierService.DeleteServiceUserToken.
func (c *frontierServiceClient) DeleteServiceUserToken(ctx context.Context, req *connect_go.Request[v1beta1.DeleteServiceUserTokenRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserTokenResponse], error) {
	return c.deleteServiceUserToken.CallUnary(ctx, req)
}

// ListServiceUserProjects calls raystack.frontier.v1beta1.FrontierService.ListServiceUserProjects.
func (c *frontierServiceClient) ListServiceUserProjects(ctx context.Context, req *connect_go.Request[v1beta1.ListServiceUserProjectsRequest]) (*connect_go.Response[v1beta1.ListServiceUserProjectsResponse], error) {
	return c.listServiceUserProjects.CallUnary(ctx, req)
}

// ListOrganizationGroups calls raystack.frontier.v1beta1.FrontierService.ListOrganizationGroups.
func (c *frontierServiceClient) ListOrganizationGroups(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationGroupsRequest]) (*connect_go.Response[v1beta1.ListOrganizationGroupsResponse], error) {
	return c.listOrganizationGroups.CallUnary(ctx, req)
}

// CreateGroup calls raystack.frontier.v1beta1.FrontierService.CreateGroup.
func (c *frontierServiceClient) CreateGroup(ctx context.Context, req *connect_go.Request[v1beta1.CreateGroupRequest]) (*connect_go.Response[v1beta1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetGroup calls raystack.frontier.v1beta1.FrontierService.GetGroup.
func (c *frontierServiceClient) GetGroup(ctx context.Context, req *connect_go.Request[v1beta1.GetGroupRequest]) (*connect_go.Response[v1beta1.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// UpdateGroup calls raystack.frontier.v1beta1.FrontierService.UpdateGroup.
func (c *frontierServiceClient) UpdateGroup(ctx context.Context, req *connect_go.Request[v1beta1.UpdateGroupRequest]) (*connect_go.Response[v1beta1.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// ListGroupUsers calls raystack.frontier.v1beta1.FrontierService.ListGroupUsers.
func (c *frontierServiceClient) ListGroupUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListGroupUsersRequest]) (*connect_go.Response[v1beta1.ListGroupUsersResponse], error) {
	return c.listGroupUsers.CallUnary(ctx, req)
}

// AddGroupUsers calls raystack.frontier.v1beta1.FrontierService.AddGroupUsers.
func (c *frontierServiceClient) AddGroupUsers(ctx context.Context, req *connect_go.Request[v1beta1.AddGroupUsersRequest]) (*connect_go.Response[v1beta1.AddGroupUsersResponse], error) {
	return c.addGroupUsers.CallUnary(ctx, req)
}

// RemoveGroupUser calls raystack.frontier.v1beta1.FrontierService.RemoveGroupUser.
func (c *frontierServiceClient) RemoveGroupUser(ctx context.Context, req *connect_go.Request[v1beta1.RemoveGroupUserRequest]) (*connect_go.Response[v1beta1.RemoveGroupUserResponse], error) {
	return c.removeGroupUser.CallUnary(ctx, req)
}

// EnableGroup calls raystack.frontier.v1beta1.FrontierService.EnableGroup.
func (c *frontierServiceClient) EnableGroup(ctx context.Context, req *connect_go.Request[v1beta1.EnableGroupRequest]) (*connect_go.Response[v1beta1.EnableGroupResponse], error) {
	return c.enableGroup.CallUnary(ctx, req)
}

// DisableGroup calls raystack.frontier.v1beta1.FrontierService.DisableGroup.
func (c *frontierServiceClient) DisableGroup(ctx context.Context, req *connect_go.Request[v1beta1.DisableGroupRequest]) (*connect_go.Response[v1beta1.DisableGroupResponse], error) {
	return c.disableGroup.CallUnary(ctx, req)
}

// DeleteGroup calls raystack.frontier.v1beta1.FrontierService.DeleteGroup.
func (c *frontierServiceClient) DeleteGroup(ctx context.Context, req *connect_go.Request[v1beta1.DeleteGroupRequest]) (*connect_go.Response[v1beta1.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// ListRoles calls raystack.frontier.v1beta1.FrontierService.ListRoles.
func (c *frontierServiceClient) ListRoles(ctx context.Context, req *connect_go.Request[v1beta1.ListRolesRequest]) (*connect_go.Response[v1beta1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// ListOrganizationRoles calls raystack.frontier.v1beta1.FrontierService.ListOrganizationRoles.
func (c *frontierServiceClient) ListOrganizationRoles(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationRolesRequest]) (*connect_go.Response[v1beta1.ListOrganizationRolesResponse], error) {
	return c.listOrganizationRoles.CallUnary(ctx, req)
}

// CreateOrganizationRole calls raystack.frontier.v1beta1.FrontierService.CreateOrganizationRole.
func (c *frontierServiceClient) CreateOrganizationRole(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.CreateOrganizationRoleResponse], error) {
	return c.createOrganizationRole.CallUnary(ctx, req)
}

// GetOrganizationRole calls raystack.frontier.v1beta1.FrontierService.GetOrganizationRole.
func (c *frontierServiceClient) GetOrganizationRole(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationRoleRequest]) (*connect_go.Response[v1beta1.GetOrganizationRoleResponse], error) {
	return c.getOrganizationRole.CallUnary(ctx, req)
}

// UpdateOrganizationRole calls raystack.frontier.v1beta1.FrontierService.UpdateOrganizationRole.
func (c *frontierServiceClient) UpdateOrganizationRole(ctx context.Context, req *connect_go.Request[v1beta1.UpdateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationRoleResponse], error) {
	return c.updateOrganizationRole.CallUnary(ctx, req)
}

// DeleteOrganizationRole calls raystack.frontier.v1beta1.FrontierService.DeleteOrganizationRole.
func (c *frontierServiceClient) DeleteOrganizationRole(ctx context.Context, req *connect_go.Request[v1beta1.DeleteOrganizationRoleRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationRoleResponse], error) {
	return c.deleteOrganizationRole.CallUnary(ctx, req)
}

// ListOrganizations calls raystack.frontier.v1beta1.FrontierService.ListOrganizations.
func (c *frontierServiceClient) ListOrganizations(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// CreateOrganization calls raystack.frontier.v1beta1.FrontierService.CreateOrganization.
func (c *frontierServiceClient) CreateOrganization(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls raystack.frontier.v1beta1.FrontierService.GetOrganization.
func (c *frontierServiceClient) GetOrganization(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationRequest]) (*connect_go.Response[v1beta1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls raystack.frontier.v1beta1.FrontierService.UpdateOrganization.
func (c *frontierServiceClient) UpdateOrganization(ctx context.Context, req *connect_go.Request[v1beta1.UpdateOrganizationRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizationProjects calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationProjects.
func (c *frontierServiceClient) ListOrganizationProjects(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.ListOrganizationProjectsResponse], error) {
	return c.listOrganizationProjects.CallUnary(ctx, req)
}

// ListOrganizationAdmins calls raystack.frontier.v1beta1.FrontierService.ListOrganizationAdmins.
func (c *frontierServiceClient) ListOrganizationAdmins(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationAdminsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAdminsResponse], error) {
	return c.listOrganizationAdmins.CallUnary(ctx, req)
}

// ListOrganizationUsers calls raystack.frontier.v1beta1.FrontierService.ListOrganizationUsers.
func (c *frontierServiceClient) ListOrganizationUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationUsersResponse], error) {
	return c.listOrganizationUsers.CallUnary(ctx, req)
}

// AddOrganizationUsers calls raystack.frontier.v1beta1.FrontierService.AddOrganizationUsers.
func (c *frontierServiceClient) AddOrganizationUsers(ctx context.Context, req *connect_go.Request[v1beta1.AddOrganizationUsersRequest]) (*connect_go.Response[v1beta1.AddOrganizationUsersResponse], error) {
	return c.addOrganizationUsers.CallUnary(ctx, req)
}

// RemoveOrganizationUser calls raystack.frontier.v1beta1.FrontierService.RemoveOrganizationUser.
func (c *frontierServiceClient) RemoveOrganizationUser(ctx context.Context, req *connect_go.Request[v1beta1.RemoveOrganizationUserRequest]) (*connect_go.Response[v1beta1.RemoveOrganizationUserResponse], error) {
	return c.removeOrganizationUser.CallUnary(ctx, req)
}

// GetOrganizationKyc calls raystack.frontier.v1beta1.FrontierService.GetOrganizationKyc.
func (c *frontierServiceClient) GetOrganizationKyc(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationKycRequest]) (*connect_go.Response[v1beta1.GetOrganizationKycResponse], error) {
	return c.getOrganizationKyc.CallUnary(ctx, req)
}

// ListOrganizationServiceUsers calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationServiceUsers.
func (c *frontierServiceClient) ListOrganizationServiceUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationServiceUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationServiceUsersResponse], error) {
	return c.listOrganizationServiceUsers.CallUnary(ctx, req)
}

// ListOrganizationInvitations calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationInvitations.
func (c *frontierServiceClient) ListOrganizationInvitations(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationInvitationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationInvitationsResponse], error) {
	return c.listOrganizationInvitations.CallUnary(ctx, req)
}

// CreateOrganizationInvitation calls
// raystack.frontier.v1beta1.FrontierService.CreateOrganizationInvitation.
func (c *frontierServiceClient) CreateOrganizationInvitation(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationInvitationResponse], error) {
	return c.createOrganizationInvitation.CallUnary(ctx, req)
}

// GetOrganizationInvitation calls
// raystack.frontier.v1beta1.FrontierService.GetOrganizationInvitation.
func (c *frontierServiceClient) GetOrganizationInvitation(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.GetOrganizationInvitationResponse], error) {
	return c.getOrganizationInvitation.CallUnary(ctx, req)
}

// AcceptOrganizationInvitation calls
// raystack.frontier.v1beta1.FrontierService.AcceptOrganizationInvitation.
func (c *frontierServiceClient) AcceptOrganizationInvitation(ctx context.Context, req *connect_go.Request[v1beta1.AcceptOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.AcceptOrganizationInvitationResponse], error) {
	return c.acceptOrganizationInvitation.CallUnary(ctx, req)
}

// DeleteOrganizationInvitation calls
// raystack.frontier.v1beta1.FrontierService.DeleteOrganizationInvitation.
func (c *frontierServiceClient) DeleteOrganizationInvitation(ctx context.Context, req *connect_go.Request[v1beta1.DeleteOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationInvitationResponse], error) {
	return c.deleteOrganizationInvitation.CallUnary(ctx, req)
}

// ListOrganizationDomains calls raystack.frontier.v1beta1.FrontierService.ListOrganizationDomains.
func (c *frontierServiceClient) ListOrganizationDomains(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationDomainsRequest]) (*connect_go.Response[v1beta1.ListOrganizationDomainsResponse], error) {
	return c.listOrganizationDomains.CallUnary(ctx, req)
}

// CreateOrganizationDomain calls
// raystack.frontier.v1beta1.FrontierService.CreateOrganizationDomain.
func (c *frontierServiceClient) CreateOrganizationDomain(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationDomainRequest]) (*connect_go.Response[v1beta1.CreateOrganizationDomainResponse], error) {
	return c.createOrganizationDomain.CallUnary(ctx, req)
}

// DeleteOrganizationDomain calls
// raystack.frontier.v1beta1.FrontierService.DeleteOrganizationDomain.
func (c *frontierServiceClient) DeleteOrganizationDomain(ctx context.Context, req *connect_go.Request[v1beta1.DeleteOrganizationDomainRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationDomainResponse], error) {
	return c.deleteOrganizationDomain.CallUnary(ctx, req)
}

// GetOrganizationDomain calls raystack.frontier.v1beta1.FrontierService.GetOrganizationDomain.
func (c *frontierServiceClient) GetOrganizationDomain(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationDomainRequest]) (*connect_go.Response[v1beta1.GetOrganizationDomainResponse], error) {
	return c.getOrganizationDomain.CallUnary(ctx, req)
}

// VerifyOrganizationDomain calls
// raystack.frontier.v1beta1.FrontierService.VerifyOrganizationDomain.
func (c *frontierServiceClient) VerifyOrganizationDomain(ctx context.Context, req *connect_go.Request[v1beta1.VerifyOrganizationDomainRequest]) (*connect_go.Response[v1beta1.VerifyOrganizationDomainResponse], error) {
	return c.verifyOrganizationDomain.CallUnary(ctx, req)
}

// JoinOrganization calls raystack.frontier.v1beta1.FrontierService.JoinOrganization.
func (c *frontierServiceClient) JoinOrganization(ctx context.Context, req *connect_go.Request[v1beta1.JoinOrganizationRequest]) (*connect_go.Response[v1beta1.JoinOrganizationResponse], error) {
	return c.joinOrganization.CallUnary(ctx, req)
}

// EnableOrganization calls raystack.frontier.v1beta1.FrontierService.EnableOrganization.
func (c *frontierServiceClient) EnableOrganization(ctx context.Context, req *connect_go.Request[v1beta1.EnableOrganizationRequest]) (*connect_go.Response[v1beta1.EnableOrganizationResponse], error) {
	return c.enableOrganization.CallUnary(ctx, req)
}

// DisableOrganization calls raystack.frontier.v1beta1.FrontierService.DisableOrganization.
func (c *frontierServiceClient) DisableOrganization(ctx context.Context, req *connect_go.Request[v1beta1.DisableOrganizationRequest]) (*connect_go.Response[v1beta1.DisableOrganizationResponse], error) {
	return c.disableOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls raystack.frontier.v1beta1.FrontierService.DeleteOrganization.
func (c *frontierServiceClient) DeleteOrganization(ctx context.Context, req *connect_go.Request[v1beta1.DeleteOrganizationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// CreateProject calls raystack.frontier.v1beta1.FrontierService.CreateProject.
func (c *frontierServiceClient) CreateProject(ctx context.Context, req *connect_go.Request[v1beta1.CreateProjectRequest]) (*connect_go.Response[v1beta1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// GetProject calls raystack.frontier.v1beta1.FrontierService.GetProject.
func (c *frontierServiceClient) GetProject(ctx context.Context, req *connect_go.Request[v1beta1.GetProjectRequest]) (*connect_go.Response[v1beta1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// UpdateProject calls raystack.frontier.v1beta1.FrontierService.UpdateProject.
func (c *frontierServiceClient) UpdateProject(ctx context.Context, req *connect_go.Request[v1beta1.UpdateProjectRequest]) (*connect_go.Response[v1beta1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// ListProjectAdmins calls raystack.frontier.v1beta1.FrontierService.ListProjectAdmins.
func (c *frontierServiceClient) ListProjectAdmins(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectAdminsRequest]) (*connect_go.Response[v1beta1.ListProjectAdminsResponse], error) {
	return c.listProjectAdmins.CallUnary(ctx, req)
}

// ListProjectUsers calls raystack.frontier.v1beta1.FrontierService.ListProjectUsers.
func (c *frontierServiceClient) ListProjectUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectUsersRequest]) (*connect_go.Response[v1beta1.ListProjectUsersResponse], error) {
	return c.listProjectUsers.CallUnary(ctx, req)
}

// ListProjectServiceUsers calls raystack.frontier.v1beta1.FrontierService.ListProjectServiceUsers.
func (c *frontierServiceClient) ListProjectServiceUsers(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectServiceUsersRequest]) (*connect_go.Response[v1beta1.ListProjectServiceUsersResponse], error) {
	return c.listProjectServiceUsers.CallUnary(ctx, req)
}

// ListProjectGroups calls raystack.frontier.v1beta1.FrontierService.ListProjectGroups.
func (c *frontierServiceClient) ListProjectGroups(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectGroupsRequest]) (*connect_go.Response[v1beta1.ListProjectGroupsResponse], error) {
	return c.listProjectGroups.CallUnary(ctx, req)
}

// EnableProject calls raystack.frontier.v1beta1.FrontierService.EnableProject.
func (c *frontierServiceClient) EnableProject(ctx context.Context, req *connect_go.Request[v1beta1.EnableProjectRequest]) (*connect_go.Response[v1beta1.EnableProjectResponse], error) {
	return c.enableProject.CallUnary(ctx, req)
}

// DisableProject calls raystack.frontier.v1beta1.FrontierService.DisableProject.
func (c *frontierServiceClient) DisableProject(ctx context.Context, req *connect_go.Request[v1beta1.DisableProjectRequest]) (*connect_go.Response[v1beta1.DisableProjectResponse], error) {
	return c.disableProject.CallUnary(ctx, req)
}

// DeleteProject calls raystack.frontier.v1beta1.FrontierService.DeleteProject.
func (c *frontierServiceClient) DeleteProject(ctx context.Context, req *connect_go.Request[v1beta1.DeleteProjectRequest]) (*connect_go.Response[v1beta1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// CreatePolicy calls raystack.frontier.v1beta1.FrontierService.CreatePolicy.
func (c *frontierServiceClient) CreatePolicy(ctx context.Context, req *connect_go.Request[v1beta1.CreatePolicyRequest]) (*connect_go.Response[v1beta1.CreatePolicyResponse], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// GetPolicy calls raystack.frontier.v1beta1.FrontierService.GetPolicy.
func (c *frontierServiceClient) GetPolicy(ctx context.Context, req *connect_go.Request[v1beta1.GetPolicyRequest]) (*connect_go.Response[v1beta1.GetPolicyResponse], error) {
	return c.getPolicy.CallUnary(ctx, req)
}

// ListPolicies calls raystack.frontier.v1beta1.FrontierService.ListPolicies.
func (c *frontierServiceClient) ListPolicies(ctx context.Context, req *connect_go.Request[v1beta1.ListPoliciesRequest]) (*connect_go.Response[v1beta1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// UpdatePolicy calls raystack.frontier.v1beta1.FrontierService.UpdatePolicy.
func (c *frontierServiceClient) UpdatePolicy(ctx context.Context, req *connect_go.Request[v1beta1.UpdatePolicyRequest]) (*connect_go.Response[v1beta1.UpdatePolicyResponse], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls raystack.frontier.v1beta1.FrontierService.DeletePolicy.
func (c *frontierServiceClient) DeletePolicy(ctx context.Context, req *connect_go.Request[v1beta1.DeletePolicyRequest]) (*connect_go.Response[v1beta1.DeletePolicyResponse], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// CreatePolicyForProject calls raystack.frontier.v1beta1.FrontierService.CreatePolicyForProject.
func (c *frontierServiceClient) CreatePolicyForProject(ctx context.Context, req *connect_go.Request[v1beta1.CreatePolicyForProjectRequest]) (*connect_go.Response[v1beta1.CreatePolicyForProjectResponse], error) {
	return c.createPolicyForProject.CallUnary(ctx, req)
}

// CreateRelation calls raystack.frontier.v1beta1.FrontierService.CreateRelation.
func (c *frontierServiceClient) CreateRelation(ctx context.Context, req *connect_go.Request[v1beta1.CreateRelationRequest]) (*connect_go.Response[v1beta1.CreateRelationResponse], error) {
	return c.createRelation.CallUnary(ctx, req)
}

// GetRelation calls raystack.frontier.v1beta1.FrontierService.GetRelation.
func (c *frontierServiceClient) GetRelation(ctx context.Context, req *connect_go.Request[v1beta1.GetRelationRequest]) (*connect_go.Response[v1beta1.GetRelationResponse], error) {
	return c.getRelation.CallUnary(ctx, req)
}

// DeleteRelation calls raystack.frontier.v1beta1.FrontierService.DeleteRelation.
func (c *frontierServiceClient) DeleteRelation(ctx context.Context, req *connect_go.Request[v1beta1.DeleteRelationRequest]) (*connect_go.Response[v1beta1.DeleteRelationResponse], error) {
	return c.deleteRelation.CallUnary(ctx, req)
}

// ListPermissions calls raystack.frontier.v1beta1.FrontierService.ListPermissions.
func (c *frontierServiceClient) ListPermissions(ctx context.Context, req *connect_go.Request[v1beta1.ListPermissionsRequest]) (*connect_go.Response[v1beta1.ListPermissionsResponse], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// GetPermission calls raystack.frontier.v1beta1.FrontierService.GetPermission.
func (c *frontierServiceClient) GetPermission(ctx context.Context, req *connect_go.Request[v1beta1.GetPermissionRequest]) (*connect_go.Response[v1beta1.GetPermissionResponse], error) {
	return c.getPermission.CallUnary(ctx, req)
}

// ListNamespaces calls raystack.frontier.v1beta1.FrontierService.ListNamespaces.
func (c *frontierServiceClient) ListNamespaces(ctx context.Context, req *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error) {
	return c.listNamespaces.CallUnary(ctx, req)
}

// GetNamespace calls raystack.frontier.v1beta1.FrontierService.GetNamespace.
func (c *frontierServiceClient) GetNamespace(ctx context.Context, req *connect_go.Request[v1beta1.GetNamespaceRequest]) (*connect_go.Response[v1beta1.GetNamespaceResponse], error) {
	return c.getNamespace.CallUnary(ctx, req)
}

// ListProjectResources calls raystack.frontier.v1beta1.FrontierService.ListProjectResources.
func (c *frontierServiceClient) ListProjectResources(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectResourcesRequest]) (*connect_go.Response[v1beta1.ListProjectResourcesResponse], error) {
	return c.listProjectResources.CallUnary(ctx, req)
}

// CreateProjectResource calls raystack.frontier.v1beta1.FrontierService.CreateProjectResource.
func (c *frontierServiceClient) CreateProjectResource(ctx context.Context, req *connect_go.Request[v1beta1.CreateProjectResourceRequest]) (*connect_go.Response[v1beta1.CreateProjectResourceResponse], error) {
	return c.createProjectResource.CallUnary(ctx, req)
}

// GetProjectResource calls raystack.frontier.v1beta1.FrontierService.GetProjectResource.
func (c *frontierServiceClient) GetProjectResource(ctx context.Context, req *connect_go.Request[v1beta1.GetProjectResourceRequest]) (*connect_go.Response[v1beta1.GetProjectResourceResponse], error) {
	return c.getProjectResource.CallUnary(ctx, req)
}

// UpdateProjectResource calls raystack.frontier.v1beta1.FrontierService.UpdateProjectResource.
func (c *frontierServiceClient) UpdateProjectResource(ctx context.Context, req *connect_go.Request[v1beta1.UpdateProjectResourceRequest]) (*connect_go.Response[v1beta1.UpdateProjectResourceResponse], error) {
	return c.updateProjectResource.CallUnary(ctx, req)
}

// DeleteProjectResource calls raystack.frontier.v1beta1.FrontierService.DeleteProjectResource.
func (c *frontierServiceClient) DeleteProjectResource(ctx context.Context, req *connect_go.Request[v1beta1.DeleteProjectResourceRequest]) (*connect_go.Response[v1beta1.DeleteProjectResourceResponse], error) {
	return c.deleteProjectResource.CallUnary(ctx, req)
}

// CheckResourcePermission calls raystack.frontier.v1beta1.FrontierService.CheckResourcePermission.
func (c *frontierServiceClient) CheckResourcePermission(ctx context.Context, req *connect_go.Request[v1beta1.CheckResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckResourcePermissionResponse], error) {
	return c.checkResourcePermission.CallUnary(ctx, req)
}

// BatchCheckPermission calls raystack.frontier.v1beta1.FrontierService.BatchCheckPermission.
func (c *frontierServiceClient) BatchCheckPermission(ctx context.Context, req *connect_go.Request[v1beta1.BatchCheckPermissionRequest]) (*connect_go.Response[v1beta1.BatchCheckPermissionResponse], error) {
	return c.batchCheckPermission.CallUnary(ctx, req)
}

// GetJWKs calls raystack.frontier.v1beta1.FrontierService.GetJWKs.
func (c *frontierServiceClient) GetJWKs(ctx context.Context, req *connect_go.Request[v1beta1.GetJWKsRequest]) (*connect_go.Response[v1beta1.GetJWKsResponse], error) {
	return c.getJWKs.CallUnary(ctx, req)
}

// ListAuthStrategies calls raystack.frontier.v1beta1.FrontierService.ListAuthStrategies.
func (c *frontierServiceClient) ListAuthStrategies(ctx context.Context, req *connect_go.Request[v1beta1.ListAuthStrategiesRequest]) (*connect_go.Response[v1beta1.ListAuthStrategiesResponse], error) {
	return c.listAuthStrategies.CallUnary(ctx, req)
}

// Authenticate calls raystack.frontier.v1beta1.FrontierService.Authenticate.
func (c *frontierServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1beta1.AuthenticateRequest]) (*connect_go.Response[v1beta1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// AuthCallback calls raystack.frontier.v1beta1.FrontierService.AuthCallback.
func (c *frontierServiceClient) AuthCallback(ctx context.Context, req *connect_go.Request[v1beta1.AuthCallbackRequest]) (*connect_go.Response[v1beta1.AuthCallbackResponse], error) {
	return c.authCallback.CallUnary(ctx, req)
}

// AuthToken calls raystack.frontier.v1beta1.FrontierService.AuthToken.
func (c *frontierServiceClient) AuthToken(ctx context.Context, req *connect_go.Request[v1beta1.AuthTokenRequest]) (*connect_go.Response[v1beta1.AuthTokenResponse], error) {
	return c.authToken.CallUnary(ctx, req)
}

// AuthLogout calls raystack.frontier.v1beta1.FrontierService.AuthLogout.
func (c *frontierServiceClient) AuthLogout(ctx context.Context, req *connect_go.Request[v1beta1.AuthLogoutRequest]) (*connect_go.Response[v1beta1.AuthLogoutResponse], error) {
	return c.authLogout.CallUnary(ctx, req)
}

// ListMetaSchemas calls raystack.frontier.v1beta1.FrontierService.ListMetaSchemas.
func (c *frontierServiceClient) ListMetaSchemas(ctx context.Context, req *connect_go.Request[v1beta1.ListMetaSchemasRequest]) (*connect_go.Response[v1beta1.ListMetaSchemasResponse], error) {
	return c.listMetaSchemas.CallUnary(ctx, req)
}

// CreateMetaSchema calls raystack.frontier.v1beta1.FrontierService.CreateMetaSchema.
func (c *frontierServiceClient) CreateMetaSchema(ctx context.Context, req *connect_go.Request[v1beta1.CreateMetaSchemaRequest]) (*connect_go.Response[v1beta1.CreateMetaSchemaResponse], error) {
	return c.createMetaSchema.CallUnary(ctx, req)
}

// GetMetaSchema calls raystack.frontier.v1beta1.FrontierService.GetMetaSchema.
func (c *frontierServiceClient) GetMetaSchema(ctx context.Context, req *connect_go.Request[v1beta1.GetMetaSchemaRequest]) (*connect_go.Response[v1beta1.GetMetaSchemaResponse], error) {
	return c.getMetaSchema.CallUnary(ctx, req)
}

// UpdateMetaSchema calls raystack.frontier.v1beta1.FrontierService.UpdateMetaSchema.
func (c *frontierServiceClient) UpdateMetaSchema(ctx context.Context, req *connect_go.Request[v1beta1.UpdateMetaSchemaRequest]) (*connect_go.Response[v1beta1.UpdateMetaSchemaResponse], error) {
	return c.updateMetaSchema.CallUnary(ctx, req)
}

// DeleteMetaSchema calls raystack.frontier.v1beta1.FrontierService.DeleteMetaSchema.
func (c *frontierServiceClient) DeleteMetaSchema(ctx context.Context, req *connect_go.Request[v1beta1.DeleteMetaSchemaRequest]) (*connect_go.Response[v1beta1.DeleteMetaSchemaResponse], error) {
	return c.deleteMetaSchema.CallUnary(ctx, req)
}

// ListOrganizationAuditLogs calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationAuditLogs.
func (c *frontierServiceClient) ListOrganizationAuditLogs(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAuditLogsResponse], error) {
	return c.listOrganizationAuditLogs.CallUnary(ctx, req)
}

// CreateOrganizationAuditLogs calls
// raystack.frontier.v1beta1.FrontierService.CreateOrganizationAuditLogs.
func (c *frontierServiceClient) CreateOrganizationAuditLogs(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.CreateOrganizationAuditLogsResponse], error) {
	return c.createOrganizationAuditLogs.CallUnary(ctx, req)
}

// GetOrganizationAuditLog calls raystack.frontier.v1beta1.FrontierService.GetOrganizationAuditLog.
func (c *frontierServiceClient) GetOrganizationAuditLog(ctx context.Context, req *connect_go.Request[v1beta1.GetOrganizationAuditLogRequest]) (*connect_go.Response[v1beta1.GetOrganizationAuditLogResponse], error) {
	return c.getOrganizationAuditLog.CallUnary(ctx, req)
}

// DescribePreferences calls raystack.frontier.v1beta1.FrontierService.DescribePreferences.
func (c *frontierServiceClient) DescribePreferences(ctx context.Context, req *connect_go.Request[v1beta1.DescribePreferencesRequest]) (*connect_go.Response[v1beta1.DescribePreferencesResponse], error) {
	return c.describePreferences.CallUnary(ctx, req)
}

// CreateOrganizationPreferences calls
// raystack.frontier.v1beta1.FrontierService.CreateOrganizationPreferences.
func (c *frontierServiceClient) CreateOrganizationPreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreateOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.CreateOrganizationPreferencesResponse], error) {
	return c.createOrganizationPreferences.CallUnary(ctx, req)
}

// ListOrganizationPreferences calls
// raystack.frontier.v1beta1.FrontierService.ListOrganizationPreferences.
func (c *frontierServiceClient) ListOrganizationPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.ListOrganizationPreferencesResponse], error) {
	return c.listOrganizationPreferences.CallUnary(ctx, req)
}

// CreateProjectPreferences calls
// raystack.frontier.v1beta1.FrontierService.CreateProjectPreferences.
func (c *frontierServiceClient) CreateProjectPreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreateProjectPreferencesRequest]) (*connect_go.Response[v1beta1.CreateProjectPreferencesResponse], error) {
	return c.createProjectPreferences.CallUnary(ctx, req)
}

// ListProjectPreferences calls raystack.frontier.v1beta1.FrontierService.ListProjectPreferences.
func (c *frontierServiceClient) ListProjectPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListProjectPreferencesRequest]) (*connect_go.Response[v1beta1.ListProjectPreferencesResponse], error) {
	return c.listProjectPreferences.CallUnary(ctx, req)
}

// CreateGroupPreferences calls raystack.frontier.v1beta1.FrontierService.CreateGroupPreferences.
func (c *frontierServiceClient) CreateGroupPreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreateGroupPreferencesRequest]) (*connect_go.Response[v1beta1.CreateGroupPreferencesResponse], error) {
	return c.createGroupPreferences.CallUnary(ctx, req)
}

// ListGroupPreferences calls raystack.frontier.v1beta1.FrontierService.ListGroupPreferences.
func (c *frontierServiceClient) ListGroupPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListGroupPreferencesRequest]) (*connect_go.Response[v1beta1.ListGroupPreferencesResponse], error) {
	return c.listGroupPreferences.CallUnary(ctx, req)
}

// CreateUserPreferences calls raystack.frontier.v1beta1.FrontierService.CreateUserPreferences.
func (c *frontierServiceClient) CreateUserPreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreateUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateUserPreferencesResponse], error) {
	return c.createUserPreferences.CallUnary(ctx, req)
}

// ListUserPreferences calls raystack.frontier.v1beta1.FrontierService.ListUserPreferences.
func (c *frontierServiceClient) ListUserPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListUserPreferencesResponse], error) {
	return c.listUserPreferences.CallUnary(ctx, req)
}

// CreateCurrentUserPreferences calls
// raystack.frontier.v1beta1.FrontierService.CreateCurrentUserPreferences.
func (c *frontierServiceClient) CreateCurrentUserPreferences(ctx context.Context, req *connect_go.Request[v1beta1.CreateCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateCurrentUserPreferencesResponse], error) {
	return c.createCurrentUserPreferences.CallUnary(ctx, req)
}

// ListCurrentUserPreferences calls
// raystack.frontier.v1beta1.FrontierService.ListCurrentUserPreferences.
func (c *frontierServiceClient) ListCurrentUserPreferences(ctx context.Context, req *connect_go.Request[v1beta1.ListCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListCurrentUserPreferencesResponse], error) {
	return c.listCurrentUserPreferences.CallUnary(ctx, req)
}

// CreateBillingAccount calls raystack.frontier.v1beta1.FrontierService.CreateBillingAccount.
func (c *frontierServiceClient) CreateBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.CreateBillingAccountRequest]) (*connect_go.Response[v1beta1.CreateBillingAccountResponse], error) {
	return c.createBillingAccount.CallUnary(ctx, req)
}

// GetBillingAccount calls raystack.frontier.v1beta1.FrontierService.GetBillingAccount.
func (c *frontierServiceClient) GetBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.GetBillingAccountRequest]) (*connect_go.Response[v1beta1.GetBillingAccountResponse], error) {
	return c.getBillingAccount.CallUnary(ctx, req)
}

// UpdateBillingAccount calls raystack.frontier.v1beta1.FrontierService.UpdateBillingAccount.
func (c *frontierServiceClient) UpdateBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.UpdateBillingAccountRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountResponse], error) {
	return c.updateBillingAccount.CallUnary(ctx, req)
}

// RegisterBillingAccount calls raystack.frontier.v1beta1.FrontierService.RegisterBillingAccount.
func (c *frontierServiceClient) RegisterBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.RegisterBillingAccountRequest]) (*connect_go.Response[v1beta1.RegisterBillingAccountResponse], error) {
	return c.registerBillingAccount.CallUnary(ctx, req)
}

// ListBillingAccounts calls raystack.frontier.v1beta1.FrontierService.ListBillingAccounts.
func (c *frontierServiceClient) ListBillingAccounts(ctx context.Context, req *connect_go.Request[v1beta1.ListBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListBillingAccountsResponse], error) {
	return c.listBillingAccounts.CallUnary(ctx, req)
}

// DeleteBillingAccount calls raystack.frontier.v1beta1.FrontierService.DeleteBillingAccount.
func (c *frontierServiceClient) DeleteBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.DeleteBillingAccountRequest]) (*connect_go.Response[v1beta1.DeleteBillingAccountResponse], error) {
	return c.deleteBillingAccount.CallUnary(ctx, req)
}

// EnableBillingAccount calls raystack.frontier.v1beta1.FrontierService.EnableBillingAccount.
func (c *frontierServiceClient) EnableBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.EnableBillingAccountRequest]) (*connect_go.Response[v1beta1.EnableBillingAccountResponse], error) {
	return c.enableBillingAccount.CallUnary(ctx, req)
}

// DisableBillingAccount calls raystack.frontier.v1beta1.FrontierService.DisableBillingAccount.
func (c *frontierServiceClient) DisableBillingAccount(ctx context.Context, req *connect_go.Request[v1beta1.DisableBillingAccountRequest]) (*connect_go.Response[v1beta1.DisableBillingAccountResponse], error) {
	return c.disableBillingAccount.CallUnary(ctx, req)
}

// GetBillingBalance calls raystack.frontier.v1beta1.FrontierService.GetBillingBalance.
func (c *frontierServiceClient) GetBillingBalance(ctx context.Context, req *connect_go.Request[v1beta1.GetBillingBalanceRequest]) (*connect_go.Response[v1beta1.GetBillingBalanceResponse], error) {
	return c.getBillingBalance.CallUnary(ctx, req)
}

// HasTrialed calls raystack.frontier.v1beta1.FrontierService.HasTrialed.
func (c *frontierServiceClient) HasTrialed(ctx context.Context, req *connect_go.Request[v1beta1.HasTrialedRequest]) (*connect_go.Response[v1beta1.HasTrialedResponse], error) {
	return c.hasTrialed.CallUnary(ctx, req)
}

// GetSubscription calls raystack.frontier.v1beta1.FrontierService.GetSubscription.
func (c *frontierServiceClient) GetSubscription(ctx context.Context, req *connect_go.Request[v1beta1.GetSubscriptionRequest]) (*connect_go.Response[v1beta1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// CancelSubscription calls raystack.frontier.v1beta1.FrontierService.CancelSubscription.
func (c *frontierServiceClient) CancelSubscription(ctx context.Context, req *connect_go.Request[v1beta1.CancelSubscriptionRequest]) (*connect_go.Response[v1beta1.CancelSubscriptionResponse], error) {
	return c.cancelSubscription.CallUnary(ctx, req)
}

// ListSubscriptions calls raystack.frontier.v1beta1.FrontierService.ListSubscriptions.
func (c *frontierServiceClient) ListSubscriptions(ctx context.Context, req *connect_go.Request[v1beta1.ListSubscriptionsRequest]) (*connect_go.Response[v1beta1.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// ChangeSubscription calls raystack.frontier.v1beta1.FrontierService.ChangeSubscription.
func (c *frontierServiceClient) ChangeSubscription(ctx context.Context, req *connect_go.Request[v1beta1.ChangeSubscriptionRequest]) (*connect_go.Response[v1beta1.ChangeSubscriptionResponse], error) {
	return c.changeSubscription.CallUnary(ctx, req)
}

// UpdateSubscription calls raystack.frontier.v1beta1.FrontierService.UpdateSubscription.
func (c *frontierServiceClient) UpdateSubscription(ctx context.Context, req *connect_go.Request[v1beta1.UpdateSubscriptionRequest]) (*connect_go.Response[v1beta1.UpdateSubscriptionResponse], error) {
	return c.updateSubscription.CallUnary(ctx, req)
}

// CreateProduct calls raystack.frontier.v1beta1.FrontierService.CreateProduct.
func (c *frontierServiceClient) CreateProduct(ctx context.Context, req *connect_go.Request[v1beta1.CreateProductRequest]) (*connect_go.Response[v1beta1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// GetProduct calls raystack.frontier.v1beta1.FrontierService.GetProduct.
func (c *frontierServiceClient) GetProduct(ctx context.Context, req *connect_go.Request[v1beta1.GetProductRequest]) (*connect_go.Response[v1beta1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// ListProducts calls raystack.frontier.v1beta1.FrontierService.ListProducts.
func (c *frontierServiceClient) ListProducts(ctx context.Context, req *connect_go.Request[v1beta1.ListProductsRequest]) (*connect_go.Response[v1beta1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// UpdateProduct calls raystack.frontier.v1beta1.FrontierService.UpdateProduct.
func (c *frontierServiceClient) UpdateProduct(ctx context.Context, req *connect_go.Request[v1beta1.UpdateProductRequest]) (*connect_go.Response[v1beta1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// CreateFeature calls raystack.frontier.v1beta1.FrontierService.CreateFeature.
func (c *frontierServiceClient) CreateFeature(ctx context.Context, req *connect_go.Request[v1beta1.CreateFeatureRequest]) (*connect_go.Response[v1beta1.CreateFeatureResponse], error) {
	return c.createFeature.CallUnary(ctx, req)
}

// GetFeature calls raystack.frontier.v1beta1.FrontierService.GetFeature.
func (c *frontierServiceClient) GetFeature(ctx context.Context, req *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error) {
	return c.getFeature.CallUnary(ctx, req)
}

// UpdateFeature calls raystack.frontier.v1beta1.FrontierService.UpdateFeature.
func (c *frontierServiceClient) UpdateFeature(ctx context.Context, req *connect_go.Request[v1beta1.UpdateFeatureRequest]) (*connect_go.Response[v1beta1.UpdateFeatureResponse], error) {
	return c.updateFeature.CallUnary(ctx, req)
}

// ListFeatures calls raystack.frontier.v1beta1.FrontierService.ListFeatures.
func (c *frontierServiceClient) ListFeatures(ctx context.Context, req *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error) {
	return c.listFeatures.CallUnary(ctx, req)
}

// CreatePlan calls raystack.frontier.v1beta1.FrontierService.CreatePlan.
func (c *frontierServiceClient) CreatePlan(ctx context.Context, req *connect_go.Request[v1beta1.CreatePlanRequest]) (*connect_go.Response[v1beta1.CreatePlanResponse], error) {
	return c.createPlan.CallUnary(ctx, req)
}

// ListPlans calls raystack.frontier.v1beta1.FrontierService.ListPlans.
func (c *frontierServiceClient) ListPlans(ctx context.Context, req *connect_go.Request[v1beta1.ListPlansRequest]) (*connect_go.Response[v1beta1.ListPlansResponse], error) {
	return c.listPlans.CallUnary(ctx, req)
}

// GetPlan calls raystack.frontier.v1beta1.FrontierService.GetPlan.
func (c *frontierServiceClient) GetPlan(ctx context.Context, req *connect_go.Request[v1beta1.GetPlanRequest]) (*connect_go.Response[v1beta1.GetPlanResponse], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// UpdatePlan calls raystack.frontier.v1beta1.FrontierService.UpdatePlan.
func (c *frontierServiceClient) UpdatePlan(ctx context.Context, req *connect_go.Request[v1beta1.UpdatePlanRequest]) (*connect_go.Response[v1beta1.UpdatePlanResponse], error) {
	return c.updatePlan.CallUnary(ctx, req)
}

// CreateCheckout calls raystack.frontier.v1beta1.FrontierService.CreateCheckout.
func (c *frontierServiceClient) CreateCheckout(ctx context.Context, req *connect_go.Request[v1beta1.CreateCheckoutRequest]) (*connect_go.Response[v1beta1.CreateCheckoutResponse], error) {
	return c.createCheckout.CallUnary(ctx, req)
}

// ListCheckouts calls raystack.frontier.v1beta1.FrontierService.ListCheckouts.
func (c *frontierServiceClient) ListCheckouts(ctx context.Context, req *connect_go.Request[v1beta1.ListCheckoutsRequest]) (*connect_go.Response[v1beta1.ListCheckoutsResponse], error) {
	return c.listCheckouts.CallUnary(ctx, req)
}

// GetCheckout calls raystack.frontier.v1beta1.FrontierService.GetCheckout.
func (c *frontierServiceClient) GetCheckout(ctx context.Context, req *connect_go.Request[v1beta1.GetCheckoutRequest]) (*connect_go.Response[v1beta1.GetCheckoutResponse], error) {
	return c.getCheckout.CallUnary(ctx, req)
}

// CheckFeatureEntitlement calls raystack.frontier.v1beta1.FrontierService.CheckFeatureEntitlement.
func (c *frontierServiceClient) CheckFeatureEntitlement(ctx context.Context, req *connect_go.Request[v1beta1.CheckFeatureEntitlementRequest]) (*connect_go.Response[v1beta1.CheckFeatureEntitlementResponse], error) {
	return c.checkFeatureEntitlement.CallUnary(ctx, req)
}

// CreateBillingUsage calls raystack.frontier.v1beta1.FrontierService.CreateBillingUsage.
func (c *frontierServiceClient) CreateBillingUsage(ctx context.Context, req *connect_go.Request[v1beta1.CreateBillingUsageRequest]) (*connect_go.Response[v1beta1.CreateBillingUsageResponse], error) {
	return c.createBillingUsage.CallUnary(ctx, req)
}

// ListBillingTransactions calls raystack.frontier.v1beta1.FrontierService.ListBillingTransactions.
func (c *frontierServiceClient) ListBillingTransactions(ctx context.Context, req *connect_go.Request[v1beta1.ListBillingTransactionsRequest]) (*connect_go.Response[v1beta1.ListBillingTransactionsResponse], error) {
	return c.listBillingTransactions.CallUnary(ctx, req)
}

// TotalDebitedTransactions calls
// raystack.frontier.v1beta1.FrontierService.TotalDebitedTransactions.
func (c *frontierServiceClient) TotalDebitedTransactions(ctx context.Context, req *connect_go.Request[v1beta1.TotalDebitedTransactionsRequest]) (*connect_go.Response[v1beta1.TotalDebitedTransactionsResponse], error) {
	return c.totalDebitedTransactions.CallUnary(ctx, req)
}

// ListInvoices calls raystack.frontier.v1beta1.FrontierService.ListInvoices.
func (c *frontierServiceClient) ListInvoices(ctx context.Context, req *connect_go.Request[v1beta1.ListInvoicesRequest]) (*connect_go.Response[v1beta1.ListInvoicesResponse], error) {
	return c.listInvoices.CallUnary(ctx, req)
}

// GetUpcomingInvoice calls raystack.frontier.v1beta1.FrontierService.GetUpcomingInvoice.
func (c *frontierServiceClient) GetUpcomingInvoice(ctx context.Context, req *connect_go.Request[v1beta1.GetUpcomingInvoiceRequest]) (*connect_go.Response[v1beta1.GetUpcomingInvoiceResponse], error) {
	return c.getUpcomingInvoice.CallUnary(ctx, req)
}

// BillingWebhookCallback calls raystack.frontier.v1beta1.FrontierService.BillingWebhookCallback.
func (c *frontierServiceClient) BillingWebhookCallback(ctx context.Context, req *connect_go.Request[v1beta1.BillingWebhookCallbackRequest]) (*connect_go.Response[v1beta1.BillingWebhookCallbackResponse], error) {
	return c.billingWebhookCallback.CallUnary(ctx, req)
}

// CreateProspectPublic calls raystack.frontier.v1beta1.FrontierService.CreateProspectPublic.
func (c *frontierServiceClient) CreateProspectPublic(ctx context.Context, req *connect_go.Request[v1beta1.CreateProspectPublicRequest]) (*connect_go.Response[v1beta1.CreateProspectPublicResponse], error) {
	return c.createProspectPublic.CallUnary(ctx, req)
}

// FrontierServiceHandler is an implementation of the raystack.frontier.v1beta1.FrontierService
// service.
type FrontierServiceHandler interface {
	// Users
	ListUsers(context.Context, *connect_go.Request[v1beta1.ListUsersRequest]) (*connect_go.Response[v1beta1.ListUsersResponse], error)
	CreateUser(context.Context, *connect_go.Request[v1beta1.CreateUserRequest]) (*connect_go.Response[v1beta1.CreateUserResponse], error)
	GetUser(context.Context, *connect_go.Request[v1beta1.GetUserRequest]) (*connect_go.Response[v1beta1.GetUserResponse], error)
	ListUserGroups(context.Context, *connect_go.Request[v1beta1.ListUserGroupsRequest]) (*connect_go.Response[v1beta1.ListUserGroupsResponse], error)
	ListCurrentUserGroups(context.Context, *connect_go.Request[v1beta1.ListCurrentUserGroupsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserGroupsResponse], error)
	GetCurrentUser(context.Context, *connect_go.Request[v1beta1.GetCurrentUserRequest]) (*connect_go.Response[v1beta1.GetCurrentUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[v1beta1.UpdateUserRequest]) (*connect_go.Response[v1beta1.UpdateUserResponse], error)
	UpdateCurrentUser(context.Context, *connect_go.Request[v1beta1.UpdateCurrentUserRequest]) (*connect_go.Response[v1beta1.UpdateCurrentUserResponse], error)
	EnableUser(context.Context, *connect_go.Request[v1beta1.EnableUserRequest]) (*connect_go.Response[v1beta1.EnableUserResponse], error)
	DisableUser(context.Context, *connect_go.Request[v1beta1.DisableUserRequest]) (*connect_go.Response[v1beta1.DisableUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[v1beta1.DeleteUserRequest]) (*connect_go.Response[v1beta1.DeleteUserResponse], error)
	ListOrganizationsByUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByUserResponse], error)
	ListOrganizationsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByCurrentUserResponse], error)
	ListProjectsByUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByUserResponse], error)
	ListProjectsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByCurrentUserResponse], error)
	ListUserInvitations(context.Context, *connect_go.Request[v1beta1.ListUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListUserInvitationsResponse], error)
	ListCurrentUserInvitations(context.Context, *connect_go.Request[v1beta1.ListCurrentUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserInvitationsResponse], error)
	// ServiceUser
	ListServiceUsers(context.Context, *connect_go.Request[v1beta1.ListServiceUsersRequest]) (*connect_go.Response[v1beta1.ListServiceUsersResponse], error)
	CreateServiceUser(context.Context, *connect_go.Request[v1beta1.CreateServiceUserRequest]) (*connect_go.Response[v1beta1.CreateServiceUserResponse], error)
	GetServiceUser(context.Context, *connect_go.Request[v1beta1.GetServiceUserRequest]) (*connect_go.Response[v1beta1.GetServiceUserResponse], error)
	DeleteServiceUser(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserResponse], error)
	CreateServiceUserJWK(context.Context, *connect_go.Request[v1beta1.CreateServiceUserJWKRequest]) (*connect_go.Response[v1beta1.CreateServiceUserJWKResponse], error)
	ListServiceUserJWKs(context.Context, *connect_go.Request[v1beta1.ListServiceUserJWKsRequest]) (*connect_go.Response[v1beta1.ListServiceUserJWKsResponse], error)
	GetServiceUserJWK(context.Context, *connect_go.Request[v1beta1.GetServiceUserJWKRequest]) (*connect_go.Response[v1beta1.GetServiceUserJWKResponse], error)
	DeleteServiceUserJWK(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserJWKRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserJWKResponse], error)
	CreateServiceUserCredential(context.Context, *connect_go.Request[v1beta1.CreateServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.CreateServiceUserCredentialResponse], error)
	ListServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.ListServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.ListServiceUserCredentialsResponse], error)
	DeleteServiceUserCredential(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserCredentialResponse], error)
	CreateServiceUserToken(context.Context, *connect_go.Request[v1beta1.CreateServiceUserTokenRequest]) (*connect_go.Response[v1beta1.CreateServiceUserTokenResponse], error)
	ListServiceUserTokens(context.Context, *connect_go.Request[v1beta1.ListServiceUserTokensRequest]) (*connect_go.Response[v1beta1.ListServiceUserTokensResponse], error)
	DeleteServiceUserToken(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserTokenRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserTokenResponse], error)
	ListServiceUserProjects(context.Context, *connect_go.Request[v1beta1.ListServiceUserProjectsRequest]) (*connect_go.Response[v1beta1.ListServiceUserProjectsResponse], error)
	// Group
	ListOrganizationGroups(context.Context, *connect_go.Request[v1beta1.ListOrganizationGroupsRequest]) (*connect_go.Response[v1beta1.ListOrganizationGroupsResponse], error)
	CreateGroup(context.Context, *connect_go.Request[v1beta1.CreateGroupRequest]) (*connect_go.Response[v1beta1.CreateGroupResponse], error)
	GetGroup(context.Context, *connect_go.Request[v1beta1.GetGroupRequest]) (*connect_go.Response[v1beta1.GetGroupResponse], error)
	UpdateGroup(context.Context, *connect_go.Request[v1beta1.UpdateGroupRequest]) (*connect_go.Response[v1beta1.UpdateGroupResponse], error)
	ListGroupUsers(context.Context, *connect_go.Request[v1beta1.ListGroupUsersRequest]) (*connect_go.Response[v1beta1.ListGroupUsersResponse], error)
	AddGroupUsers(context.Context, *connect_go.Request[v1beta1.AddGroupUsersRequest]) (*connect_go.Response[v1beta1.AddGroupUsersResponse], error)
	RemoveGroupUser(context.Context, *connect_go.Request[v1beta1.RemoveGroupUserRequest]) (*connect_go.Response[v1beta1.RemoveGroupUserResponse], error)
	EnableGroup(context.Context, *connect_go.Request[v1beta1.EnableGroupRequest]) (*connect_go.Response[v1beta1.EnableGroupResponse], error)
	DisableGroup(context.Context, *connect_go.Request[v1beta1.DisableGroupRequest]) (*connect_go.Response[v1beta1.DisableGroupResponse], error)
	DeleteGroup(context.Context, *connect_go.Request[v1beta1.DeleteGroupRequest]) (*connect_go.Response[v1beta1.DeleteGroupResponse], error)
	// Roles
	ListRoles(context.Context, *connect_go.Request[v1beta1.ListRolesRequest]) (*connect_go.Response[v1beta1.ListRolesResponse], error)
	ListOrganizationRoles(context.Context, *connect_go.Request[v1beta1.ListOrganizationRolesRequest]) (*connect_go.Response[v1beta1.ListOrganizationRolesResponse], error)
	CreateOrganizationRole(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.CreateOrganizationRoleResponse], error)
	GetOrganizationRole(context.Context, *connect_go.Request[v1beta1.GetOrganizationRoleRequest]) (*connect_go.Response[v1beta1.GetOrganizationRoleResponse], error)
	UpdateOrganizationRole(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationRoleResponse], error)
	DeleteOrganizationRole(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRoleRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationRoleResponse], error)
	// Organizations
	ListOrganizations(context.Context, *connect_go.Request[v1beta1.ListOrganizationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationsResponse], error)
	CreateOrganization(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect_go.Request[v1beta1.GetOrganizationRequest]) (*connect_go.Response[v1beta1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationResponse], error)
	ListOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ListOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.ListOrganizationProjectsResponse], error)
	ListOrganizationAdmins(context.Context, *connect_go.Request[v1beta1.ListOrganizationAdminsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAdminsResponse], error)
	ListOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationUsersResponse], error)
	AddOrganizationUsers(context.Context, *connect_go.Request[v1beta1.AddOrganizationUsersRequest]) (*connect_go.Response[v1beta1.AddOrganizationUsersResponse], error)
	RemoveOrganizationUser(context.Context, *connect_go.Request[v1beta1.RemoveOrganizationUserRequest]) (*connect_go.Response[v1beta1.RemoveOrganizationUserResponse], error)
	GetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.GetOrganizationKycRequest]) (*connect_go.Response[v1beta1.GetOrganizationKycResponse], error)
	// Deprecated: use ListServiceUsers instead
	ListOrganizationServiceUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationServiceUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationServiceUsersResponse], error)
	ListOrganizationInvitations(context.Context, *connect_go.Request[v1beta1.ListOrganizationInvitationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationInvitationsResponse], error)
	CreateOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.CreateOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationInvitationResponse], error)
	GetOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.GetOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.GetOrganizationInvitationResponse], error)
	AcceptOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.AcceptOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.AcceptOrganizationInvitationResponse], error)
	DeleteOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationInvitationResponse], error)
	ListOrganizationDomains(context.Context, *connect_go.Request[v1beta1.ListOrganizationDomainsRequest]) (*connect_go.Response[v1beta1.ListOrganizationDomainsResponse], error)
	CreateOrganizationDomain(context.Context, *connect_go.Request[v1beta1.CreateOrganizationDomainRequest]) (*connect_go.Response[v1beta1.CreateOrganizationDomainResponse], error)
	DeleteOrganizationDomain(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationDomainRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationDomainResponse], error)
	GetOrganizationDomain(context.Context, *connect_go.Request[v1beta1.GetOrganizationDomainRequest]) (*connect_go.Response[v1beta1.GetOrganizationDomainResponse], error)
	VerifyOrganizationDomain(context.Context, *connect_go.Request[v1beta1.VerifyOrganizationDomainRequest]) (*connect_go.Response[v1beta1.VerifyOrganizationDomainResponse], error)
	JoinOrganization(context.Context, *connect_go.Request[v1beta1.JoinOrganizationRequest]) (*connect_go.Response[v1beta1.JoinOrganizationResponse], error)
	EnableOrganization(context.Context, *connect_go.Request[v1beta1.EnableOrganizationRequest]) (*connect_go.Response[v1beta1.EnableOrganizationResponse], error)
	DisableOrganization(context.Context, *connect_go.Request[v1beta1.DisableOrganizationRequest]) (*connect_go.Response[v1beta1.DisableOrganizationResponse], error)
	DeleteOrganization(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationResponse], error)
	// Projects
	CreateProject(context.Context, *connect_go.Request[v1beta1.CreateProjectRequest]) (*connect_go.Response[v1beta1.CreateProjectResponse], error)
	GetProject(context.Context, *connect_go.Request[v1beta1.GetProjectRequest]) (*connect_go.Response[v1beta1.GetProjectResponse], error)
	UpdateProject(context.Context, *connect_go.Request[v1beta1.UpdateProjectRequest]) (*connect_go.Response[v1beta1.UpdateProjectResponse], error)
	ListProjectAdmins(context.Context, *connect_go.Request[v1beta1.ListProjectAdminsRequest]) (*connect_go.Response[v1beta1.ListProjectAdminsResponse], error)
	ListProjectUsers(context.Context, *connect_go.Request[v1beta1.ListProjectUsersRequest]) (*connect_go.Response[v1beta1.ListProjectUsersResponse], error)
	ListProjectServiceUsers(context.Context, *connect_go.Request[v1beta1.ListProjectServiceUsersRequest]) (*connect_go.Response[v1beta1.ListProjectServiceUsersResponse], error)
	ListProjectGroups(context.Context, *connect_go.Request[v1beta1.ListProjectGroupsRequest]) (*connect_go.Response[v1beta1.ListProjectGroupsResponse], error)
	EnableProject(context.Context, *connect_go.Request[v1beta1.EnableProjectRequest]) (*connect_go.Response[v1beta1.EnableProjectResponse], error)
	DisableProject(context.Context, *connect_go.Request[v1beta1.DisableProjectRequest]) (*connect_go.Response[v1beta1.DisableProjectResponse], error)
	DeleteProject(context.Context, *connect_go.Request[v1beta1.DeleteProjectRequest]) (*connect_go.Response[v1beta1.DeleteProjectResponse], error)
	// Policies
	CreatePolicy(context.Context, *connect_go.Request[v1beta1.CreatePolicyRequest]) (*connect_go.Response[v1beta1.CreatePolicyResponse], error)
	GetPolicy(context.Context, *connect_go.Request[v1beta1.GetPolicyRequest]) (*connect_go.Response[v1beta1.GetPolicyResponse], error)
	ListPolicies(context.Context, *connect_go.Request[v1beta1.ListPoliciesRequest]) (*connect_go.Response[v1beta1.ListPoliciesResponse], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1beta1.UpdatePolicyRequest]) (*connect_go.Response[v1beta1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect_go.Request[v1beta1.DeletePolicyRequest]) (*connect_go.Response[v1beta1.DeletePolicyResponse], error)
	CreatePolicyForProject(context.Context, *connect_go.Request[v1beta1.CreatePolicyForProjectRequest]) (*connect_go.Response[v1beta1.CreatePolicyForProjectResponse], error)
	// Relations
	CreateRelation(context.Context, *connect_go.Request[v1beta1.CreateRelationRequest]) (*connect_go.Response[v1beta1.CreateRelationResponse], error)
	GetRelation(context.Context, *connect_go.Request[v1beta1.GetRelationRequest]) (*connect_go.Response[v1beta1.GetRelationResponse], error)
	DeleteRelation(context.Context, *connect_go.Request[v1beta1.DeleteRelationRequest]) (*connect_go.Response[v1beta1.DeleteRelationResponse], error)
	// Permissions
	ListPermissions(context.Context, *connect_go.Request[v1beta1.ListPermissionsRequest]) (*connect_go.Response[v1beta1.ListPermissionsResponse], error)
	GetPermission(context.Context, *connect_go.Request[v1beta1.GetPermissionRequest]) (*connect_go.Response[v1beta1.GetPermissionResponse], error)
	// Namespaces
	ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error)
	GetNamespace(context.Context, *connect_go.Request[v1beta1.GetNamespaceRequest]) (*connect_go.Response[v1beta1.GetNamespaceResponse], error)
	// Resources
	ListProjectResources(context.Context, *connect_go.Request[v1beta1.ListProjectResourcesRequest]) (*connect_go.Response[v1beta1.ListProjectResourcesResponse], error)
	CreateProjectResource(context.Context, *connect_go.Request[v1beta1.CreateProjectResourceRequest]) (*connect_go.Response[v1beta1.CreateProjectResourceResponse], error)
	GetProjectResource(context.Context, *connect_go.Request[v1beta1.GetProjectResourceRequest]) (*connect_go.Response[v1beta1.GetProjectResourceResponse], error)
	UpdateProjectResource(context.Context, *connect_go.Request[v1beta1.UpdateProjectResourceRequest]) (*connect_go.Response[v1beta1.UpdateProjectResourceResponse], error)
	DeleteProjectResource(context.Context, *connect_go.Request[v1beta1.DeleteProjectResourceRequest]) (*connect_go.Response[v1beta1.DeleteProjectResourceResponse], error)
	// Authz
	CheckResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckResourcePermissionResponse], error)
	BatchCheckPermission(context.Context, *connect_go.Request[v1beta1.BatchCheckPermissionRequest]) (*connect_go.Response[v1beta1.BatchCheckPermissionResponse], error)
	// Authn
	GetJWKs(context.Context, *connect_go.Request[v1beta1.GetJWKsRequest]) (*connect_go.Response[v1beta1.GetJWKsResponse], error)
	ListAuthStrategies(context.Context, *connect_go.Request[v1beta1.ListAuthStrategiesRequest]) (*connect_go.Response[v1beta1.ListAuthStrategiesResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1beta1.AuthenticateRequest]) (*connect_go.Response[v1beta1.AuthenticateResponse], error)
	AuthCallback(context.Context, *connect_go.Request[v1beta1.AuthCallbackRequest]) (*connect_go.Response[v1beta1.AuthCallbackResponse], error)
	AuthToken(context.Context, *connect_go.Request[v1beta1.AuthTokenRequest]) (*connect_go.Response[v1beta1.AuthTokenResponse], error)
	AuthLogout(context.Context, *connect_go.Request[v1beta1.AuthLogoutRequest]) (*connect_go.Response[v1beta1.AuthLogoutResponse], error)
	// MetaSchemas
	ListMetaSchemas(context.Context, *connect_go.Request[v1beta1.ListMetaSchemasRequest]) (*connect_go.Response[v1beta1.ListMetaSchemasResponse], error)
	CreateMetaSchema(context.Context, *connect_go.Request[v1beta1.CreateMetaSchemaRequest]) (*connect_go.Response[v1beta1.CreateMetaSchemaResponse], error)
	GetMetaSchema(context.Context, *connect_go.Request[v1beta1.GetMetaSchemaRequest]) (*connect_go.Response[v1beta1.GetMetaSchemaResponse], error)
	UpdateMetaSchema(context.Context, *connect_go.Request[v1beta1.UpdateMetaSchemaRequest]) (*connect_go.Response[v1beta1.UpdateMetaSchemaResponse], error)
	DeleteMetaSchema(context.Context, *connect_go.Request[v1beta1.DeleteMetaSchemaRequest]) (*connect_go.Response[v1beta1.DeleteMetaSchemaResponse], error)
	// Audit logs
	ListOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.ListOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAuditLogsResponse], error)
	CreateOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.CreateOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.CreateOrganizationAuditLogsResponse], error)
	GetOrganizationAuditLog(context.Context, *connect_go.Request[v1beta1.GetOrganizationAuditLogRequest]) (*connect_go.Response[v1beta1.GetOrganizationAuditLogResponse], error)
	// DescribePreferences list down all the supported preferences of entities
	DescribePreferences(context.Context, *connect_go.Request[v1beta1.DescribePreferencesRequest]) (*connect_go.Response[v1beta1.DescribePreferencesResponse], error)
	CreateOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.CreateOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.CreateOrganizationPreferencesResponse], error)
	ListOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.ListOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.ListOrganizationPreferencesResponse], error)
	CreateProjectPreferences(context.Context, *connect_go.Request[v1beta1.CreateProjectPreferencesRequest]) (*connect_go.Response[v1beta1.CreateProjectPreferencesResponse], error)
	ListProjectPreferences(context.Context, *connect_go.Request[v1beta1.ListProjectPreferencesRequest]) (*connect_go.Response[v1beta1.ListProjectPreferencesResponse], error)
	CreateGroupPreferences(context.Context, *connect_go.Request[v1beta1.CreateGroupPreferencesRequest]) (*connect_go.Response[v1beta1.CreateGroupPreferencesResponse], error)
	ListGroupPreferences(context.Context, *connect_go.Request[v1beta1.ListGroupPreferencesRequest]) (*connect_go.Response[v1beta1.ListGroupPreferencesResponse], error)
	CreateUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateUserPreferencesResponse], error)
	ListUserPreferences(context.Context, *connect_go.Request[v1beta1.ListUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListUserPreferencesResponse], error)
	CreateCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateCurrentUserPreferencesResponse], error)
	ListCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.ListCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListCurrentUserPreferencesResponse], error)
	// Billing account
	CreateBillingAccount(context.Context, *connect_go.Request[v1beta1.CreateBillingAccountRequest]) (*connect_go.Response[v1beta1.CreateBillingAccountResponse], error)
	GetBillingAccount(context.Context, *connect_go.Request[v1beta1.GetBillingAccountRequest]) (*connect_go.Response[v1beta1.GetBillingAccountResponse], error)
	UpdateBillingAccount(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountResponse], error)
	RegisterBillingAccount(context.Context, *connect_go.Request[v1beta1.RegisterBillingAccountRequest]) (*connect_go.Response[v1beta1.RegisterBillingAccountResponse], error)
	ListBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListBillingAccountsResponse], error)
	DeleteBillingAccount(context.Context, *connect_go.Request[v1beta1.DeleteBillingAccountRequest]) (*connect_go.Response[v1beta1.DeleteBillingAccountResponse], error)
	EnableBillingAccount(context.Context, *connect_go.Request[v1beta1.EnableBillingAccountRequest]) (*connect_go.Response[v1beta1.EnableBillingAccountResponse], error)
	DisableBillingAccount(context.Context, *connect_go.Request[v1beta1.DisableBillingAccountRequest]) (*connect_go.Response[v1beta1.DisableBillingAccountResponse], error)
	GetBillingBalance(context.Context, *connect_go.Request[v1beta1.GetBillingBalanceRequest]) (*connect_go.Response[v1beta1.GetBillingBalanceResponse], error)
	HasTrialed(context.Context, *connect_go.Request[v1beta1.HasTrialedRequest]) (*connect_go.Response[v1beta1.HasTrialedResponse], error)
	// Subscriptions
	GetSubscription(context.Context, *connect_go.Request[v1beta1.GetSubscriptionRequest]) (*connect_go.Response[v1beta1.GetSubscriptionResponse], error)
	CancelSubscription(context.Context, *connect_go.Request[v1beta1.CancelSubscriptionRequest]) (*connect_go.Response[v1beta1.CancelSubscriptionResponse], error)
	ListSubscriptions(context.Context, *connect_go.Request[v1beta1.ListSubscriptionsRequest]) (*connect_go.Response[v1beta1.ListSubscriptionsResponse], error)
	ChangeSubscription(context.Context, *connect_go.Request[v1beta1.ChangeSubscriptionRequest]) (*connect_go.Response[v1beta1.ChangeSubscriptionResponse], error)
	UpdateSubscription(context.Context, *connect_go.Request[v1beta1.UpdateSubscriptionRequest]) (*connect_go.Response[v1beta1.UpdateSubscriptionResponse], error)
	// Billing Product
	CreateProduct(context.Context, *connect_go.Request[v1beta1.CreateProductRequest]) (*connect_go.Response[v1beta1.CreateProductResponse], error)
	GetProduct(context.Context, *connect_go.Request[v1beta1.GetProductRequest]) (*connect_go.Response[v1beta1.GetProductResponse], error)
	ListProducts(context.Context, *connect_go.Request[v1beta1.ListProductsRequest]) (*connect_go.Response[v1beta1.ListProductsResponse], error)
	UpdateProduct(context.Context, *connect_go.Request[v1beta1.UpdateProductRequest]) (*connect_go.Response[v1beta1.UpdateProductResponse], error)
	CreateFeature(context.Context, *connect_go.Request[v1beta1.CreateFeatureRequest]) (*connect_go.Response[v1beta1.CreateFeatureResponse], error)
	GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error)
	UpdateFeature(context.Context, *connect_go.Request[v1beta1.UpdateFeatureRequest]) (*connect_go.Response[v1beta1.UpdateFeatureResponse], error)
	ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error)
	// Plans
	CreatePlan(context.Context, *connect_go.Request[v1beta1.CreatePlanRequest]) (*connect_go.Response[v1beta1.CreatePlanResponse], error)
	ListPlans(context.Context, *connect_go.Request[v1beta1.ListPlansRequest]) (*connect_go.Response[v1beta1.ListPlansResponse], error)
	GetPlan(context.Context, *connect_go.Request[v1beta1.GetPlanRequest]) (*connect_go.Response[v1beta1.GetPlanResponse], error)
	UpdatePlan(context.Context, *connect_go.Request[v1beta1.UpdatePlanRequest]) (*connect_go.Response[v1beta1.UpdatePlanResponse], error)
	// Checkout
	CreateCheckout(context.Context, *connect_go.Request[v1beta1.CreateCheckoutRequest]) (*connect_go.Response[v1beta1.CreateCheckoutResponse], error)
	ListCheckouts(context.Context, *connect_go.Request[v1beta1.ListCheckoutsRequest]) (*connect_go.Response[v1beta1.ListCheckoutsResponse], error)
	GetCheckout(context.Context, *connect_go.Request[v1beta1.GetCheckoutRequest]) (*connect_go.Response[v1beta1.GetCheckoutResponse], error)
	// Billing Entitlements
	CheckFeatureEntitlement(context.Context, *connect_go.Request[v1beta1.CheckFeatureEntitlementRequest]) (*connect_go.Response[v1beta1.CheckFeatureEntitlementResponse], error)
	// Transactions
	CreateBillingUsage(context.Context, *connect_go.Request[v1beta1.CreateBillingUsageRequest]) (*connect_go.Response[v1beta1.CreateBillingUsageResponse], error)
	ListBillingTransactions(context.Context, *connect_go.Request[v1beta1.ListBillingTransactionsRequest]) (*connect_go.Response[v1beta1.ListBillingTransactionsResponse], error)
	TotalDebitedTransactions(context.Context, *connect_go.Request[v1beta1.TotalDebitedTransactionsRequest]) (*connect_go.Response[v1beta1.TotalDebitedTransactionsResponse], error)
	// Invoice
	ListInvoices(context.Context, *connect_go.Request[v1beta1.ListInvoicesRequest]) (*connect_go.Response[v1beta1.ListInvoicesResponse], error)
	GetUpcomingInvoice(context.Context, *connect_go.Request[v1beta1.GetUpcomingInvoiceRequest]) (*connect_go.Response[v1beta1.GetUpcomingInvoiceResponse], error)
	// Incoming Webhooks
	BillingWebhookCallback(context.Context, *connect_go.Request[v1beta1.BillingWebhookCallbackRequest]) (*connect_go.Response[v1beta1.BillingWebhookCallbackResponse], error)
	// Prospects
	CreateProspectPublic(context.Context, *connect_go.Request[v1beta1.CreateProspectPublicRequest]) (*connect_go.Response[v1beta1.CreateProspectPublicResponse], error)
}

// NewFrontierServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontierServiceHandler(svc FrontierServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	frontierServiceListUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	frontierServiceCreateUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	frontierServiceGetUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	frontierServiceListUserGroupsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListUserGroupsProcedure,
		svc.ListUserGroups,
		opts...,
	)
	frontierServiceListCurrentUserGroupsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListCurrentUserGroupsProcedure,
		svc.ListCurrentUserGroups,
		opts...,
	)
	frontierServiceGetCurrentUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		opts...,
	)
	frontierServiceUpdateUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	frontierServiceUpdateCurrentUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateCurrentUserProcedure,
		svc.UpdateCurrentUser,
		opts...,
	)
	frontierServiceEnableUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceEnableUserProcedure,
		svc.EnableUser,
		opts...,
	)
	frontierServiceDisableUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceDisableUserProcedure,
		svc.DisableUser,
		opts...,
	)
	frontierServiceDeleteUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteUserProcedure,
		svc.DeleteUser,
		opts...,
	)
	frontierServiceListOrganizationsByUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationsByUserProcedure,
		svc.ListOrganizationsByUser,
		opts...,
	)
	frontierServiceListOrganizationsByCurrentUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationsByCurrentUserProcedure,
		svc.ListOrganizationsByCurrentUser,
		opts...,
	)
	frontierServiceListProjectsByUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectsByUserProcedure,
		svc.ListProjectsByUser,
		opts...,
	)
	frontierServiceListProjectsByCurrentUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectsByCurrentUserProcedure,
		svc.ListProjectsByCurrentUser,
		opts...,
	)
	frontierServiceListUserInvitationsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListUserInvitationsProcedure,
		svc.ListUserInvitations,
		opts...,
	)
	frontierServiceListCurrentUserInvitationsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListCurrentUserInvitationsProcedure,
		svc.ListCurrentUserInvitations,
		opts...,
	)
	frontierServiceListServiceUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListServiceUsersProcedure,
		svc.ListServiceUsers,
		opts...,
	)
	frontierServiceCreateServiceUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateServiceUserProcedure,
		svc.CreateServiceUser,
		opts...,
	)
	frontierServiceGetServiceUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetServiceUserProcedure,
		svc.GetServiceUser,
		opts...,
	)
	frontierServiceDeleteServiceUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteServiceUserProcedure,
		svc.DeleteServiceUser,
		opts...,
	)
	frontierServiceCreateServiceUserJWKHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateServiceUserJWKProcedure,
		svc.CreateServiceUserJWK,
		opts...,
	)
	frontierServiceListServiceUserJWKsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListServiceUserJWKsProcedure,
		svc.ListServiceUserJWKs,
		opts...,
	)
	frontierServiceGetServiceUserJWKHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetServiceUserJWKProcedure,
		svc.GetServiceUserJWK,
		opts...,
	)
	frontierServiceDeleteServiceUserJWKHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteServiceUserJWKProcedure,
		svc.DeleteServiceUserJWK,
		opts...,
	)
	frontierServiceCreateServiceUserCredentialHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateServiceUserCredentialProcedure,
		svc.CreateServiceUserCredential,
		opts...,
	)
	frontierServiceListServiceUserCredentialsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListServiceUserCredentialsProcedure,
		svc.ListServiceUserCredentials,
		opts...,
	)
	frontierServiceDeleteServiceUserCredentialHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteServiceUserCredentialProcedure,
		svc.DeleteServiceUserCredential,
		opts...,
	)
	frontierServiceCreateServiceUserTokenHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateServiceUserTokenProcedure,
		svc.CreateServiceUserToken,
		opts...,
	)
	frontierServiceListServiceUserTokensHandler := connect_go.NewUnaryHandler(
		FrontierServiceListServiceUserTokensProcedure,
		svc.ListServiceUserTokens,
		opts...,
	)
	frontierServiceDeleteServiceUserTokenHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteServiceUserTokenProcedure,
		svc.DeleteServiceUserToken,
		opts...,
	)
	frontierServiceListServiceUserProjectsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListServiceUserProjectsProcedure,
		svc.ListServiceUserProjects,
		opts...,
	)
	frontierServiceListOrganizationGroupsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationGroupsProcedure,
		svc.ListOrganizationGroups,
		opts...,
	)
	frontierServiceCreateGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateGroupProcedure,
		svc.CreateGroup,
		opts...,
	)
	frontierServiceGetGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetGroupProcedure,
		svc.GetGroup,
		opts...,
	)
	frontierServiceUpdateGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		opts...,
	)
	frontierServiceListGroupUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListGroupUsersProcedure,
		svc.ListGroupUsers,
		opts...,
	)
	frontierServiceAddGroupUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceAddGroupUsersProcedure,
		svc.AddGroupUsers,
		opts...,
	)
	frontierServiceRemoveGroupUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceRemoveGroupUserProcedure,
		svc.RemoveGroupUser,
		opts...,
	)
	frontierServiceEnableGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceEnableGroupProcedure,
		svc.EnableGroup,
		opts...,
	)
	frontierServiceDisableGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceDisableGroupProcedure,
		svc.DisableGroup,
		opts...,
	)
	frontierServiceDeleteGroupHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		opts...,
	)
	frontierServiceListRolesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListRolesProcedure,
		svc.ListRoles,
		opts...,
	)
	frontierServiceListOrganizationRolesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationRolesProcedure,
		svc.ListOrganizationRoles,
		opts...,
	)
	frontierServiceCreateOrganizationRoleHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationRoleProcedure,
		svc.CreateOrganizationRole,
		opts...,
	)
	frontierServiceGetOrganizationRoleHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationRoleProcedure,
		svc.GetOrganizationRole,
		opts...,
	)
	frontierServiceUpdateOrganizationRoleHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateOrganizationRoleProcedure,
		svc.UpdateOrganizationRole,
		opts...,
	)
	frontierServiceDeleteOrganizationRoleHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteOrganizationRoleProcedure,
		svc.DeleteOrganizationRole,
		opts...,
	)
	frontierServiceListOrganizationsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		opts...,
	)
	frontierServiceCreateOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		opts...,
	)
	frontierServiceGetOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationProcedure,
		svc.GetOrganization,
		opts...,
	)
	frontierServiceUpdateOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		opts...,
	)
	frontierServiceListOrganizationProjectsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationProjectsProcedure,
		svc.ListOrganizationProjects,
		opts...,
	)
	frontierServiceListOrganizationAdminsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationAdminsProcedure,
		svc.ListOrganizationAdmins,
		opts...,
	)
	frontierServiceListOrganizationUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationUsersProcedure,
		svc.ListOrganizationUsers,
		opts...,
	)
	frontierServiceAddOrganizationUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceAddOrganizationUsersProcedure,
		svc.AddOrganizationUsers,
		opts...,
	)
	frontierServiceRemoveOrganizationUserHandler := connect_go.NewUnaryHandler(
		FrontierServiceRemoveOrganizationUserProcedure,
		svc.RemoveOrganizationUser,
		opts...,
	)
	frontierServiceGetOrganizationKycHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationKycProcedure,
		svc.GetOrganizationKyc,
		opts...,
	)
	frontierServiceListOrganizationServiceUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationServiceUsersProcedure,
		svc.ListOrganizationServiceUsers,
		opts...,
	)
	frontierServiceListOrganizationInvitationsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationInvitationsProcedure,
		svc.ListOrganizationInvitations,
		opts...,
	)
	frontierServiceCreateOrganizationInvitationHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationInvitationProcedure,
		svc.CreateOrganizationInvitation,
		opts...,
	)
	frontierServiceGetOrganizationInvitationHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationInvitationProcedure,
		svc.GetOrganizationInvitation,
		opts...,
	)
	frontierServiceAcceptOrganizationInvitationHandler := connect_go.NewUnaryHandler(
		FrontierServiceAcceptOrganizationInvitationProcedure,
		svc.AcceptOrganizationInvitation,
		opts...,
	)
	frontierServiceDeleteOrganizationInvitationHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteOrganizationInvitationProcedure,
		svc.DeleteOrganizationInvitation,
		opts...,
	)
	frontierServiceListOrganizationDomainsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationDomainsProcedure,
		svc.ListOrganizationDomains,
		opts...,
	)
	frontierServiceCreateOrganizationDomainHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationDomainProcedure,
		svc.CreateOrganizationDomain,
		opts...,
	)
	frontierServiceDeleteOrganizationDomainHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteOrganizationDomainProcedure,
		svc.DeleteOrganizationDomain,
		opts...,
	)
	frontierServiceGetOrganizationDomainHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationDomainProcedure,
		svc.GetOrganizationDomain,
		opts...,
	)
	frontierServiceVerifyOrganizationDomainHandler := connect_go.NewUnaryHandler(
		FrontierServiceVerifyOrganizationDomainProcedure,
		svc.VerifyOrganizationDomain,
		opts...,
	)
	frontierServiceJoinOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceJoinOrganizationProcedure,
		svc.JoinOrganization,
		opts...,
	)
	frontierServiceEnableOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceEnableOrganizationProcedure,
		svc.EnableOrganization,
		opts...,
	)
	frontierServiceDisableOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceDisableOrganizationProcedure,
		svc.DisableOrganization,
		opts...,
	)
	frontierServiceDeleteOrganizationHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		opts...,
	)
	frontierServiceCreateProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	frontierServiceGetProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetProjectProcedure,
		svc.GetProject,
		opts...,
	)
	frontierServiceUpdateProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	frontierServiceListProjectAdminsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectAdminsProcedure,
		svc.ListProjectAdmins,
		opts...,
	)
	frontierServiceListProjectUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectUsersProcedure,
		svc.ListProjectUsers,
		opts...,
	)
	frontierServiceListProjectServiceUsersHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectServiceUsersProcedure,
		svc.ListProjectServiceUsers,
		opts...,
	)
	frontierServiceListProjectGroupsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectGroupsProcedure,
		svc.ListProjectGroups,
		opts...,
	)
	frontierServiceEnableProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceEnableProjectProcedure,
		svc.EnableProject,
		opts...,
	)
	frontierServiceDisableProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceDisableProjectProcedure,
		svc.DisableProject,
		opts...,
	)
	frontierServiceDeleteProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	frontierServiceCreatePolicyHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		opts...,
	)
	frontierServiceGetPolicyHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetPolicyProcedure,
		svc.GetPolicy,
		opts...,
	)
	frontierServiceListPoliciesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListPoliciesProcedure,
		svc.ListPolicies,
		opts...,
	)
	frontierServiceUpdatePolicyHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		opts...,
	)
	frontierServiceDeletePolicyHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		opts...,
	)
	frontierServiceCreatePolicyForProjectHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreatePolicyForProjectProcedure,
		svc.CreatePolicyForProject,
		opts...,
	)
	frontierServiceCreateRelationHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateRelationProcedure,
		svc.CreateRelation,
		opts...,
	)
	frontierServiceGetRelationHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetRelationProcedure,
		svc.GetRelation,
		opts...,
	)
	frontierServiceDeleteRelationHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteRelationProcedure,
		svc.DeleteRelation,
		opts...,
	)
	frontierServiceListPermissionsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListPermissionsProcedure,
		svc.ListPermissions,
		opts...,
	)
	frontierServiceGetPermissionHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetPermissionProcedure,
		svc.GetPermission,
		opts...,
	)
	frontierServiceListNamespacesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListNamespacesProcedure,
		svc.ListNamespaces,
		opts...,
	)
	frontierServiceGetNamespaceHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetNamespaceProcedure,
		svc.GetNamespace,
		opts...,
	)
	frontierServiceListProjectResourcesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectResourcesProcedure,
		svc.ListProjectResources,
		opts...,
	)
	frontierServiceCreateProjectResourceHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateProjectResourceProcedure,
		svc.CreateProjectResource,
		opts...,
	)
	frontierServiceGetProjectResourceHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetProjectResourceProcedure,
		svc.GetProjectResource,
		opts...,
	)
	frontierServiceUpdateProjectResourceHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateProjectResourceProcedure,
		svc.UpdateProjectResource,
		opts...,
	)
	frontierServiceDeleteProjectResourceHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteProjectResourceProcedure,
		svc.DeleteProjectResource,
		opts...,
	)
	frontierServiceCheckResourcePermissionHandler := connect_go.NewUnaryHandler(
		FrontierServiceCheckResourcePermissionProcedure,
		svc.CheckResourcePermission,
		opts...,
	)
	frontierServiceBatchCheckPermissionHandler := connect_go.NewUnaryHandler(
		FrontierServiceBatchCheckPermissionProcedure,
		svc.BatchCheckPermission,
		opts...,
	)
	frontierServiceGetJWKsHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetJWKsProcedure,
		svc.GetJWKs,
		opts...,
	)
	frontierServiceListAuthStrategiesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListAuthStrategiesProcedure,
		svc.ListAuthStrategies,
		opts...,
	)
	frontierServiceAuthenticateHandler := connect_go.NewUnaryHandler(
		FrontierServiceAuthenticateProcedure,
		svc.Authenticate,
		opts...,
	)
	frontierServiceAuthCallbackHandler := connect_go.NewUnaryHandler(
		FrontierServiceAuthCallbackProcedure,
		svc.AuthCallback,
		opts...,
	)
	frontierServiceAuthTokenHandler := connect_go.NewUnaryHandler(
		FrontierServiceAuthTokenProcedure,
		svc.AuthToken,
		opts...,
	)
	frontierServiceAuthLogoutHandler := connect_go.NewUnaryHandler(
		FrontierServiceAuthLogoutProcedure,
		svc.AuthLogout,
		opts...,
	)
	frontierServiceListMetaSchemasHandler := connect_go.NewUnaryHandler(
		FrontierServiceListMetaSchemasProcedure,
		svc.ListMetaSchemas,
		opts...,
	)
	frontierServiceCreateMetaSchemaHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateMetaSchemaProcedure,
		svc.CreateMetaSchema,
		opts...,
	)
	frontierServiceGetMetaSchemaHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetMetaSchemaProcedure,
		svc.GetMetaSchema,
		opts...,
	)
	frontierServiceUpdateMetaSchemaHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateMetaSchemaProcedure,
		svc.UpdateMetaSchema,
		opts...,
	)
	frontierServiceDeleteMetaSchemaHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteMetaSchemaProcedure,
		svc.DeleteMetaSchema,
		opts...,
	)
	frontierServiceListOrganizationAuditLogsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationAuditLogsProcedure,
		svc.ListOrganizationAuditLogs,
		opts...,
	)
	frontierServiceCreateOrganizationAuditLogsHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationAuditLogsProcedure,
		svc.CreateOrganizationAuditLogs,
		opts...,
	)
	frontierServiceGetOrganizationAuditLogHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetOrganizationAuditLogProcedure,
		svc.GetOrganizationAuditLog,
		opts...,
	)
	frontierServiceDescribePreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceDescribePreferencesProcedure,
		svc.DescribePreferences,
		opts...,
	)
	frontierServiceCreateOrganizationPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateOrganizationPreferencesProcedure,
		svc.CreateOrganizationPreferences,
		opts...,
	)
	frontierServiceListOrganizationPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListOrganizationPreferencesProcedure,
		svc.ListOrganizationPreferences,
		opts...,
	)
	frontierServiceCreateProjectPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateProjectPreferencesProcedure,
		svc.CreateProjectPreferences,
		opts...,
	)
	frontierServiceListProjectPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProjectPreferencesProcedure,
		svc.ListProjectPreferences,
		opts...,
	)
	frontierServiceCreateGroupPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateGroupPreferencesProcedure,
		svc.CreateGroupPreferences,
		opts...,
	)
	frontierServiceListGroupPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListGroupPreferencesProcedure,
		svc.ListGroupPreferences,
		opts...,
	)
	frontierServiceCreateUserPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateUserPreferencesProcedure,
		svc.CreateUserPreferences,
		opts...,
	)
	frontierServiceListUserPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListUserPreferencesProcedure,
		svc.ListUserPreferences,
		opts...,
	)
	frontierServiceCreateCurrentUserPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateCurrentUserPreferencesProcedure,
		svc.CreateCurrentUserPreferences,
		opts...,
	)
	frontierServiceListCurrentUserPreferencesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListCurrentUserPreferencesProcedure,
		svc.ListCurrentUserPreferences,
		opts...,
	)
	frontierServiceCreateBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateBillingAccountProcedure,
		svc.CreateBillingAccount,
		opts...,
	)
	frontierServiceGetBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetBillingAccountProcedure,
		svc.GetBillingAccount,
		opts...,
	)
	frontierServiceUpdateBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateBillingAccountProcedure,
		svc.UpdateBillingAccount,
		opts...,
	)
	frontierServiceRegisterBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceRegisterBillingAccountProcedure,
		svc.RegisterBillingAccount,
		opts...,
	)
	frontierServiceListBillingAccountsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListBillingAccountsProcedure,
		svc.ListBillingAccounts,
		opts...,
	)
	frontierServiceDeleteBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceDeleteBillingAccountProcedure,
		svc.DeleteBillingAccount,
		opts...,
	)
	frontierServiceEnableBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceEnableBillingAccountProcedure,
		svc.EnableBillingAccount,
		opts...,
	)
	frontierServiceDisableBillingAccountHandler := connect_go.NewUnaryHandler(
		FrontierServiceDisableBillingAccountProcedure,
		svc.DisableBillingAccount,
		opts...,
	)
	frontierServiceGetBillingBalanceHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetBillingBalanceProcedure,
		svc.GetBillingBalance,
		opts...,
	)
	frontierServiceHasTrialedHandler := connect_go.NewUnaryHandler(
		FrontierServiceHasTrialedProcedure,
		svc.HasTrialed,
		opts...,
	)
	frontierServiceGetSubscriptionHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		opts...,
	)
	frontierServiceCancelSubscriptionHandler := connect_go.NewUnaryHandler(
		FrontierServiceCancelSubscriptionProcedure,
		svc.CancelSubscription,
		opts...,
	)
	frontierServiceListSubscriptionsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		opts...,
	)
	frontierServiceChangeSubscriptionHandler := connect_go.NewUnaryHandler(
		FrontierServiceChangeSubscriptionProcedure,
		svc.ChangeSubscription,
		opts...,
	)
	frontierServiceUpdateSubscriptionHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateSubscriptionProcedure,
		svc.UpdateSubscription,
		opts...,
	)
	frontierServiceCreateProductHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateProductProcedure,
		svc.CreateProduct,
		opts...,
	)
	frontierServiceGetProductHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetProductProcedure,
		svc.GetProduct,
		opts...,
	)
	frontierServiceListProductsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListProductsProcedure,
		svc.ListProducts,
		opts...,
	)
	frontierServiceUpdateProductHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateProductProcedure,
		svc.UpdateProduct,
		opts...,
	)
	frontierServiceCreateFeatureHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateFeatureProcedure,
		svc.CreateFeature,
		opts...,
	)
	frontierServiceGetFeatureHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetFeatureProcedure,
		svc.GetFeature,
		opts...,
	)
	frontierServiceUpdateFeatureHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdateFeatureProcedure,
		svc.UpdateFeature,
		opts...,
	)
	frontierServiceListFeaturesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListFeaturesProcedure,
		svc.ListFeatures,
		opts...,
	)
	frontierServiceCreatePlanHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreatePlanProcedure,
		svc.CreatePlan,
		opts...,
	)
	frontierServiceListPlansHandler := connect_go.NewUnaryHandler(
		FrontierServiceListPlansProcedure,
		svc.ListPlans,
		opts...,
	)
	frontierServiceGetPlanHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetPlanProcedure,
		svc.GetPlan,
		opts...,
	)
	frontierServiceUpdatePlanHandler := connect_go.NewUnaryHandler(
		FrontierServiceUpdatePlanProcedure,
		svc.UpdatePlan,
		opts...,
	)
	frontierServiceCreateCheckoutHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateCheckoutProcedure,
		svc.CreateCheckout,
		opts...,
	)
	frontierServiceListCheckoutsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListCheckoutsProcedure,
		svc.ListCheckouts,
		opts...,
	)
	frontierServiceGetCheckoutHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetCheckoutProcedure,
		svc.GetCheckout,
		opts...,
	)
	frontierServiceCheckFeatureEntitlementHandler := connect_go.NewUnaryHandler(
		FrontierServiceCheckFeatureEntitlementProcedure,
		svc.CheckFeatureEntitlement,
		opts...,
	)
	frontierServiceCreateBillingUsageHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateBillingUsageProcedure,
		svc.CreateBillingUsage,
		opts...,
	)
	frontierServiceListBillingTransactionsHandler := connect_go.NewUnaryHandler(
		FrontierServiceListBillingTransactionsProcedure,
		svc.ListBillingTransactions,
		opts...,
	)
	frontierServiceTotalDebitedTransactionsHandler := connect_go.NewUnaryHandler(
		FrontierServiceTotalDebitedTransactionsProcedure,
		svc.TotalDebitedTransactions,
		opts...,
	)
	frontierServiceListInvoicesHandler := connect_go.NewUnaryHandler(
		FrontierServiceListInvoicesProcedure,
		svc.ListInvoices,
		opts...,
	)
	frontierServiceGetUpcomingInvoiceHandler := connect_go.NewUnaryHandler(
		FrontierServiceGetUpcomingInvoiceProcedure,
		svc.GetUpcomingInvoice,
		opts...,
	)
	frontierServiceBillingWebhookCallbackHandler := connect_go.NewUnaryHandler(
		FrontierServiceBillingWebhookCallbackProcedure,
		svc.BillingWebhookCallback,
		opts...,
	)
	frontierServiceCreateProspectPublicHandler := connect_go.NewUnaryHandler(
		FrontierServiceCreateProspectPublicProcedure,
		svc.CreateProspectPublic,
		opts...,
	)
	return "/raystack.frontier.v1beta1.FrontierService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontierServiceListUsersProcedure:
			frontierServiceListUsersHandler.ServeHTTP(w, r)
		case FrontierServiceCreateUserProcedure:
			frontierServiceCreateUserHandler.ServeHTTP(w, r)
		case FrontierServiceGetUserProcedure:
			frontierServiceGetUserHandler.ServeHTTP(w, r)
		case FrontierServiceListUserGroupsProcedure:
			frontierServiceListUserGroupsHandler.ServeHTTP(w, r)
		case FrontierServiceListCurrentUserGroupsProcedure:
			frontierServiceListCurrentUserGroupsHandler.ServeHTTP(w, r)
		case FrontierServiceGetCurrentUserProcedure:
			frontierServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateUserProcedure:
			frontierServiceUpdateUserHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateCurrentUserProcedure:
			frontierServiceUpdateCurrentUserHandler.ServeHTTP(w, r)
		case FrontierServiceEnableUserProcedure:
			frontierServiceEnableUserHandler.ServeHTTP(w, r)
		case FrontierServiceDisableUserProcedure:
			frontierServiceDisableUserHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteUserProcedure:
			frontierServiceDeleteUserHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationsByUserProcedure:
			frontierServiceListOrganizationsByUserHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationsByCurrentUserProcedure:
			frontierServiceListOrganizationsByCurrentUserHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectsByUserProcedure:
			frontierServiceListProjectsByUserHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectsByCurrentUserProcedure:
			frontierServiceListProjectsByCurrentUserHandler.ServeHTTP(w, r)
		case FrontierServiceListUserInvitationsProcedure:
			frontierServiceListUserInvitationsHandler.ServeHTTP(w, r)
		case FrontierServiceListCurrentUserInvitationsProcedure:
			frontierServiceListCurrentUserInvitationsHandler.ServeHTTP(w, r)
		case FrontierServiceListServiceUsersProcedure:
			frontierServiceListServiceUsersHandler.ServeHTTP(w, r)
		case FrontierServiceCreateServiceUserProcedure:
			frontierServiceCreateServiceUserHandler.ServeHTTP(w, r)
		case FrontierServiceGetServiceUserProcedure:
			frontierServiceGetServiceUserHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteServiceUserProcedure:
			frontierServiceDeleteServiceUserHandler.ServeHTTP(w, r)
		case FrontierServiceCreateServiceUserJWKProcedure:
			frontierServiceCreateServiceUserJWKHandler.ServeHTTP(w, r)
		case FrontierServiceListServiceUserJWKsProcedure:
			frontierServiceListServiceUserJWKsHandler.ServeHTTP(w, r)
		case FrontierServiceGetServiceUserJWKProcedure:
			frontierServiceGetServiceUserJWKHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteServiceUserJWKProcedure:
			frontierServiceDeleteServiceUserJWKHandler.ServeHTTP(w, r)
		case FrontierServiceCreateServiceUserCredentialProcedure:
			frontierServiceCreateServiceUserCredentialHandler.ServeHTTP(w, r)
		case FrontierServiceListServiceUserCredentialsProcedure:
			frontierServiceListServiceUserCredentialsHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteServiceUserCredentialProcedure:
			frontierServiceDeleteServiceUserCredentialHandler.ServeHTTP(w, r)
		case FrontierServiceCreateServiceUserTokenProcedure:
			frontierServiceCreateServiceUserTokenHandler.ServeHTTP(w, r)
		case FrontierServiceListServiceUserTokensProcedure:
			frontierServiceListServiceUserTokensHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteServiceUserTokenProcedure:
			frontierServiceDeleteServiceUserTokenHandler.ServeHTTP(w, r)
		case FrontierServiceListServiceUserProjectsProcedure:
			frontierServiceListServiceUserProjectsHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationGroupsProcedure:
			frontierServiceListOrganizationGroupsHandler.ServeHTTP(w, r)
		case FrontierServiceCreateGroupProcedure:
			frontierServiceCreateGroupHandler.ServeHTTP(w, r)
		case FrontierServiceGetGroupProcedure:
			frontierServiceGetGroupHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateGroupProcedure:
			frontierServiceUpdateGroupHandler.ServeHTTP(w, r)
		case FrontierServiceListGroupUsersProcedure:
			frontierServiceListGroupUsersHandler.ServeHTTP(w, r)
		case FrontierServiceAddGroupUsersProcedure:
			frontierServiceAddGroupUsersHandler.ServeHTTP(w, r)
		case FrontierServiceRemoveGroupUserProcedure:
			frontierServiceRemoveGroupUserHandler.ServeHTTP(w, r)
		case FrontierServiceEnableGroupProcedure:
			frontierServiceEnableGroupHandler.ServeHTTP(w, r)
		case FrontierServiceDisableGroupProcedure:
			frontierServiceDisableGroupHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteGroupProcedure:
			frontierServiceDeleteGroupHandler.ServeHTTP(w, r)
		case FrontierServiceListRolesProcedure:
			frontierServiceListRolesHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationRolesProcedure:
			frontierServiceListOrganizationRolesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationRoleProcedure:
			frontierServiceCreateOrganizationRoleHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationRoleProcedure:
			frontierServiceGetOrganizationRoleHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateOrganizationRoleProcedure:
			frontierServiceUpdateOrganizationRoleHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteOrganizationRoleProcedure:
			frontierServiceDeleteOrganizationRoleHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationsProcedure:
			frontierServiceListOrganizationsHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationProcedure:
			frontierServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationProcedure:
			frontierServiceGetOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateOrganizationProcedure:
			frontierServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationProjectsProcedure:
			frontierServiceListOrganizationProjectsHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationAdminsProcedure:
			frontierServiceListOrganizationAdminsHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationUsersProcedure:
			frontierServiceListOrganizationUsersHandler.ServeHTTP(w, r)
		case FrontierServiceAddOrganizationUsersProcedure:
			frontierServiceAddOrganizationUsersHandler.ServeHTTP(w, r)
		case FrontierServiceRemoveOrganizationUserProcedure:
			frontierServiceRemoveOrganizationUserHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationKycProcedure:
			frontierServiceGetOrganizationKycHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationServiceUsersProcedure:
			frontierServiceListOrganizationServiceUsersHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationInvitationsProcedure:
			frontierServiceListOrganizationInvitationsHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationInvitationProcedure:
			frontierServiceCreateOrganizationInvitationHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationInvitationProcedure:
			frontierServiceGetOrganizationInvitationHandler.ServeHTTP(w, r)
		case FrontierServiceAcceptOrganizationInvitationProcedure:
			frontierServiceAcceptOrganizationInvitationHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteOrganizationInvitationProcedure:
			frontierServiceDeleteOrganizationInvitationHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationDomainsProcedure:
			frontierServiceListOrganizationDomainsHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationDomainProcedure:
			frontierServiceCreateOrganizationDomainHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteOrganizationDomainProcedure:
			frontierServiceDeleteOrganizationDomainHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationDomainProcedure:
			frontierServiceGetOrganizationDomainHandler.ServeHTTP(w, r)
		case FrontierServiceVerifyOrganizationDomainProcedure:
			frontierServiceVerifyOrganizationDomainHandler.ServeHTTP(w, r)
		case FrontierServiceJoinOrganizationProcedure:
			frontierServiceJoinOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceEnableOrganizationProcedure:
			frontierServiceEnableOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceDisableOrganizationProcedure:
			frontierServiceDisableOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteOrganizationProcedure:
			frontierServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case FrontierServiceCreateProjectProcedure:
			frontierServiceCreateProjectHandler.ServeHTTP(w, r)
		case FrontierServiceGetProjectProcedure:
			frontierServiceGetProjectHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateProjectProcedure:
			frontierServiceUpdateProjectHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectAdminsProcedure:
			frontierServiceListProjectAdminsHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectUsersProcedure:
			frontierServiceListProjectUsersHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectServiceUsersProcedure:
			frontierServiceListProjectServiceUsersHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectGroupsProcedure:
			frontierServiceListProjectGroupsHandler.ServeHTTP(w, r)
		case FrontierServiceEnableProjectProcedure:
			frontierServiceEnableProjectHandler.ServeHTTP(w, r)
		case FrontierServiceDisableProjectProcedure:
			frontierServiceDisableProjectHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteProjectProcedure:
			frontierServiceDeleteProjectHandler.ServeHTTP(w, r)
		case FrontierServiceCreatePolicyProcedure:
			frontierServiceCreatePolicyHandler.ServeHTTP(w, r)
		case FrontierServiceGetPolicyProcedure:
			frontierServiceGetPolicyHandler.ServeHTTP(w, r)
		case FrontierServiceListPoliciesProcedure:
			frontierServiceListPoliciesHandler.ServeHTTP(w, r)
		case FrontierServiceUpdatePolicyProcedure:
			frontierServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case FrontierServiceDeletePolicyProcedure:
			frontierServiceDeletePolicyHandler.ServeHTTP(w, r)
		case FrontierServiceCreatePolicyForProjectProcedure:
			frontierServiceCreatePolicyForProjectHandler.ServeHTTP(w, r)
		case FrontierServiceCreateRelationProcedure:
			frontierServiceCreateRelationHandler.ServeHTTP(w, r)
		case FrontierServiceGetRelationProcedure:
			frontierServiceGetRelationHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteRelationProcedure:
			frontierServiceDeleteRelationHandler.ServeHTTP(w, r)
		case FrontierServiceListPermissionsProcedure:
			frontierServiceListPermissionsHandler.ServeHTTP(w, r)
		case FrontierServiceGetPermissionProcedure:
			frontierServiceGetPermissionHandler.ServeHTTP(w, r)
		case FrontierServiceListNamespacesProcedure:
			frontierServiceListNamespacesHandler.ServeHTTP(w, r)
		case FrontierServiceGetNamespaceProcedure:
			frontierServiceGetNamespaceHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectResourcesProcedure:
			frontierServiceListProjectResourcesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateProjectResourceProcedure:
			frontierServiceCreateProjectResourceHandler.ServeHTTP(w, r)
		case FrontierServiceGetProjectResourceProcedure:
			frontierServiceGetProjectResourceHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateProjectResourceProcedure:
			frontierServiceUpdateProjectResourceHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteProjectResourceProcedure:
			frontierServiceDeleteProjectResourceHandler.ServeHTTP(w, r)
		case FrontierServiceCheckResourcePermissionProcedure:
			frontierServiceCheckResourcePermissionHandler.ServeHTTP(w, r)
		case FrontierServiceBatchCheckPermissionProcedure:
			frontierServiceBatchCheckPermissionHandler.ServeHTTP(w, r)
		case FrontierServiceGetJWKsProcedure:
			frontierServiceGetJWKsHandler.ServeHTTP(w, r)
		case FrontierServiceListAuthStrategiesProcedure:
			frontierServiceListAuthStrategiesHandler.ServeHTTP(w, r)
		case FrontierServiceAuthenticateProcedure:
			frontierServiceAuthenticateHandler.ServeHTTP(w, r)
		case FrontierServiceAuthCallbackProcedure:
			frontierServiceAuthCallbackHandler.ServeHTTP(w, r)
		case FrontierServiceAuthTokenProcedure:
			frontierServiceAuthTokenHandler.ServeHTTP(w, r)
		case FrontierServiceAuthLogoutProcedure:
			frontierServiceAuthLogoutHandler.ServeHTTP(w, r)
		case FrontierServiceListMetaSchemasProcedure:
			frontierServiceListMetaSchemasHandler.ServeHTTP(w, r)
		case FrontierServiceCreateMetaSchemaProcedure:
			frontierServiceCreateMetaSchemaHandler.ServeHTTP(w, r)
		case FrontierServiceGetMetaSchemaProcedure:
			frontierServiceGetMetaSchemaHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateMetaSchemaProcedure:
			frontierServiceUpdateMetaSchemaHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteMetaSchemaProcedure:
			frontierServiceDeleteMetaSchemaHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationAuditLogsProcedure:
			frontierServiceListOrganizationAuditLogsHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationAuditLogsProcedure:
			frontierServiceCreateOrganizationAuditLogsHandler.ServeHTTP(w, r)
		case FrontierServiceGetOrganizationAuditLogProcedure:
			frontierServiceGetOrganizationAuditLogHandler.ServeHTTP(w, r)
		case FrontierServiceDescribePreferencesProcedure:
			frontierServiceDescribePreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateOrganizationPreferencesProcedure:
			frontierServiceCreateOrganizationPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceListOrganizationPreferencesProcedure:
			frontierServiceListOrganizationPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateProjectPreferencesProcedure:
			frontierServiceCreateProjectPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceListProjectPreferencesProcedure:
			frontierServiceListProjectPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateGroupPreferencesProcedure:
			frontierServiceCreateGroupPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceListGroupPreferencesProcedure:
			frontierServiceListGroupPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateUserPreferencesProcedure:
			frontierServiceCreateUserPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceListUserPreferencesProcedure:
			frontierServiceListUserPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateCurrentUserPreferencesProcedure:
			frontierServiceCreateCurrentUserPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceListCurrentUserPreferencesProcedure:
			frontierServiceListCurrentUserPreferencesHandler.ServeHTTP(w, r)
		case FrontierServiceCreateBillingAccountProcedure:
			frontierServiceCreateBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceGetBillingAccountProcedure:
			frontierServiceGetBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateBillingAccountProcedure:
			frontierServiceUpdateBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceRegisterBillingAccountProcedure:
			frontierServiceRegisterBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceListBillingAccountsProcedure:
			frontierServiceListBillingAccountsHandler.ServeHTTP(w, r)
		case FrontierServiceDeleteBillingAccountProcedure:
			frontierServiceDeleteBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceEnableBillingAccountProcedure:
			frontierServiceEnableBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceDisableBillingAccountProcedure:
			frontierServiceDisableBillingAccountHandler.ServeHTTP(w, r)
		case FrontierServiceGetBillingBalanceProcedure:
			frontierServiceGetBillingBalanceHandler.ServeHTTP(w, r)
		case FrontierServiceHasTrialedProcedure:
			frontierServiceHasTrialedHandler.ServeHTTP(w, r)
		case FrontierServiceGetSubscriptionProcedure:
			frontierServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case FrontierServiceCancelSubscriptionProcedure:
			frontierServiceCancelSubscriptionHandler.ServeHTTP(w, r)
		case FrontierServiceListSubscriptionsProcedure:
			frontierServiceListSubscriptionsHandler.ServeHTTP(w, r)
		case FrontierServiceChangeSubscriptionProcedure:
			frontierServiceChangeSubscriptionHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateSubscriptionProcedure:
			frontierServiceUpdateSubscriptionHandler.ServeHTTP(w, r)
		case FrontierServiceCreateProductProcedure:
			frontierServiceCreateProductHandler.ServeHTTP(w, r)
		case FrontierServiceGetProductProcedure:
			frontierServiceGetProductHandler.ServeHTTP(w, r)
		case FrontierServiceListProductsProcedure:
			frontierServiceListProductsHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateProductProcedure:
			frontierServiceUpdateProductHandler.ServeHTTP(w, r)
		case FrontierServiceCreateFeatureProcedure:
			frontierServiceCreateFeatureHandler.ServeHTTP(w, r)
		case FrontierServiceGetFeatureProcedure:
			frontierServiceGetFeatureHandler.ServeHTTP(w, r)
		case FrontierServiceUpdateFeatureProcedure:
			frontierServiceUpdateFeatureHandler.ServeHTTP(w, r)
		case FrontierServiceListFeaturesProcedure:
			frontierServiceListFeaturesHandler.ServeHTTP(w, r)
		case FrontierServiceCreatePlanProcedure:
			frontierServiceCreatePlanHandler.ServeHTTP(w, r)
		case FrontierServiceListPlansProcedure:
			frontierServiceListPlansHandler.ServeHTTP(w, r)
		case FrontierServiceGetPlanProcedure:
			frontierServiceGetPlanHandler.ServeHTTP(w, r)
		case FrontierServiceUpdatePlanProcedure:
			frontierServiceUpdatePlanHandler.ServeHTTP(w, r)
		case FrontierServiceCreateCheckoutProcedure:
			frontierServiceCreateCheckoutHandler.ServeHTTP(w, r)
		case FrontierServiceListCheckoutsProcedure:
			frontierServiceListCheckoutsHandler.ServeHTTP(w, r)
		case FrontierServiceGetCheckoutProcedure:
			frontierServiceGetCheckoutHandler.ServeHTTP(w, r)
		case FrontierServiceCheckFeatureEntitlementProcedure:
			frontierServiceCheckFeatureEntitlementHandler.ServeHTTP(w, r)
		case FrontierServiceCreateBillingUsageProcedure:
			frontierServiceCreateBillingUsageHandler.ServeHTTP(w, r)
		case FrontierServiceListBillingTransactionsProcedure:
			frontierServiceListBillingTransactionsHandler.ServeHTTP(w, r)
		case FrontierServiceTotalDebitedTransactionsProcedure:
			frontierServiceTotalDebitedTransactionsHandler.ServeHTTP(w, r)
		case FrontierServiceListInvoicesProcedure:
			frontierServiceListInvoicesHandler.ServeHTTP(w, r)
		case FrontierServiceGetUpcomingInvoiceProcedure:
			frontierServiceGetUpcomingInvoiceHandler.ServeHTTP(w, r)
		case FrontierServiceBillingWebhookCallbackProcedure:
			frontierServiceBillingWebhookCallbackHandler.ServeHTTP(w, r)
		case FrontierServiceCreateProspectPublicProcedure:
			frontierServiceCreateProspectPublicHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontierServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontierServiceHandler struct{}

func (UnimplementedFrontierServiceHandler) ListUsers(context.Context, *connect_go.Request[v1beta1.ListUsersRequest]) (*connect_go.Response[v1beta1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateUser(context.Context, *connect_go.Request[v1beta1.CreateUserRequest]) (*connect_go.Response[v1beta1.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetUser(context.Context, *connect_go.Request[v1beta1.GetUserRequest]) (*connect_go.Response[v1beta1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListUserGroups(context.Context, *connect_go.Request[v1beta1.ListUserGroupsRequest]) (*connect_go.Response[v1beta1.ListUserGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListUserGroups is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListCurrentUserGroups(context.Context, *connect_go.Request[v1beta1.ListCurrentUserGroupsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListCurrentUserGroups is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetCurrentUser(context.Context, *connect_go.Request[v1beta1.GetCurrentUserRequest]) (*connect_go.Response[v1beta1.GetCurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetCurrentUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateUser(context.Context, *connect_go.Request[v1beta1.UpdateUserRequest]) (*connect_go.Response[v1beta1.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateCurrentUser(context.Context, *connect_go.Request[v1beta1.UpdateCurrentUserRequest]) (*connect_go.Response[v1beta1.UpdateCurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateCurrentUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) EnableUser(context.Context, *connect_go.Request[v1beta1.EnableUserRequest]) (*connect_go.Response[v1beta1.EnableUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.EnableUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DisableUser(context.Context, *connect_go.Request[v1beta1.DisableUserRequest]) (*connect_go.Response[v1beta1.DisableUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DisableUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteUser(context.Context, *connect_go.Request[v1beta1.DeleteUserRequest]) (*connect_go.Response[v1beta1.DeleteUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationsByUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationsByUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListOrganizationsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListOrganizationsByCurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationsByCurrentUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectsByUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectsByUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectsByCurrentUser(context.Context, *connect_go.Request[v1beta1.ListProjectsByCurrentUserRequest]) (*connect_go.Response[v1beta1.ListProjectsByCurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectsByCurrentUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListUserInvitations(context.Context, *connect_go.Request[v1beta1.ListUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListUserInvitationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListUserInvitations is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListCurrentUserInvitations(context.Context, *connect_go.Request[v1beta1.ListCurrentUserInvitationsRequest]) (*connect_go.Response[v1beta1.ListCurrentUserInvitationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListCurrentUserInvitations is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListServiceUsers(context.Context, *connect_go.Request[v1beta1.ListServiceUsersRequest]) (*connect_go.Response[v1beta1.ListServiceUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListServiceUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateServiceUser(context.Context, *connect_go.Request[v1beta1.CreateServiceUserRequest]) (*connect_go.Response[v1beta1.CreateServiceUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateServiceUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetServiceUser(context.Context, *connect_go.Request[v1beta1.GetServiceUserRequest]) (*connect_go.Response[v1beta1.GetServiceUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetServiceUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteServiceUser(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteServiceUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateServiceUserJWK(context.Context, *connect_go.Request[v1beta1.CreateServiceUserJWKRequest]) (*connect_go.Response[v1beta1.CreateServiceUserJWKResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateServiceUserJWK is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListServiceUserJWKs(context.Context, *connect_go.Request[v1beta1.ListServiceUserJWKsRequest]) (*connect_go.Response[v1beta1.ListServiceUserJWKsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListServiceUserJWKs is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetServiceUserJWK(context.Context, *connect_go.Request[v1beta1.GetServiceUserJWKRequest]) (*connect_go.Response[v1beta1.GetServiceUserJWKResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetServiceUserJWK is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteServiceUserJWK(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserJWKRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserJWKResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteServiceUserJWK is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateServiceUserCredential(context.Context, *connect_go.Request[v1beta1.CreateServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.CreateServiceUserCredentialResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateServiceUserCredential is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListServiceUserCredentials(context.Context, *connect_go.Request[v1beta1.ListServiceUserCredentialsRequest]) (*connect_go.Response[v1beta1.ListServiceUserCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListServiceUserCredentials is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteServiceUserCredential(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserCredentialRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserCredentialResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteServiceUserCredential is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateServiceUserToken(context.Context, *connect_go.Request[v1beta1.CreateServiceUserTokenRequest]) (*connect_go.Response[v1beta1.CreateServiceUserTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateServiceUserToken is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListServiceUserTokens(context.Context, *connect_go.Request[v1beta1.ListServiceUserTokensRequest]) (*connect_go.Response[v1beta1.ListServiceUserTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListServiceUserTokens is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteServiceUserToken(context.Context, *connect_go.Request[v1beta1.DeleteServiceUserTokenRequest]) (*connect_go.Response[v1beta1.DeleteServiceUserTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteServiceUserToken is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListServiceUserProjects(context.Context, *connect_go.Request[v1beta1.ListServiceUserProjectsRequest]) (*connect_go.Response[v1beta1.ListServiceUserProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListServiceUserProjects is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationGroups(context.Context, *connect_go.Request[v1beta1.ListOrganizationGroupsRequest]) (*connect_go.Response[v1beta1.ListOrganizationGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationGroups is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateGroup(context.Context, *connect_go.Request[v1beta1.CreateGroupRequest]) (*connect_go.Response[v1beta1.CreateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetGroup(context.Context, *connect_go.Request[v1beta1.GetGroupRequest]) (*connect_go.Response[v1beta1.GetGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateGroup(context.Context, *connect_go.Request[v1beta1.UpdateGroupRequest]) (*connect_go.Response[v1beta1.UpdateGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListGroupUsers(context.Context, *connect_go.Request[v1beta1.ListGroupUsersRequest]) (*connect_go.Response[v1beta1.ListGroupUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListGroupUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AddGroupUsers(context.Context, *connect_go.Request[v1beta1.AddGroupUsersRequest]) (*connect_go.Response[v1beta1.AddGroupUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AddGroupUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) RemoveGroupUser(context.Context, *connect_go.Request[v1beta1.RemoveGroupUserRequest]) (*connect_go.Response[v1beta1.RemoveGroupUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.RemoveGroupUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) EnableGroup(context.Context, *connect_go.Request[v1beta1.EnableGroupRequest]) (*connect_go.Response[v1beta1.EnableGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.EnableGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DisableGroup(context.Context, *connect_go.Request[v1beta1.DisableGroupRequest]) (*connect_go.Response[v1beta1.DisableGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DisableGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteGroup(context.Context, *connect_go.Request[v1beta1.DeleteGroupRequest]) (*connect_go.Response[v1beta1.DeleteGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteGroup is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListRoles(context.Context, *connect_go.Request[v1beta1.ListRolesRequest]) (*connect_go.Response[v1beta1.ListRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListRoles is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationRoles(context.Context, *connect_go.Request[v1beta1.ListOrganizationRolesRequest]) (*connect_go.Response[v1beta1.ListOrganizationRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationRoles is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganizationRole(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.CreateOrganizationRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganizationRole is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganizationRole(context.Context, *connect_go.Request[v1beta1.GetOrganizationRoleRequest]) (*connect_go.Response[v1beta1.GetOrganizationRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganizationRole is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateOrganizationRole(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRoleRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateOrganizationRole is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteOrganizationRole(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRoleRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteOrganizationRole is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizations(context.Context, *connect_go.Request[v1beta1.ListOrganizationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizations is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganization(context.Context, *connect_go.Request[v1beta1.CreateOrganizationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganization(context.Context, *connect_go.Request[v1beta1.GetOrganizationRequest]) (*connect_go.Response[v1beta1.GetOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateOrganization(context.Context, *connect_go.Request[v1beta1.UpdateOrganizationRequest]) (*connect_go.Response[v1beta1.UpdateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationProjects(context.Context, *connect_go.Request[v1beta1.ListOrganizationProjectsRequest]) (*connect_go.Response[v1beta1.ListOrganizationProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationProjects is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationAdmins(context.Context, *connect_go.Request[v1beta1.ListOrganizationAdminsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAdminsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationAdmins is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AddOrganizationUsers(context.Context, *connect_go.Request[v1beta1.AddOrganizationUsersRequest]) (*connect_go.Response[v1beta1.AddOrganizationUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AddOrganizationUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) RemoveOrganizationUser(context.Context, *connect_go.Request[v1beta1.RemoveOrganizationUserRequest]) (*connect_go.Response[v1beta1.RemoveOrganizationUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.RemoveOrganizationUser is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganizationKyc(context.Context, *connect_go.Request[v1beta1.GetOrganizationKycRequest]) (*connect_go.Response[v1beta1.GetOrganizationKycResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganizationKyc is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationServiceUsers(context.Context, *connect_go.Request[v1beta1.ListOrganizationServiceUsersRequest]) (*connect_go.Response[v1beta1.ListOrganizationServiceUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationServiceUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationInvitations(context.Context, *connect_go.Request[v1beta1.ListOrganizationInvitationsRequest]) (*connect_go.Response[v1beta1.ListOrganizationInvitationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationInvitations is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.CreateOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.CreateOrganizationInvitationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganizationInvitation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.GetOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.GetOrganizationInvitationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganizationInvitation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AcceptOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.AcceptOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.AcceptOrganizationInvitationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AcceptOrganizationInvitation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteOrganizationInvitation(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationInvitationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationInvitationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteOrganizationInvitation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationDomains(context.Context, *connect_go.Request[v1beta1.ListOrganizationDomainsRequest]) (*connect_go.Response[v1beta1.ListOrganizationDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationDomains is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganizationDomain(context.Context, *connect_go.Request[v1beta1.CreateOrganizationDomainRequest]) (*connect_go.Response[v1beta1.CreateOrganizationDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganizationDomain is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteOrganizationDomain(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationDomainRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteOrganizationDomain is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganizationDomain(context.Context, *connect_go.Request[v1beta1.GetOrganizationDomainRequest]) (*connect_go.Response[v1beta1.GetOrganizationDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganizationDomain is not implemented"))
}

func (UnimplementedFrontierServiceHandler) VerifyOrganizationDomain(context.Context, *connect_go.Request[v1beta1.VerifyOrganizationDomainRequest]) (*connect_go.Response[v1beta1.VerifyOrganizationDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.VerifyOrganizationDomain is not implemented"))
}

func (UnimplementedFrontierServiceHandler) JoinOrganization(context.Context, *connect_go.Request[v1beta1.JoinOrganizationRequest]) (*connect_go.Response[v1beta1.JoinOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.JoinOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) EnableOrganization(context.Context, *connect_go.Request[v1beta1.EnableOrganizationRequest]) (*connect_go.Response[v1beta1.EnableOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.EnableOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DisableOrganization(context.Context, *connect_go.Request[v1beta1.DisableOrganizationRequest]) (*connect_go.Response[v1beta1.DisableOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DisableOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteOrganization(context.Context, *connect_go.Request[v1beta1.DeleteOrganizationRequest]) (*connect_go.Response[v1beta1.DeleteOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteOrganization is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateProject(context.Context, *connect_go.Request[v1beta1.CreateProjectRequest]) (*connect_go.Response[v1beta1.CreateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetProject(context.Context, *connect_go.Request[v1beta1.GetProjectRequest]) (*connect_go.Response[v1beta1.GetProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateProject(context.Context, *connect_go.Request[v1beta1.UpdateProjectRequest]) (*connect_go.Response[v1beta1.UpdateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectAdmins(context.Context, *connect_go.Request[v1beta1.ListProjectAdminsRequest]) (*connect_go.Response[v1beta1.ListProjectAdminsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectAdmins is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectUsers(context.Context, *connect_go.Request[v1beta1.ListProjectUsersRequest]) (*connect_go.Response[v1beta1.ListProjectUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectServiceUsers(context.Context, *connect_go.Request[v1beta1.ListProjectServiceUsersRequest]) (*connect_go.Response[v1beta1.ListProjectServiceUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectServiceUsers is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectGroups(context.Context, *connect_go.Request[v1beta1.ListProjectGroupsRequest]) (*connect_go.Response[v1beta1.ListProjectGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectGroups is not implemented"))
}

func (UnimplementedFrontierServiceHandler) EnableProject(context.Context, *connect_go.Request[v1beta1.EnableProjectRequest]) (*connect_go.Response[v1beta1.EnableProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.EnableProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DisableProject(context.Context, *connect_go.Request[v1beta1.DisableProjectRequest]) (*connect_go.Response[v1beta1.DisableProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DisableProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteProject(context.Context, *connect_go.Request[v1beta1.DeleteProjectRequest]) (*connect_go.Response[v1beta1.DeleteProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreatePolicy(context.Context, *connect_go.Request[v1beta1.CreatePolicyRequest]) (*connect_go.Response[v1beta1.CreatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreatePolicy is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetPolicy(context.Context, *connect_go.Request[v1beta1.GetPolicyRequest]) (*connect_go.Response[v1beta1.GetPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetPolicy is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListPolicies(context.Context, *connect_go.Request[v1beta1.ListPoliciesRequest]) (*connect_go.Response[v1beta1.ListPoliciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListPolicies is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdatePolicy(context.Context, *connect_go.Request[v1beta1.UpdatePolicyRequest]) (*connect_go.Response[v1beta1.UpdatePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdatePolicy is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeletePolicy(context.Context, *connect_go.Request[v1beta1.DeletePolicyRequest]) (*connect_go.Response[v1beta1.DeletePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeletePolicy is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreatePolicyForProject(context.Context, *connect_go.Request[v1beta1.CreatePolicyForProjectRequest]) (*connect_go.Response[v1beta1.CreatePolicyForProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreatePolicyForProject is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateRelation(context.Context, *connect_go.Request[v1beta1.CreateRelationRequest]) (*connect_go.Response[v1beta1.CreateRelationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateRelation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetRelation(context.Context, *connect_go.Request[v1beta1.GetRelationRequest]) (*connect_go.Response[v1beta1.GetRelationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetRelation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteRelation(context.Context, *connect_go.Request[v1beta1.DeleteRelationRequest]) (*connect_go.Response[v1beta1.DeleteRelationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteRelation is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListPermissions(context.Context, *connect_go.Request[v1beta1.ListPermissionsRequest]) (*connect_go.Response[v1beta1.ListPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListPermissions is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetPermission(context.Context, *connect_go.Request[v1beta1.GetPermissionRequest]) (*connect_go.Response[v1beta1.GetPermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetPermission is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListNamespaces is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetNamespace(context.Context, *connect_go.Request[v1beta1.GetNamespaceRequest]) (*connect_go.Response[v1beta1.GetNamespaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetNamespace is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectResources(context.Context, *connect_go.Request[v1beta1.ListProjectResourcesRequest]) (*connect_go.Response[v1beta1.ListProjectResourcesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectResources is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateProjectResource(context.Context, *connect_go.Request[v1beta1.CreateProjectResourceRequest]) (*connect_go.Response[v1beta1.CreateProjectResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateProjectResource is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetProjectResource(context.Context, *connect_go.Request[v1beta1.GetProjectResourceRequest]) (*connect_go.Response[v1beta1.GetProjectResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetProjectResource is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateProjectResource(context.Context, *connect_go.Request[v1beta1.UpdateProjectResourceRequest]) (*connect_go.Response[v1beta1.UpdateProjectResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateProjectResource is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteProjectResource(context.Context, *connect_go.Request[v1beta1.DeleteProjectResourceRequest]) (*connect_go.Response[v1beta1.DeleteProjectResourceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteProjectResource is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CheckResourcePermission(context.Context, *connect_go.Request[v1beta1.CheckResourcePermissionRequest]) (*connect_go.Response[v1beta1.CheckResourcePermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CheckResourcePermission is not implemented"))
}

func (UnimplementedFrontierServiceHandler) BatchCheckPermission(context.Context, *connect_go.Request[v1beta1.BatchCheckPermissionRequest]) (*connect_go.Response[v1beta1.BatchCheckPermissionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.BatchCheckPermission is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetJWKs(context.Context, *connect_go.Request[v1beta1.GetJWKsRequest]) (*connect_go.Response[v1beta1.GetJWKsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetJWKs is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListAuthStrategies(context.Context, *connect_go.Request[v1beta1.ListAuthStrategiesRequest]) (*connect_go.Response[v1beta1.ListAuthStrategiesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListAuthStrategies is not implemented"))
}

func (UnimplementedFrontierServiceHandler) Authenticate(context.Context, *connect_go.Request[v1beta1.AuthenticateRequest]) (*connect_go.Response[v1beta1.AuthenticateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.Authenticate is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AuthCallback(context.Context, *connect_go.Request[v1beta1.AuthCallbackRequest]) (*connect_go.Response[v1beta1.AuthCallbackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AuthCallback is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AuthToken(context.Context, *connect_go.Request[v1beta1.AuthTokenRequest]) (*connect_go.Response[v1beta1.AuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AuthToken is not implemented"))
}

func (UnimplementedFrontierServiceHandler) AuthLogout(context.Context, *connect_go.Request[v1beta1.AuthLogoutRequest]) (*connect_go.Response[v1beta1.AuthLogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.AuthLogout is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListMetaSchemas(context.Context, *connect_go.Request[v1beta1.ListMetaSchemasRequest]) (*connect_go.Response[v1beta1.ListMetaSchemasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListMetaSchemas is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateMetaSchema(context.Context, *connect_go.Request[v1beta1.CreateMetaSchemaRequest]) (*connect_go.Response[v1beta1.CreateMetaSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateMetaSchema is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetMetaSchema(context.Context, *connect_go.Request[v1beta1.GetMetaSchemaRequest]) (*connect_go.Response[v1beta1.GetMetaSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetMetaSchema is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateMetaSchema(context.Context, *connect_go.Request[v1beta1.UpdateMetaSchemaRequest]) (*connect_go.Response[v1beta1.UpdateMetaSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateMetaSchema is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteMetaSchema(context.Context, *connect_go.Request[v1beta1.DeleteMetaSchemaRequest]) (*connect_go.Response[v1beta1.DeleteMetaSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteMetaSchema is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.ListOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.ListOrganizationAuditLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationAuditLogs is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganizationAuditLogs(context.Context, *connect_go.Request[v1beta1.CreateOrganizationAuditLogsRequest]) (*connect_go.Response[v1beta1.CreateOrganizationAuditLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganizationAuditLogs is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetOrganizationAuditLog(context.Context, *connect_go.Request[v1beta1.GetOrganizationAuditLogRequest]) (*connect_go.Response[v1beta1.GetOrganizationAuditLogResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetOrganizationAuditLog is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DescribePreferences(context.Context, *connect_go.Request[v1beta1.DescribePreferencesRequest]) (*connect_go.Response[v1beta1.DescribePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DescribePreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.CreateOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.CreateOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateOrganizationPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListOrganizationPreferences(context.Context, *connect_go.Request[v1beta1.ListOrganizationPreferencesRequest]) (*connect_go.Response[v1beta1.ListOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListOrganizationPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateProjectPreferences(context.Context, *connect_go.Request[v1beta1.CreateProjectPreferencesRequest]) (*connect_go.Response[v1beta1.CreateProjectPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateProjectPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProjectPreferences(context.Context, *connect_go.Request[v1beta1.ListProjectPreferencesRequest]) (*connect_go.Response[v1beta1.ListProjectPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProjectPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateGroupPreferences(context.Context, *connect_go.Request[v1beta1.CreateGroupPreferencesRequest]) (*connect_go.Response[v1beta1.CreateGroupPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateGroupPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListGroupPreferences(context.Context, *connect_go.Request[v1beta1.ListGroupPreferencesRequest]) (*connect_go.Response[v1beta1.ListGroupPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListGroupPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateUserPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateUserPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListUserPreferences(context.Context, *connect_go.Request[v1beta1.ListUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListUserPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListUserPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.CreateCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.CreateCurrentUserPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateCurrentUserPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListCurrentUserPreferences(context.Context, *connect_go.Request[v1beta1.ListCurrentUserPreferencesRequest]) (*connect_go.Response[v1beta1.ListCurrentUserPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListCurrentUserPreferences is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateBillingAccount(context.Context, *connect_go.Request[v1beta1.CreateBillingAccountRequest]) (*connect_go.Response[v1beta1.CreateBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetBillingAccount(context.Context, *connect_go.Request[v1beta1.GetBillingAccountRequest]) (*connect_go.Response[v1beta1.GetBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateBillingAccount(context.Context, *connect_go.Request[v1beta1.UpdateBillingAccountRequest]) (*connect_go.Response[v1beta1.UpdateBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) RegisterBillingAccount(context.Context, *connect_go.Request[v1beta1.RegisterBillingAccountRequest]) (*connect_go.Response[v1beta1.RegisterBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.RegisterBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListBillingAccounts(context.Context, *connect_go.Request[v1beta1.ListBillingAccountsRequest]) (*connect_go.Response[v1beta1.ListBillingAccountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListBillingAccounts is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DeleteBillingAccount(context.Context, *connect_go.Request[v1beta1.DeleteBillingAccountRequest]) (*connect_go.Response[v1beta1.DeleteBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DeleteBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) EnableBillingAccount(context.Context, *connect_go.Request[v1beta1.EnableBillingAccountRequest]) (*connect_go.Response[v1beta1.EnableBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.EnableBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) DisableBillingAccount(context.Context, *connect_go.Request[v1beta1.DisableBillingAccountRequest]) (*connect_go.Response[v1beta1.DisableBillingAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.DisableBillingAccount is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetBillingBalance(context.Context, *connect_go.Request[v1beta1.GetBillingBalanceRequest]) (*connect_go.Response[v1beta1.GetBillingBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetBillingBalance is not implemented"))
}

func (UnimplementedFrontierServiceHandler) HasTrialed(context.Context, *connect_go.Request[v1beta1.HasTrialedRequest]) (*connect_go.Response[v1beta1.HasTrialedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.HasTrialed is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetSubscription(context.Context, *connect_go.Request[v1beta1.GetSubscriptionRequest]) (*connect_go.Response[v1beta1.GetSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetSubscription is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CancelSubscription(context.Context, *connect_go.Request[v1beta1.CancelSubscriptionRequest]) (*connect_go.Response[v1beta1.CancelSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CancelSubscription is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListSubscriptions(context.Context, *connect_go.Request[v1beta1.ListSubscriptionsRequest]) (*connect_go.Response[v1beta1.ListSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListSubscriptions is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ChangeSubscription(context.Context, *connect_go.Request[v1beta1.ChangeSubscriptionRequest]) (*connect_go.Response[v1beta1.ChangeSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ChangeSubscription is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateSubscription(context.Context, *connect_go.Request[v1beta1.UpdateSubscriptionRequest]) (*connect_go.Response[v1beta1.UpdateSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateSubscription is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateProduct(context.Context, *connect_go.Request[v1beta1.CreateProductRequest]) (*connect_go.Response[v1beta1.CreateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateProduct is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetProduct(context.Context, *connect_go.Request[v1beta1.GetProductRequest]) (*connect_go.Response[v1beta1.GetProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetProduct is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListProducts(context.Context, *connect_go.Request[v1beta1.ListProductsRequest]) (*connect_go.Response[v1beta1.ListProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListProducts is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateProduct(context.Context, *connect_go.Request[v1beta1.UpdateProductRequest]) (*connect_go.Response[v1beta1.UpdateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateProduct is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateFeature(context.Context, *connect_go.Request[v1beta1.CreateFeatureRequest]) (*connect_go.Response[v1beta1.CreateFeatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateFeature is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetFeature is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdateFeature(context.Context, *connect_go.Request[v1beta1.UpdateFeatureRequest]) (*connect_go.Response[v1beta1.UpdateFeatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdateFeature is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListFeatures is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreatePlan(context.Context, *connect_go.Request[v1beta1.CreatePlanRequest]) (*connect_go.Response[v1beta1.CreatePlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreatePlan is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListPlans(context.Context, *connect_go.Request[v1beta1.ListPlansRequest]) (*connect_go.Response[v1beta1.ListPlansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListPlans is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetPlan(context.Context, *connect_go.Request[v1beta1.GetPlanRequest]) (*connect_go.Response[v1beta1.GetPlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetPlan is not implemented"))
}

func (UnimplementedFrontierServiceHandler) UpdatePlan(context.Context, *connect_go.Request[v1beta1.UpdatePlanRequest]) (*connect_go.Response[v1beta1.UpdatePlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.UpdatePlan is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateCheckout(context.Context, *connect_go.Request[v1beta1.CreateCheckoutRequest]) (*connect_go.Response[v1beta1.CreateCheckoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateCheckout is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListCheckouts(context.Context, *connect_go.Request[v1beta1.ListCheckoutsRequest]) (*connect_go.Response[v1beta1.ListCheckoutsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListCheckouts is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetCheckout(context.Context, *connect_go.Request[v1beta1.GetCheckoutRequest]) (*connect_go.Response[v1beta1.GetCheckoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetCheckout is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CheckFeatureEntitlement(context.Context, *connect_go.Request[v1beta1.CheckFeatureEntitlementRequest]) (*connect_go.Response[v1beta1.CheckFeatureEntitlementResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CheckFeatureEntitlement is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateBillingUsage(context.Context, *connect_go.Request[v1beta1.CreateBillingUsageRequest]) (*connect_go.Response[v1beta1.CreateBillingUsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateBillingUsage is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListBillingTransactions(context.Context, *connect_go.Request[v1beta1.ListBillingTransactionsRequest]) (*connect_go.Response[v1beta1.ListBillingTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListBillingTransactions is not implemented"))
}

func (UnimplementedFrontierServiceHandler) TotalDebitedTransactions(context.Context, *connect_go.Request[v1beta1.TotalDebitedTransactionsRequest]) (*connect_go.Response[v1beta1.TotalDebitedTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.TotalDebitedTransactions is not implemented"))
}

func (UnimplementedFrontierServiceHandler) ListInvoices(context.Context, *connect_go.Request[v1beta1.ListInvoicesRequest]) (*connect_go.Response[v1beta1.ListInvoicesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.ListInvoices is not implemented"))
}

func (UnimplementedFrontierServiceHandler) GetUpcomingInvoice(context.Context, *connect_go.Request[v1beta1.GetUpcomingInvoiceRequest]) (*connect_go.Response[v1beta1.GetUpcomingInvoiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.GetUpcomingInvoice is not implemented"))
}

func (UnimplementedFrontierServiceHandler) BillingWebhookCallback(context.Context, *connect_go.Request[v1beta1.BillingWebhookCallbackRequest]) (*connect_go.Response[v1beta1.BillingWebhookCallbackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.BillingWebhookCallback is not implemented"))
}

func (UnimplementedFrontierServiceHandler) CreateProspectPublic(context.Context, *connect_go.Request[v1beta1.CreateProspectPublicRequest]) (*connect_go.Response[v1beta1.CreateProspectPublicResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("raystack.frontier.v1beta1.FrontierService.CreateProspectPublic is not implemented"))
}
