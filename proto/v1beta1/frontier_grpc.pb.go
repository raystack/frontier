// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: raystack/frontier/v1beta1/frontier.proto

package frontierv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FrontierService_ListUsers_FullMethodName                      = "/raystack.frontier.v1beta1.FrontierService/ListUsers"
	FrontierService_CreateUser_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/CreateUser"
	FrontierService_GetUser_FullMethodName                        = "/raystack.frontier.v1beta1.FrontierService/GetUser"
	FrontierService_ListUserGroups_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/ListUserGroups"
	FrontierService_ListCurrentUserGroups_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserGroups"
	FrontierService_GetCurrentUser_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/GetCurrentUser"
	FrontierService_UpdateUser_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/UpdateUser"
	FrontierService_UpdateCurrentUser_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/UpdateCurrentUser"
	FrontierService_EnableUser_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/EnableUser"
	FrontierService_DisableUser_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/DisableUser"
	FrontierService_DeleteUser_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/DeleteUser"
	FrontierService_ListOrganizationsByUser_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationsByUser"
	FrontierService_ListOrganizationsByCurrentUser_FullMethodName = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationsByCurrentUser"
	FrontierService_ListProjectsByUser_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/ListProjectsByUser"
	FrontierService_ListProjectsByCurrentUser_FullMethodName      = "/raystack.frontier.v1beta1.FrontierService/ListProjectsByCurrentUser"
	FrontierService_ListUserInvitations_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/ListUserInvitations"
	FrontierService_ListCurrentUserInvitations_FullMethodName     = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserInvitations"
	FrontierService_ListServiceUsers_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/ListServiceUsers"
	FrontierService_CreateServiceUser_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUser"
	FrontierService_GetServiceUser_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/GetServiceUser"
	FrontierService_DeleteServiceUser_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUser"
	FrontierService_CreateServiceUserJWK_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserJWK"
	FrontierService_ListServiceUserJWKs_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserJWKs"
	FrontierService_GetServiceUserJWK_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/GetServiceUserJWK"
	FrontierService_DeleteServiceUserJWK_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserJWK"
	FrontierService_CreateServiceUserCredential_FullMethodName    = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserCredential"
	FrontierService_ListServiceUserCredentials_FullMethodName     = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserCredentials"
	FrontierService_DeleteServiceUserCredential_FullMethodName    = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserCredential"
	FrontierService_CreateServiceUserToken_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/CreateServiceUserToken"
	FrontierService_ListServiceUserTokens_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserTokens"
	FrontierService_DeleteServiceUserToken_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/DeleteServiceUserToken"
	FrontierService_ListServiceUserProjects_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/ListServiceUserProjects"
	FrontierService_ListOrganizationGroups_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationGroups"
	FrontierService_CreateGroup_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/CreateGroup"
	FrontierService_GetGroup_FullMethodName                       = "/raystack.frontier.v1beta1.FrontierService/GetGroup"
	FrontierService_UpdateGroup_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/UpdateGroup"
	FrontierService_ListGroupUsers_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/ListGroupUsers"
	FrontierService_AddGroupUsers_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/AddGroupUsers"
	FrontierService_RemoveGroupUser_FullMethodName                = "/raystack.frontier.v1beta1.FrontierService/RemoveGroupUser"
	FrontierService_EnableGroup_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/EnableGroup"
	FrontierService_DisableGroup_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/DisableGroup"
	FrontierService_DeleteGroup_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/DeleteGroup"
	FrontierService_ListRoles_FullMethodName                      = "/raystack.frontier.v1beta1.FrontierService/ListRoles"
	FrontierService_ListOrganizationRoles_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationRoles"
	FrontierService_CreateOrganizationRole_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationRole"
	FrontierService_GetOrganizationRole_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationRole"
	FrontierService_UpdateOrganizationRole_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/UpdateOrganizationRole"
	FrontierService_DeleteOrganizationRole_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationRole"
	FrontierService_ListOrganizations_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/ListOrganizations"
	FrontierService_CreateOrganization_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/CreateOrganization"
	FrontierService_GetOrganization_FullMethodName                = "/raystack.frontier.v1beta1.FrontierService/GetOrganization"
	FrontierService_UpdateOrganization_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/UpdateOrganization"
	FrontierService_ListOrganizationProjects_FullMethodName       = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationProjects"
	FrontierService_ListOrganizationAdmins_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationAdmins"
	FrontierService_ListOrganizationUsers_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationUsers"
	FrontierService_AddOrganizationUsers_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/AddOrganizationUsers"
	FrontierService_RemoveOrganizationUser_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/RemoveOrganizationUser"
	FrontierService_GetOrganizationKyc_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationKyc"
	FrontierService_ListOrganizationServiceUsers_FullMethodName   = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationServiceUsers"
	FrontierService_ListOrganizationInvitations_FullMethodName    = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationInvitations"
	FrontierService_CreateOrganizationInvitation_FullMethodName   = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationInvitation"
	FrontierService_GetOrganizationInvitation_FullMethodName      = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationInvitation"
	FrontierService_AcceptOrganizationInvitation_FullMethodName   = "/raystack.frontier.v1beta1.FrontierService/AcceptOrganizationInvitation"
	FrontierService_DeleteOrganizationInvitation_FullMethodName   = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationInvitation"
	FrontierService_ListOrganizationDomains_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationDomains"
	FrontierService_CreateOrganizationDomain_FullMethodName       = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationDomain"
	FrontierService_DeleteOrganizationDomain_FullMethodName       = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganizationDomain"
	FrontierService_GetOrganizationDomain_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationDomain"
	FrontierService_VerifyOrganizationDomain_FullMethodName       = "/raystack.frontier.v1beta1.FrontierService/VerifyOrganizationDomain"
	FrontierService_JoinOrganization_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/JoinOrganization"
	FrontierService_EnableOrganization_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/EnableOrganization"
	FrontierService_DisableOrganization_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/DisableOrganization"
	FrontierService_DeleteOrganization_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/DeleteOrganization"
	FrontierService_CreateProject_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/CreateProject"
	FrontierService_GetProject_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/GetProject"
	FrontierService_UpdateProject_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/UpdateProject"
	FrontierService_ListProjectAdmins_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/ListProjectAdmins"
	FrontierService_ListProjectUsers_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/ListProjectUsers"
	FrontierService_ListProjectServiceUsers_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/ListProjectServiceUsers"
	FrontierService_ListProjectGroups_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/ListProjectGroups"
	FrontierService_EnableProject_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/EnableProject"
	FrontierService_DisableProject_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/DisableProject"
	FrontierService_DeleteProject_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/DeleteProject"
	FrontierService_CreatePolicy_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/CreatePolicy"
	FrontierService_GetPolicy_FullMethodName                      = "/raystack.frontier.v1beta1.FrontierService/GetPolicy"
	FrontierService_ListPolicies_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/ListPolicies"
	FrontierService_UpdatePolicy_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/UpdatePolicy"
	FrontierService_DeletePolicy_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/DeletePolicy"
	FrontierService_CreatePolicyForProject_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/CreatePolicyForProject"
	FrontierService_CreateRelation_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/CreateRelation"
	FrontierService_GetRelation_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/GetRelation"
	FrontierService_DeleteRelation_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/DeleteRelation"
	FrontierService_ListPermissions_FullMethodName                = "/raystack.frontier.v1beta1.FrontierService/ListPermissions"
	FrontierService_GetPermission_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/GetPermission"
	FrontierService_ListNamespaces_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/ListNamespaces"
	FrontierService_GetNamespace_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/GetNamespace"
	FrontierService_ListProjectResources_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/ListProjectResources"
	FrontierService_CreateProjectResource_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/CreateProjectResource"
	FrontierService_GetProjectResource_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/GetProjectResource"
	FrontierService_UpdateProjectResource_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/UpdateProjectResource"
	FrontierService_DeleteProjectResource_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/DeleteProjectResource"
	FrontierService_CheckResourcePermission_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/CheckResourcePermission"
	FrontierService_BatchCheckPermission_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/BatchCheckPermission"
	FrontierService_GetJWKs_FullMethodName                        = "/raystack.frontier.v1beta1.FrontierService/GetJWKs"
	FrontierService_ListAuthStrategies_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/ListAuthStrategies"
	FrontierService_Authenticate_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/Authenticate"
	FrontierService_AuthCallback_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/AuthCallback"
	FrontierService_AuthToken_FullMethodName                      = "/raystack.frontier.v1beta1.FrontierService/AuthToken"
	FrontierService_AuthLogout_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/AuthLogout"
	FrontierService_ListMetaSchemas_FullMethodName                = "/raystack.frontier.v1beta1.FrontierService/ListMetaSchemas"
	FrontierService_CreateMetaSchema_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/CreateMetaSchema"
	FrontierService_GetMetaSchema_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/GetMetaSchema"
	FrontierService_UpdateMetaSchema_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/UpdateMetaSchema"
	FrontierService_DeleteMetaSchema_FullMethodName               = "/raystack.frontier.v1beta1.FrontierService/DeleteMetaSchema"
	FrontierService_ListOrganizationAuditLogs_FullMethodName      = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationAuditLogs"
	FrontierService_CreateOrganizationAuditLogs_FullMethodName    = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationAuditLogs"
	FrontierService_GetOrganizationAuditLog_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/GetOrganizationAuditLog"
	FrontierService_DescribePreferences_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/DescribePreferences"
	FrontierService_CreateOrganizationPreferences_FullMethodName  = "/raystack.frontier.v1beta1.FrontierService/CreateOrganizationPreferences"
	FrontierService_ListOrganizationPreferences_FullMethodName    = "/raystack.frontier.v1beta1.FrontierService/ListOrganizationPreferences"
	FrontierService_CreateProjectPreferences_FullMethodName       = "/raystack.frontier.v1beta1.FrontierService/CreateProjectPreferences"
	FrontierService_ListProjectPreferences_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/ListProjectPreferences"
	FrontierService_CreateGroupPreferences_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/CreateGroupPreferences"
	FrontierService_ListGroupPreferences_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/ListGroupPreferences"
	FrontierService_CreateUserPreferences_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/CreateUserPreferences"
	FrontierService_ListUserPreferences_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/ListUserPreferences"
	FrontierService_CreateCurrentUserPreferences_FullMethodName   = "/raystack.frontier.v1beta1.FrontierService/CreateCurrentUserPreferences"
	FrontierService_ListCurrentUserPreferences_FullMethodName     = "/raystack.frontier.v1beta1.FrontierService/ListCurrentUserPreferences"
	FrontierService_CreateBillingAccount_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/CreateBillingAccount"
	FrontierService_GetBillingAccount_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/GetBillingAccount"
	FrontierService_UpdateBillingAccount_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/UpdateBillingAccount"
	FrontierService_RegisterBillingAccount_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/RegisterBillingAccount"
	FrontierService_ListBillingAccounts_FullMethodName            = "/raystack.frontier.v1beta1.FrontierService/ListBillingAccounts"
	FrontierService_DeleteBillingAccount_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/DeleteBillingAccount"
	FrontierService_EnableBillingAccount_FullMethodName           = "/raystack.frontier.v1beta1.FrontierService/EnableBillingAccount"
	FrontierService_DisableBillingAccount_FullMethodName          = "/raystack.frontier.v1beta1.FrontierService/DisableBillingAccount"
	FrontierService_GetBillingBalance_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/GetBillingBalance"
	FrontierService_HasTrialed_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/HasTrialed"
	FrontierService_GetSubscription_FullMethodName                = "/raystack.frontier.v1beta1.FrontierService/GetSubscription"
	FrontierService_CancelSubscription_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/CancelSubscription"
	FrontierService_ListSubscriptions_FullMethodName              = "/raystack.frontier.v1beta1.FrontierService/ListSubscriptions"
	FrontierService_ChangeSubscription_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/ChangeSubscription"
	FrontierService_UpdateSubscription_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/UpdateSubscription"
	FrontierService_CreateProduct_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/CreateProduct"
	FrontierService_GetProduct_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/GetProduct"
	FrontierService_ListProducts_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/ListProducts"
	FrontierService_UpdateProduct_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/UpdateProduct"
	FrontierService_CreateFeature_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/CreateFeature"
	FrontierService_GetFeature_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/GetFeature"
	FrontierService_UpdateFeature_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/UpdateFeature"
	FrontierService_ListFeatures_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/ListFeatures"
	FrontierService_CreatePlan_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/CreatePlan"
	FrontierService_ListPlans_FullMethodName                      = "/raystack.frontier.v1beta1.FrontierService/ListPlans"
	FrontierService_GetPlan_FullMethodName                        = "/raystack.frontier.v1beta1.FrontierService/GetPlan"
	FrontierService_UpdatePlan_FullMethodName                     = "/raystack.frontier.v1beta1.FrontierService/UpdatePlan"
	FrontierService_CreateCheckout_FullMethodName                 = "/raystack.frontier.v1beta1.FrontierService/CreateCheckout"
	FrontierService_ListCheckouts_FullMethodName                  = "/raystack.frontier.v1beta1.FrontierService/ListCheckouts"
	FrontierService_GetCheckout_FullMethodName                    = "/raystack.frontier.v1beta1.FrontierService/GetCheckout"
	FrontierService_CheckFeatureEntitlement_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/CheckFeatureEntitlement"
	FrontierService_CreateBillingUsage_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/CreateBillingUsage"
	FrontierService_ListBillingTransactions_FullMethodName        = "/raystack.frontier.v1beta1.FrontierService/ListBillingTransactions"
	FrontierService_ListInvoices_FullMethodName                   = "/raystack.frontier.v1beta1.FrontierService/ListInvoices"
	FrontierService_GetUpcomingInvoice_FullMethodName             = "/raystack.frontier.v1beta1.FrontierService/GetUpcomingInvoice"
	FrontierService_BillingWebhookCallback_FullMethodName         = "/raystack.frontier.v1beta1.FrontierService/BillingWebhookCallback"
)

// FrontierServiceClient is the client API for FrontierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontierServiceClient interface {
	// Users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	ListCurrentUserGroups(ctx context.Context, in *ListCurrentUserGroupsRequest, opts ...grpc.CallOption) (*ListCurrentUserGroupsResponse, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*UpdateCurrentUserResponse, error)
	EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error)
	DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error)
	ListOrganizationsByCurrentUser(ctx context.Context, in *ListOrganizationsByCurrentUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByCurrentUserResponse, error)
	ListProjectsByUser(ctx context.Context, in *ListProjectsByUserRequest, opts ...grpc.CallOption) (*ListProjectsByUserResponse, error)
	ListProjectsByCurrentUser(ctx context.Context, in *ListProjectsByCurrentUserRequest, opts ...grpc.CallOption) (*ListProjectsByCurrentUserResponse, error)
	ListUserInvitations(ctx context.Context, in *ListUserInvitationsRequest, opts ...grpc.CallOption) (*ListUserInvitationsResponse, error)
	ListCurrentUserInvitations(ctx context.Context, in *ListCurrentUserInvitationsRequest, opts ...grpc.CallOption) (*ListCurrentUserInvitationsResponse, error)
	// ServieUser
	ListServiceUsers(ctx context.Context, in *ListServiceUsersRequest, opts ...grpc.CallOption) (*ListServiceUsersResponse, error)
	CreateServiceUser(ctx context.Context, in *CreateServiceUserRequest, opts ...grpc.CallOption) (*CreateServiceUserResponse, error)
	GetServiceUser(ctx context.Context, in *GetServiceUserRequest, opts ...grpc.CallOption) (*GetServiceUserResponse, error)
	DeleteServiceUser(ctx context.Context, in *DeleteServiceUserRequest, opts ...grpc.CallOption) (*DeleteServiceUserResponse, error)
	CreateServiceUserJWK(ctx context.Context, in *CreateServiceUserJWKRequest, opts ...grpc.CallOption) (*CreateServiceUserJWKResponse, error)
	ListServiceUserJWKs(ctx context.Context, in *ListServiceUserJWKsRequest, opts ...grpc.CallOption) (*ListServiceUserJWKsResponse, error)
	GetServiceUserJWK(ctx context.Context, in *GetServiceUserJWKRequest, opts ...grpc.CallOption) (*GetServiceUserJWKResponse, error)
	DeleteServiceUserJWK(ctx context.Context, in *DeleteServiceUserJWKRequest, opts ...grpc.CallOption) (*DeleteServiceUserJWKResponse, error)
	CreateServiceUserCredential(ctx context.Context, in *CreateServiceUserCredentialRequest, opts ...grpc.CallOption) (*CreateServiceUserCredentialResponse, error)
	ListServiceUserCredentials(ctx context.Context, in *ListServiceUserCredentialsRequest, opts ...grpc.CallOption) (*ListServiceUserCredentialsResponse, error)
	DeleteServiceUserCredential(ctx context.Context, in *DeleteServiceUserCredentialRequest, opts ...grpc.CallOption) (*DeleteServiceUserCredentialResponse, error)
	CreateServiceUserToken(ctx context.Context, in *CreateServiceUserTokenRequest, opts ...grpc.CallOption) (*CreateServiceUserTokenResponse, error)
	ListServiceUserTokens(ctx context.Context, in *ListServiceUserTokensRequest, opts ...grpc.CallOption) (*ListServiceUserTokensResponse, error)
	DeleteServiceUserToken(ctx context.Context, in *DeleteServiceUserTokenRequest, opts ...grpc.CallOption) (*DeleteServiceUserTokenResponse, error)
	ListServiceUserProjects(ctx context.Context, in *ListServiceUserProjectsRequest, opts ...grpc.CallOption) (*ListServiceUserProjectsResponse, error)
	// Group
	ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*ListGroupUsersResponse, error)
	AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error)
	RemoveGroupUser(ctx context.Context, in *RemoveGroupUserRequest, opts ...grpc.CallOption) (*RemoveGroupUserResponse, error)
	EnableGroup(ctx context.Context, in *EnableGroupRequest, opts ...grpc.CallOption) (*EnableGroupResponse, error)
	DisableGroup(ctx context.Context, in *DisableGroupRequest, opts ...grpc.CallOption) (*DisableGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// Roles
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error)
	CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error)
	GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error)
	UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error)
	DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error)
	// Organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	ListOrganizationProjects(ctx context.Context, in *ListOrganizationProjectsRequest, opts ...grpc.CallOption) (*ListOrganizationProjectsResponse, error)
	ListOrganizationAdmins(ctx context.Context, in *ListOrganizationAdminsRequest, opts ...grpc.CallOption) (*ListOrganizationAdminsResponse, error)
	ListOrganizationUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error)
	AddOrganizationUsers(ctx context.Context, in *AddOrganizationUsersRequest, opts ...grpc.CallOption) (*AddOrganizationUsersResponse, error)
	RemoveOrganizationUser(ctx context.Context, in *RemoveOrganizationUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationUserResponse, error)
	GetOrganizationKyc(ctx context.Context, in *GetOrganizationKycRequest, opts ...grpc.CallOption) (*GetOrganizationKycResponse, error)
	// Deprecated: use ListServiceUsers instead
	ListOrganizationServiceUsers(ctx context.Context, in *ListOrganizationServiceUsersRequest, opts ...grpc.CallOption) (*ListOrganizationServiceUsersResponse, error)
	ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*ListOrganizationInvitationsResponse, error)
	CreateOrganizationInvitation(ctx context.Context, in *CreateOrganizationInvitationRequest, opts ...grpc.CallOption) (*CreateOrganizationInvitationResponse, error)
	GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*GetOrganizationInvitationResponse, error)
	AcceptOrganizationInvitation(ctx context.Context, in *AcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*AcceptOrganizationInvitationResponse, error)
	DeleteOrganizationInvitation(ctx context.Context, in *DeleteOrganizationInvitationRequest, opts ...grpc.CallOption) (*DeleteOrganizationInvitationResponse, error)
	ListOrganizationDomains(ctx context.Context, in *ListOrganizationDomainsRequest, opts ...grpc.CallOption) (*ListOrganizationDomainsResponse, error)
	CreateOrganizationDomain(ctx context.Context, in *CreateOrganizationDomainRequest, opts ...grpc.CallOption) (*CreateOrganizationDomainResponse, error)
	DeleteOrganizationDomain(ctx context.Context, in *DeleteOrganizationDomainRequest, opts ...grpc.CallOption) (*DeleteOrganizationDomainResponse, error)
	GetOrganizationDomain(ctx context.Context, in *GetOrganizationDomainRequest, opts ...grpc.CallOption) (*GetOrganizationDomainResponse, error)
	VerifyOrganizationDomain(ctx context.Context, in *VerifyOrganizationDomainRequest, opts ...grpc.CallOption) (*VerifyOrganizationDomainResponse, error)
	JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error)
	EnableOrganization(ctx context.Context, in *EnableOrganizationRequest, opts ...grpc.CallOption) (*EnableOrganizationResponse, error)
	DisableOrganization(ctx context.Context, in *DisableOrganizationRequest, opts ...grpc.CallOption) (*DisableOrganizationResponse, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// Projects
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	ListProjectAdmins(ctx context.Context, in *ListProjectAdminsRequest, opts ...grpc.CallOption) (*ListProjectAdminsResponse, error)
	ListProjectUsers(ctx context.Context, in *ListProjectUsersRequest, opts ...grpc.CallOption) (*ListProjectUsersResponse, error)
	ListProjectServiceUsers(ctx context.Context, in *ListProjectServiceUsersRequest, opts ...grpc.CallOption) (*ListProjectServiceUsersResponse, error)
	ListProjectGroups(ctx context.Context, in *ListProjectGroupsRequest, opts ...grpc.CallOption) (*ListProjectGroupsResponse, error)
	EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error)
	DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Policies
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	CreatePolicyForProject(ctx context.Context, in *CreatePolicyForProjectRequest, opts ...grpc.CallOption) (*CreatePolicyForProjectResponse, error)
	// Relations
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error)
	GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error)
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error)
	// Permissions
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	// Namespaces
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Resources
	ListProjectResources(ctx context.Context, in *ListProjectResourcesRequest, opts ...grpc.CallOption) (*ListProjectResourcesResponse, error)
	CreateProjectResource(ctx context.Context, in *CreateProjectResourceRequest, opts ...grpc.CallOption) (*CreateProjectResourceResponse, error)
	GetProjectResource(ctx context.Context, in *GetProjectResourceRequest, opts ...grpc.CallOption) (*GetProjectResourceResponse, error)
	UpdateProjectResource(ctx context.Context, in *UpdateProjectResourceRequest, opts ...grpc.CallOption) (*UpdateProjectResourceResponse, error)
	DeleteProjectResource(ctx context.Context, in *DeleteProjectResourceRequest, opts ...grpc.CallOption) (*DeleteProjectResourceResponse, error)
	// Authz
	CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckResourcePermissionResponse, error)
	BatchCheckPermission(ctx context.Context, in *BatchCheckPermissionRequest, opts ...grpc.CallOption) (*BatchCheckPermissionResponse, error)
	// Authn
	GetJWKs(ctx context.Context, in *GetJWKsRequest, opts ...grpc.CallOption) (*GetJWKsResponse, error)
	ListAuthStrategies(ctx context.Context, in *ListAuthStrategiesRequest, opts ...grpc.CallOption) (*ListAuthStrategiesResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	AuthCallback(ctx context.Context, in *AuthCallbackRequest, opts ...grpc.CallOption) (*AuthCallbackResponse, error)
	AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error)
	AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error)
	// MetaSchemas
	ListMetaSchemas(ctx context.Context, in *ListMetaSchemasRequest, opts ...grpc.CallOption) (*ListMetaSchemasResponse, error)
	CreateMetaSchema(ctx context.Context, in *CreateMetaSchemaRequest, opts ...grpc.CallOption) (*CreateMetaSchemaResponse, error)
	GetMetaSchema(ctx context.Context, in *GetMetaSchemaRequest, opts ...grpc.CallOption) (*GetMetaSchemaResponse, error)
	UpdateMetaSchema(ctx context.Context, in *UpdateMetaSchemaRequest, opts ...grpc.CallOption) (*UpdateMetaSchemaResponse, error)
	DeleteMetaSchema(ctx context.Context, in *DeleteMetaSchemaRequest, opts ...grpc.CallOption) (*DeleteMetaSchemaResponse, error)
	// Audit logs
	ListOrganizationAuditLogs(ctx context.Context, in *ListOrganizationAuditLogsRequest, opts ...grpc.CallOption) (*ListOrganizationAuditLogsResponse, error)
	CreateOrganizationAuditLogs(ctx context.Context, in *CreateOrganizationAuditLogsRequest, opts ...grpc.CallOption) (*CreateOrganizationAuditLogsResponse, error)
	GetOrganizationAuditLog(ctx context.Context, in *GetOrganizationAuditLogRequest, opts ...grpc.CallOption) (*GetOrganizationAuditLogResponse, error)
	// DescribePreferences list down all the supported preferences of entities
	DescribePreferences(ctx context.Context, in *DescribePreferencesRequest, opts ...grpc.CallOption) (*DescribePreferencesResponse, error)
	CreateOrganizationPreferences(ctx context.Context, in *CreateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*CreateOrganizationPreferencesResponse, error)
	ListOrganizationPreferences(ctx context.Context, in *ListOrganizationPreferencesRequest, opts ...grpc.CallOption) (*ListOrganizationPreferencesResponse, error)
	CreateProjectPreferences(ctx context.Context, in *CreateProjectPreferencesRequest, opts ...grpc.CallOption) (*CreateProjectPreferencesResponse, error)
	ListProjectPreferences(ctx context.Context, in *ListProjectPreferencesRequest, opts ...grpc.CallOption) (*ListProjectPreferencesResponse, error)
	CreateGroupPreferences(ctx context.Context, in *CreateGroupPreferencesRequest, opts ...grpc.CallOption) (*CreateGroupPreferencesResponse, error)
	ListGroupPreferences(ctx context.Context, in *ListGroupPreferencesRequest, opts ...grpc.CallOption) (*ListGroupPreferencesResponse, error)
	CreateUserPreferences(ctx context.Context, in *CreateUserPreferencesRequest, opts ...grpc.CallOption) (*CreateUserPreferencesResponse, error)
	ListUserPreferences(ctx context.Context, in *ListUserPreferencesRequest, opts ...grpc.CallOption) (*ListUserPreferencesResponse, error)
	CreateCurrentUserPreferences(ctx context.Context, in *CreateCurrentUserPreferencesRequest, opts ...grpc.CallOption) (*CreateCurrentUserPreferencesResponse, error)
	ListCurrentUserPreferences(ctx context.Context, in *ListCurrentUserPreferencesRequest, opts ...grpc.CallOption) (*ListCurrentUserPreferencesResponse, error)
	// Billing account
	CreateBillingAccount(ctx context.Context, in *CreateBillingAccountRequest, opts ...grpc.CallOption) (*CreateBillingAccountResponse, error)
	GetBillingAccount(ctx context.Context, in *GetBillingAccountRequest, opts ...grpc.CallOption) (*GetBillingAccountResponse, error)
	UpdateBillingAccount(ctx context.Context, in *UpdateBillingAccountRequest, opts ...grpc.CallOption) (*UpdateBillingAccountResponse, error)
	RegisterBillingAccount(ctx context.Context, in *RegisterBillingAccountRequest, opts ...grpc.CallOption) (*RegisterBillingAccountResponse, error)
	ListBillingAccounts(ctx context.Context, in *ListBillingAccountsRequest, opts ...grpc.CallOption) (*ListBillingAccountsResponse, error)
	DeleteBillingAccount(ctx context.Context, in *DeleteBillingAccountRequest, opts ...grpc.CallOption) (*DeleteBillingAccountResponse, error)
	EnableBillingAccount(ctx context.Context, in *EnableBillingAccountRequest, opts ...grpc.CallOption) (*EnableBillingAccountResponse, error)
	DisableBillingAccount(ctx context.Context, in *DisableBillingAccountRequest, opts ...grpc.CallOption) (*DisableBillingAccountResponse, error)
	GetBillingBalance(ctx context.Context, in *GetBillingBalanceRequest, opts ...grpc.CallOption) (*GetBillingBalanceResponse, error)
	HasTrialed(ctx context.Context, in *HasTrialedRequest, opts ...grpc.CallOption) (*HasTrialedResponse, error)
	// Subscriptions
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	ChangeSubscription(ctx context.Context, in *ChangeSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error)
	// Billing Product
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	CreateFeature(ctx context.Context, in *CreateFeatureRequest, opts ...grpc.CallOption) (*CreateFeatureResponse, error)
	GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
	UpdateFeature(ctx context.Context, in *UpdateFeatureRequest, opts ...grpc.CallOption) (*UpdateFeatureResponse, error)
	ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error)
	// Plans
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error)
	// Checkout
	CreateCheckout(ctx context.Context, in *CreateCheckoutRequest, opts ...grpc.CallOption) (*CreateCheckoutResponse, error)
	ListCheckouts(ctx context.Context, in *ListCheckoutsRequest, opts ...grpc.CallOption) (*ListCheckoutsResponse, error)
	GetCheckout(ctx context.Context, in *GetCheckoutRequest, opts ...grpc.CallOption) (*GetCheckoutResponse, error)
	// Billing Entitlements
	CheckFeatureEntitlement(ctx context.Context, in *CheckFeatureEntitlementRequest, opts ...grpc.CallOption) (*CheckFeatureEntitlementResponse, error)
	// Transactions
	CreateBillingUsage(ctx context.Context, in *CreateBillingUsageRequest, opts ...grpc.CallOption) (*CreateBillingUsageResponse, error)
	ListBillingTransactions(ctx context.Context, in *ListBillingTransactionsRequest, opts ...grpc.CallOption) (*ListBillingTransactionsResponse, error)
	// Invoice
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	GetUpcomingInvoice(ctx context.Context, in *GetUpcomingInvoiceRequest, opts ...grpc.CallOption) (*GetUpcomingInvoiceResponse, error)
	// Incoming Webhooks
	BillingWebhookCallback(ctx context.Context, in *BillingWebhookCallbackRequest, opts ...grpc.CallOption) (*BillingWebhookCallbackResponse, error)
}

type frontierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontierServiceClient(cc grpc.ClientConnInterface) FrontierServiceClient {
	return &frontierServiceClient{cc}
}

func (c *frontierServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListCurrentUserGroups(ctx context.Context, in *ListCurrentUserGroupsRequest, opts ...grpc.CallOption) (*ListCurrentUserGroupsResponse, error) {
	out := new(ListCurrentUserGroupsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListCurrentUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error) {
	out := new(GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*UpdateCurrentUserResponse, error) {
	out := new(UpdateCurrentUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error) {
	out := new(EnableUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_EnableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error) {
	out := new(DisableUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_DisableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationsByUser(ctx context.Context, in *ListOrganizationsByUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByUserResponse, error) {
	out := new(ListOrganizationsByUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationsByCurrentUser(ctx context.Context, in *ListOrganizationsByCurrentUserRequest, opts ...grpc.CallOption) (*ListOrganizationsByCurrentUserResponse, error) {
	out := new(ListOrganizationsByCurrentUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationsByCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectsByUser(ctx context.Context, in *ListProjectsByUserRequest, opts ...grpc.CallOption) (*ListProjectsByUserResponse, error) {
	out := new(ListProjectsByUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectsByCurrentUser(ctx context.Context, in *ListProjectsByCurrentUserRequest, opts ...grpc.CallOption) (*ListProjectsByCurrentUserResponse, error) {
	out := new(ListProjectsByCurrentUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectsByCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListUserInvitations(ctx context.Context, in *ListUserInvitationsRequest, opts ...grpc.CallOption) (*ListUserInvitationsResponse, error) {
	out := new(ListUserInvitationsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListUserInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListCurrentUserInvitations(ctx context.Context, in *ListCurrentUserInvitationsRequest, opts ...grpc.CallOption) (*ListCurrentUserInvitationsResponse, error) {
	out := new(ListCurrentUserInvitationsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListCurrentUserInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListServiceUsers(ctx context.Context, in *ListServiceUsersRequest, opts ...grpc.CallOption) (*ListServiceUsersResponse, error) {
	out := new(ListServiceUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListServiceUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateServiceUser(ctx context.Context, in *CreateServiceUserRequest, opts ...grpc.CallOption) (*CreateServiceUserResponse, error) {
	out := new(CreateServiceUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateServiceUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetServiceUser(ctx context.Context, in *GetServiceUserRequest, opts ...grpc.CallOption) (*GetServiceUserResponse, error) {
	out := new(GetServiceUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetServiceUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteServiceUser(ctx context.Context, in *DeleteServiceUserRequest, opts ...grpc.CallOption) (*DeleteServiceUserResponse, error) {
	out := new(DeleteServiceUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteServiceUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateServiceUserJWK(ctx context.Context, in *CreateServiceUserJWKRequest, opts ...grpc.CallOption) (*CreateServiceUserJWKResponse, error) {
	out := new(CreateServiceUserJWKResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateServiceUserJWK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListServiceUserJWKs(ctx context.Context, in *ListServiceUserJWKsRequest, opts ...grpc.CallOption) (*ListServiceUserJWKsResponse, error) {
	out := new(ListServiceUserJWKsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListServiceUserJWKs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetServiceUserJWK(ctx context.Context, in *GetServiceUserJWKRequest, opts ...grpc.CallOption) (*GetServiceUserJWKResponse, error) {
	out := new(GetServiceUserJWKResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetServiceUserJWK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteServiceUserJWK(ctx context.Context, in *DeleteServiceUserJWKRequest, opts ...grpc.CallOption) (*DeleteServiceUserJWKResponse, error) {
	out := new(DeleteServiceUserJWKResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteServiceUserJWK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateServiceUserCredential(ctx context.Context, in *CreateServiceUserCredentialRequest, opts ...grpc.CallOption) (*CreateServiceUserCredentialResponse, error) {
	out := new(CreateServiceUserCredentialResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateServiceUserCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListServiceUserCredentials(ctx context.Context, in *ListServiceUserCredentialsRequest, opts ...grpc.CallOption) (*ListServiceUserCredentialsResponse, error) {
	out := new(ListServiceUserCredentialsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListServiceUserCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteServiceUserCredential(ctx context.Context, in *DeleteServiceUserCredentialRequest, opts ...grpc.CallOption) (*DeleteServiceUserCredentialResponse, error) {
	out := new(DeleteServiceUserCredentialResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteServiceUserCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateServiceUserToken(ctx context.Context, in *CreateServiceUserTokenRequest, opts ...grpc.CallOption) (*CreateServiceUserTokenResponse, error) {
	out := new(CreateServiceUserTokenResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateServiceUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListServiceUserTokens(ctx context.Context, in *ListServiceUserTokensRequest, opts ...grpc.CallOption) (*ListServiceUserTokensResponse, error) {
	out := new(ListServiceUserTokensResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListServiceUserTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteServiceUserToken(ctx context.Context, in *DeleteServiceUserTokenRequest, opts ...grpc.CallOption) (*DeleteServiceUserTokenResponse, error) {
	out := new(DeleteServiceUserTokenResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteServiceUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListServiceUserProjects(ctx context.Context, in *ListServiceUserProjectsRequest, opts ...grpc.CallOption) (*ListServiceUserProjectsResponse, error) {
	out := new(ListServiceUserProjectsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListServiceUserProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationGroups(ctx context.Context, in *ListOrganizationGroupsRequest, opts ...grpc.CallOption) (*ListOrganizationGroupsResponse, error) {
	out := new(ListOrganizationGroupsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*ListGroupUsersResponse, error) {
	out := new(ListGroupUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListGroupUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*AddGroupUsersResponse, error) {
	out := new(AddGroupUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_AddGroupUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) RemoveGroupUser(ctx context.Context, in *RemoveGroupUserRequest, opts ...grpc.CallOption) (*RemoveGroupUserResponse, error) {
	out := new(RemoveGroupUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_RemoveGroupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) EnableGroup(ctx context.Context, in *EnableGroupRequest, opts ...grpc.CallOption) (*EnableGroupResponse, error) {
	out := new(EnableGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_EnableGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DisableGroup(ctx context.Context, in *DisableGroupRequest, opts ...grpc.CallOption) (*DisableGroupResponse, error) {
	out := new(DisableGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_DisableGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error) {
	out := new(ListOrganizationRolesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error) {
	out := new(CreateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error) {
	out := new(GetOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error) {
	out := new(UpdateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error) {
	out := new(DeleteOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteOrganizationRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationProjects(ctx context.Context, in *ListOrganizationProjectsRequest, opts ...grpc.CallOption) (*ListOrganizationProjectsResponse, error) {
	out := new(ListOrganizationProjectsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationAdmins(ctx context.Context, in *ListOrganizationAdminsRequest, opts ...grpc.CallOption) (*ListOrganizationAdminsResponse, error) {
	out := new(ListOrganizationAdminsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error) {
	out := new(ListOrganizationUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AddOrganizationUsers(ctx context.Context, in *AddOrganizationUsersRequest, opts ...grpc.CallOption) (*AddOrganizationUsersResponse, error) {
	out := new(AddOrganizationUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_AddOrganizationUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) RemoveOrganizationUser(ctx context.Context, in *RemoveOrganizationUserRequest, opts ...grpc.CallOption) (*RemoveOrganizationUserResponse, error) {
	out := new(RemoveOrganizationUserResponse)
	err := c.cc.Invoke(ctx, FrontierService_RemoveOrganizationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganizationKyc(ctx context.Context, in *GetOrganizationKycRequest, opts ...grpc.CallOption) (*GetOrganizationKycResponse, error) {
	out := new(GetOrganizationKycResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganizationKyc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationServiceUsers(ctx context.Context, in *ListOrganizationServiceUsersRequest, opts ...grpc.CallOption) (*ListOrganizationServiceUsersResponse, error) {
	out := new(ListOrganizationServiceUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationServiceUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationInvitations(ctx context.Context, in *ListOrganizationInvitationsRequest, opts ...grpc.CallOption) (*ListOrganizationInvitationsResponse, error) {
	out := new(ListOrganizationInvitationsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganizationInvitation(ctx context.Context, in *CreateOrganizationInvitationRequest, opts ...grpc.CallOption) (*CreateOrganizationInvitationResponse, error) {
	out := new(CreateOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganizationInvitation(ctx context.Context, in *GetOrganizationInvitationRequest, opts ...grpc.CallOption) (*GetOrganizationInvitationResponse, error) {
	out := new(GetOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AcceptOrganizationInvitation(ctx context.Context, in *AcceptOrganizationInvitationRequest, opts ...grpc.CallOption) (*AcceptOrganizationInvitationResponse, error) {
	out := new(AcceptOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, FrontierService_AcceptOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteOrganizationInvitation(ctx context.Context, in *DeleteOrganizationInvitationRequest, opts ...grpc.CallOption) (*DeleteOrganizationInvitationResponse, error) {
	out := new(DeleteOrganizationInvitationResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteOrganizationInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationDomains(ctx context.Context, in *ListOrganizationDomainsRequest, opts ...grpc.CallOption) (*ListOrganizationDomainsResponse, error) {
	out := new(ListOrganizationDomainsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganizationDomain(ctx context.Context, in *CreateOrganizationDomainRequest, opts ...grpc.CallOption) (*CreateOrganizationDomainResponse, error) {
	out := new(CreateOrganizationDomainResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganizationDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteOrganizationDomain(ctx context.Context, in *DeleteOrganizationDomainRequest, opts ...grpc.CallOption) (*DeleteOrganizationDomainResponse, error) {
	out := new(DeleteOrganizationDomainResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteOrganizationDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganizationDomain(ctx context.Context, in *GetOrganizationDomainRequest, opts ...grpc.CallOption) (*GetOrganizationDomainResponse, error) {
	out := new(GetOrganizationDomainResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganizationDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) VerifyOrganizationDomain(ctx context.Context, in *VerifyOrganizationDomainRequest, opts ...grpc.CallOption) (*VerifyOrganizationDomainResponse, error) {
	out := new(VerifyOrganizationDomainResponse)
	err := c.cc.Invoke(ctx, FrontierService_VerifyOrganizationDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error) {
	out := new(JoinOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_JoinOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) EnableOrganization(ctx context.Context, in *EnableOrganizationRequest, opts ...grpc.CallOption) (*EnableOrganizationResponse, error) {
	out := new(EnableOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_EnableOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DisableOrganization(ctx context.Context, in *DisableOrganizationRequest, opts ...grpc.CallOption) (*DisableOrganizationResponse, error) {
	out := new(DisableOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_DisableOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectAdmins(ctx context.Context, in *ListProjectAdminsRequest, opts ...grpc.CallOption) (*ListProjectAdminsResponse, error) {
	out := new(ListProjectAdminsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectUsers(ctx context.Context, in *ListProjectUsersRequest, opts ...grpc.CallOption) (*ListProjectUsersResponse, error) {
	out := new(ListProjectUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectServiceUsers(ctx context.Context, in *ListProjectServiceUsersRequest, opts ...grpc.CallOption) (*ListProjectServiceUsersResponse, error) {
	out := new(ListProjectServiceUsersResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectServiceUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectGroups(ctx context.Context, in *ListProjectGroupsRequest, opts ...grpc.CallOption) (*ListProjectGroupsResponse, error) {
	out := new(ListProjectGroupsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) EnableProject(ctx context.Context, in *EnableProjectRequest, opts ...grpc.CallOption) (*EnableProjectResponse, error) {
	out := new(EnableProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_EnableProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DisableProject(ctx context.Context, in *DisableProjectRequest, opts ...grpc.CallOption) (*DisableProjectResponse, error) {
	out := new(DisableProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_DisableProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreatePolicyForProject(ctx context.Context, in *CreatePolicyForProjectRequest, opts ...grpc.CallOption) (*CreatePolicyForProjectResponse, error) {
	out := new(CreatePolicyForProjectResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreatePolicyForProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error) {
	out := new(CreateRelationResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error) {
	out := new(GetRelationResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error) {
	out := new(DeleteRelationResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectResources(ctx context.Context, in *ListProjectResourcesRequest, opts ...grpc.CallOption) (*ListProjectResourcesResponse, error) {
	out := new(ListProjectResourcesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateProjectResource(ctx context.Context, in *CreateProjectResourceRequest, opts ...grpc.CallOption) (*CreateProjectResourceResponse, error) {
	out := new(CreateProjectResourceResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetProjectResource(ctx context.Context, in *GetProjectResourceRequest, opts ...grpc.CallOption) (*GetProjectResourceResponse, error) {
	out := new(GetProjectResourceResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateProjectResource(ctx context.Context, in *UpdateProjectResourceRequest, opts ...grpc.CallOption) (*UpdateProjectResourceResponse, error) {
	out := new(UpdateProjectResourceResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteProjectResource(ctx context.Context, in *DeleteProjectResourceRequest, opts ...grpc.CallOption) (*DeleteProjectResourceResponse, error) {
	out := new(DeleteProjectResourceResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteProjectResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CheckResourcePermission(ctx context.Context, in *CheckResourcePermissionRequest, opts ...grpc.CallOption) (*CheckResourcePermissionResponse, error) {
	out := new(CheckResourcePermissionResponse)
	err := c.cc.Invoke(ctx, FrontierService_CheckResourcePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) BatchCheckPermission(ctx context.Context, in *BatchCheckPermissionRequest, opts ...grpc.CallOption) (*BatchCheckPermissionResponse, error) {
	out := new(BatchCheckPermissionResponse)
	err := c.cc.Invoke(ctx, FrontierService_BatchCheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetJWKs(ctx context.Context, in *GetJWKsRequest, opts ...grpc.CallOption) (*GetJWKsResponse, error) {
	out := new(GetJWKsResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetJWKs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListAuthStrategies(ctx context.Context, in *ListAuthStrategiesRequest, opts ...grpc.CallOption) (*ListAuthStrategiesResponse, error) {
	out := new(ListAuthStrategiesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListAuthStrategies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, FrontierService_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AuthCallback(ctx context.Context, in *AuthCallbackRequest, opts ...grpc.CallOption) (*AuthCallbackResponse, error) {
	out := new(AuthCallbackResponse)
	err := c.cc.Invoke(ctx, FrontierService_AuthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error) {
	out := new(AuthTokenResponse)
	err := c.cc.Invoke(ctx, FrontierService_AuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error) {
	out := new(AuthLogoutResponse)
	err := c.cc.Invoke(ctx, FrontierService_AuthLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListMetaSchemas(ctx context.Context, in *ListMetaSchemasRequest, opts ...grpc.CallOption) (*ListMetaSchemasResponse, error) {
	out := new(ListMetaSchemasResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListMetaSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateMetaSchema(ctx context.Context, in *CreateMetaSchemaRequest, opts ...grpc.CallOption) (*CreateMetaSchemaResponse, error) {
	out := new(CreateMetaSchemaResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetMetaSchema(ctx context.Context, in *GetMetaSchemaRequest, opts ...grpc.CallOption) (*GetMetaSchemaResponse, error) {
	out := new(GetMetaSchemaResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateMetaSchema(ctx context.Context, in *UpdateMetaSchemaRequest, opts ...grpc.CallOption) (*UpdateMetaSchemaResponse, error) {
	out := new(UpdateMetaSchemaResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteMetaSchema(ctx context.Context, in *DeleteMetaSchemaRequest, opts ...grpc.CallOption) (*DeleteMetaSchemaResponse, error) {
	out := new(DeleteMetaSchemaResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteMetaSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationAuditLogs(ctx context.Context, in *ListOrganizationAuditLogsRequest, opts ...grpc.CallOption) (*ListOrganizationAuditLogsResponse, error) {
	out := new(ListOrganizationAuditLogsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganizationAuditLogs(ctx context.Context, in *CreateOrganizationAuditLogsRequest, opts ...grpc.CallOption) (*CreateOrganizationAuditLogsResponse, error) {
	out := new(CreateOrganizationAuditLogsResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganizationAuditLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetOrganizationAuditLog(ctx context.Context, in *GetOrganizationAuditLogRequest, opts ...grpc.CallOption) (*GetOrganizationAuditLogResponse, error) {
	out := new(GetOrganizationAuditLogResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetOrganizationAuditLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DescribePreferences(ctx context.Context, in *DescribePreferencesRequest, opts ...grpc.CallOption) (*DescribePreferencesResponse, error) {
	out := new(DescribePreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_DescribePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateOrganizationPreferences(ctx context.Context, in *CreateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*CreateOrganizationPreferencesResponse, error) {
	out := new(CreateOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateOrganizationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListOrganizationPreferences(ctx context.Context, in *ListOrganizationPreferencesRequest, opts ...grpc.CallOption) (*ListOrganizationPreferencesResponse, error) {
	out := new(ListOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListOrganizationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateProjectPreferences(ctx context.Context, in *CreateProjectPreferencesRequest, opts ...grpc.CallOption) (*CreateProjectPreferencesResponse, error) {
	out := new(CreateProjectPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateProjectPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProjectPreferences(ctx context.Context, in *ListProjectPreferencesRequest, opts ...grpc.CallOption) (*ListProjectPreferencesResponse, error) {
	out := new(ListProjectPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProjectPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateGroupPreferences(ctx context.Context, in *CreateGroupPreferencesRequest, opts ...grpc.CallOption) (*CreateGroupPreferencesResponse, error) {
	out := new(CreateGroupPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateGroupPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListGroupPreferences(ctx context.Context, in *ListGroupPreferencesRequest, opts ...grpc.CallOption) (*ListGroupPreferencesResponse, error) {
	out := new(ListGroupPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListGroupPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateUserPreferences(ctx context.Context, in *CreateUserPreferencesRequest, opts ...grpc.CallOption) (*CreateUserPreferencesResponse, error) {
	out := new(CreateUserPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateUserPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListUserPreferences(ctx context.Context, in *ListUserPreferencesRequest, opts ...grpc.CallOption) (*ListUserPreferencesResponse, error) {
	out := new(ListUserPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListUserPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateCurrentUserPreferences(ctx context.Context, in *CreateCurrentUserPreferencesRequest, opts ...grpc.CallOption) (*CreateCurrentUserPreferencesResponse, error) {
	out := new(CreateCurrentUserPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateCurrentUserPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListCurrentUserPreferences(ctx context.Context, in *ListCurrentUserPreferencesRequest, opts ...grpc.CallOption) (*ListCurrentUserPreferencesResponse, error) {
	out := new(ListCurrentUserPreferencesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListCurrentUserPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateBillingAccount(ctx context.Context, in *CreateBillingAccountRequest, opts ...grpc.CallOption) (*CreateBillingAccountResponse, error) {
	out := new(CreateBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetBillingAccount(ctx context.Context, in *GetBillingAccountRequest, opts ...grpc.CallOption) (*GetBillingAccountResponse, error) {
	out := new(GetBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateBillingAccount(ctx context.Context, in *UpdateBillingAccountRequest, opts ...grpc.CallOption) (*UpdateBillingAccountResponse, error) {
	out := new(UpdateBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) RegisterBillingAccount(ctx context.Context, in *RegisterBillingAccountRequest, opts ...grpc.CallOption) (*RegisterBillingAccountResponse, error) {
	out := new(RegisterBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_RegisterBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListBillingAccounts(ctx context.Context, in *ListBillingAccountsRequest, opts ...grpc.CallOption) (*ListBillingAccountsResponse, error) {
	out := new(ListBillingAccountsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListBillingAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DeleteBillingAccount(ctx context.Context, in *DeleteBillingAccountRequest, opts ...grpc.CallOption) (*DeleteBillingAccountResponse, error) {
	out := new(DeleteBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_DeleteBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) EnableBillingAccount(ctx context.Context, in *EnableBillingAccountRequest, opts ...grpc.CallOption) (*EnableBillingAccountResponse, error) {
	out := new(EnableBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_EnableBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) DisableBillingAccount(ctx context.Context, in *DisableBillingAccountRequest, opts ...grpc.CallOption) (*DisableBillingAccountResponse, error) {
	out := new(DisableBillingAccountResponse)
	err := c.cc.Invoke(ctx, FrontierService_DisableBillingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetBillingBalance(ctx context.Context, in *GetBillingBalanceRequest, opts ...grpc.CallOption) (*GetBillingBalanceResponse, error) {
	out := new(GetBillingBalanceResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetBillingBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) HasTrialed(ctx context.Context, in *HasTrialedRequest, opts ...grpc.CallOption) (*HasTrialedResponse, error) {
	out := new(HasTrialedResponse)
	err := c.cc.Invoke(ctx, FrontierService_HasTrialed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, FrontierService_CancelSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ChangeSubscription(ctx context.Context, in *ChangeSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriptionResponse, error) {
	out := new(ChangeSubscriptionResponse)
	err := c.cc.Invoke(ctx, FrontierService_ChangeSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*UpdateSubscriptionResponse, error) {
	out := new(UpdateSubscriptionResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateFeature(ctx context.Context, in *CreateFeatureRequest, opts ...grpc.CallOption) (*CreateFeatureResponse, error) {
	out := new(CreateFeatureResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdateFeature(ctx context.Context, in *UpdateFeatureRequest, opts ...grpc.CallOption) (*UpdateFeatureResponse, error) {
	out := new(UpdateFeatureResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdateFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error) {
	out := new(ListFeaturesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error) {
	out := new(CreatePlanResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreatePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error) {
	out := new(ListPlansResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error) {
	out := new(GetPlanResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error) {
	out := new(UpdatePlanResponse)
	err := c.cc.Invoke(ctx, FrontierService_UpdatePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateCheckout(ctx context.Context, in *CreateCheckoutRequest, opts ...grpc.CallOption) (*CreateCheckoutResponse, error) {
	out := new(CreateCheckoutResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateCheckout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListCheckouts(ctx context.Context, in *ListCheckoutsRequest, opts ...grpc.CallOption) (*ListCheckoutsResponse, error) {
	out := new(ListCheckoutsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListCheckouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetCheckout(ctx context.Context, in *GetCheckoutRequest, opts ...grpc.CallOption) (*GetCheckoutResponse, error) {
	out := new(GetCheckoutResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetCheckout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CheckFeatureEntitlement(ctx context.Context, in *CheckFeatureEntitlementRequest, opts ...grpc.CallOption) (*CheckFeatureEntitlementResponse, error) {
	out := new(CheckFeatureEntitlementResponse)
	err := c.cc.Invoke(ctx, FrontierService_CheckFeatureEntitlement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) CreateBillingUsage(ctx context.Context, in *CreateBillingUsageRequest, opts ...grpc.CallOption) (*CreateBillingUsageResponse, error) {
	out := new(CreateBillingUsageResponse)
	err := c.cc.Invoke(ctx, FrontierService_CreateBillingUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListBillingTransactions(ctx context.Context, in *ListBillingTransactionsRequest, opts ...grpc.CallOption) (*ListBillingTransactionsResponse, error) {
	out := new(ListBillingTransactionsResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListBillingTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, FrontierService_ListInvoices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) GetUpcomingInvoice(ctx context.Context, in *GetUpcomingInvoiceRequest, opts ...grpc.CallOption) (*GetUpcomingInvoiceResponse, error) {
	out := new(GetUpcomingInvoiceResponse)
	err := c.cc.Invoke(ctx, FrontierService_GetUpcomingInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontierServiceClient) BillingWebhookCallback(ctx context.Context, in *BillingWebhookCallbackRequest, opts ...grpc.CallOption) (*BillingWebhookCallbackResponse, error) {
	out := new(BillingWebhookCallbackResponse)
	err := c.cc.Invoke(ctx, FrontierService_BillingWebhookCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontierServiceServer is the server API for FrontierService service.
// All implementations must embed UnimplementedFrontierServiceServer
// for forward compatibility
type FrontierServiceServer interface {
	// Users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	ListCurrentUserGroups(context.Context, *ListCurrentUserGroupsRequest) (*ListCurrentUserGroupsResponse, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserResponse, error)
	EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error)
	DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error)
	ListOrganizationsByCurrentUser(context.Context, *ListOrganizationsByCurrentUserRequest) (*ListOrganizationsByCurrentUserResponse, error)
	ListProjectsByUser(context.Context, *ListProjectsByUserRequest) (*ListProjectsByUserResponse, error)
	ListProjectsByCurrentUser(context.Context, *ListProjectsByCurrentUserRequest) (*ListProjectsByCurrentUserResponse, error)
	ListUserInvitations(context.Context, *ListUserInvitationsRequest) (*ListUserInvitationsResponse, error)
	ListCurrentUserInvitations(context.Context, *ListCurrentUserInvitationsRequest) (*ListCurrentUserInvitationsResponse, error)
	// ServieUser
	ListServiceUsers(context.Context, *ListServiceUsersRequest) (*ListServiceUsersResponse, error)
	CreateServiceUser(context.Context, *CreateServiceUserRequest) (*CreateServiceUserResponse, error)
	GetServiceUser(context.Context, *GetServiceUserRequest) (*GetServiceUserResponse, error)
	DeleteServiceUser(context.Context, *DeleteServiceUserRequest) (*DeleteServiceUserResponse, error)
	CreateServiceUserJWK(context.Context, *CreateServiceUserJWKRequest) (*CreateServiceUserJWKResponse, error)
	ListServiceUserJWKs(context.Context, *ListServiceUserJWKsRequest) (*ListServiceUserJWKsResponse, error)
	GetServiceUserJWK(context.Context, *GetServiceUserJWKRequest) (*GetServiceUserJWKResponse, error)
	DeleteServiceUserJWK(context.Context, *DeleteServiceUserJWKRequest) (*DeleteServiceUserJWKResponse, error)
	CreateServiceUserCredential(context.Context, *CreateServiceUserCredentialRequest) (*CreateServiceUserCredentialResponse, error)
	ListServiceUserCredentials(context.Context, *ListServiceUserCredentialsRequest) (*ListServiceUserCredentialsResponse, error)
	DeleteServiceUserCredential(context.Context, *DeleteServiceUserCredentialRequest) (*DeleteServiceUserCredentialResponse, error)
	CreateServiceUserToken(context.Context, *CreateServiceUserTokenRequest) (*CreateServiceUserTokenResponse, error)
	ListServiceUserTokens(context.Context, *ListServiceUserTokensRequest) (*ListServiceUserTokensResponse, error)
	DeleteServiceUserToken(context.Context, *DeleteServiceUserTokenRequest) (*DeleteServiceUserTokenResponse, error)
	ListServiceUserProjects(context.Context, *ListServiceUserProjectsRequest) (*ListServiceUserProjectsResponse, error)
	// Group
	ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	ListGroupUsers(context.Context, *ListGroupUsersRequest) (*ListGroupUsersResponse, error)
	AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error)
	RemoveGroupUser(context.Context, *RemoveGroupUserRequest) (*RemoveGroupUserResponse, error)
	EnableGroup(context.Context, *EnableGroupRequest) (*EnableGroupResponse, error)
	DisableGroup(context.Context, *DisableGroupRequest) (*DisableGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// Roles
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error)
	CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error)
	GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error)
	UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error)
	DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error)
	// Organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	ListOrganizationProjects(context.Context, *ListOrganizationProjectsRequest) (*ListOrganizationProjectsResponse, error)
	ListOrganizationAdmins(context.Context, *ListOrganizationAdminsRequest) (*ListOrganizationAdminsResponse, error)
	ListOrganizationUsers(context.Context, *ListOrganizationUsersRequest) (*ListOrganizationUsersResponse, error)
	AddOrganizationUsers(context.Context, *AddOrganizationUsersRequest) (*AddOrganizationUsersResponse, error)
	RemoveOrganizationUser(context.Context, *RemoveOrganizationUserRequest) (*RemoveOrganizationUserResponse, error)
	GetOrganizationKyc(context.Context, *GetOrganizationKycRequest) (*GetOrganizationKycResponse, error)
	// Deprecated: use ListServiceUsers instead
	ListOrganizationServiceUsers(context.Context, *ListOrganizationServiceUsersRequest) (*ListOrganizationServiceUsersResponse, error)
	ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*ListOrganizationInvitationsResponse, error)
	CreateOrganizationInvitation(context.Context, *CreateOrganizationInvitationRequest) (*CreateOrganizationInvitationResponse, error)
	GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*GetOrganizationInvitationResponse, error)
	AcceptOrganizationInvitation(context.Context, *AcceptOrganizationInvitationRequest) (*AcceptOrganizationInvitationResponse, error)
	DeleteOrganizationInvitation(context.Context, *DeleteOrganizationInvitationRequest) (*DeleteOrganizationInvitationResponse, error)
	ListOrganizationDomains(context.Context, *ListOrganizationDomainsRequest) (*ListOrganizationDomainsResponse, error)
	CreateOrganizationDomain(context.Context, *CreateOrganizationDomainRequest) (*CreateOrganizationDomainResponse, error)
	DeleteOrganizationDomain(context.Context, *DeleteOrganizationDomainRequest) (*DeleteOrganizationDomainResponse, error)
	GetOrganizationDomain(context.Context, *GetOrganizationDomainRequest) (*GetOrganizationDomainResponse, error)
	VerifyOrganizationDomain(context.Context, *VerifyOrganizationDomainRequest) (*VerifyOrganizationDomainResponse, error)
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error)
	EnableOrganization(context.Context, *EnableOrganizationRequest) (*EnableOrganizationResponse, error)
	DisableOrganization(context.Context, *DisableOrganizationRequest) (*DisableOrganizationResponse, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// Projects
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	ListProjectAdmins(context.Context, *ListProjectAdminsRequest) (*ListProjectAdminsResponse, error)
	ListProjectUsers(context.Context, *ListProjectUsersRequest) (*ListProjectUsersResponse, error)
	ListProjectServiceUsers(context.Context, *ListProjectServiceUsersRequest) (*ListProjectServiceUsersResponse, error)
	ListProjectGroups(context.Context, *ListProjectGroupsRequest) (*ListProjectGroupsResponse, error)
	EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error)
	DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Policies
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	CreatePolicyForProject(context.Context, *CreatePolicyForProjectRequest) (*CreatePolicyForProjectResponse, error)
	// Relations
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error)
	GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error)
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error)
	// Permissions
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	// Namespaces
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Resources
	ListProjectResources(context.Context, *ListProjectResourcesRequest) (*ListProjectResourcesResponse, error)
	CreateProjectResource(context.Context, *CreateProjectResourceRequest) (*CreateProjectResourceResponse, error)
	GetProjectResource(context.Context, *GetProjectResourceRequest) (*GetProjectResourceResponse, error)
	UpdateProjectResource(context.Context, *UpdateProjectResourceRequest) (*UpdateProjectResourceResponse, error)
	DeleteProjectResource(context.Context, *DeleteProjectResourceRequest) (*DeleteProjectResourceResponse, error)
	// Authz
	CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckResourcePermissionResponse, error)
	BatchCheckPermission(context.Context, *BatchCheckPermissionRequest) (*BatchCheckPermissionResponse, error)
	// Authn
	GetJWKs(context.Context, *GetJWKsRequest) (*GetJWKsResponse, error)
	ListAuthStrategies(context.Context, *ListAuthStrategiesRequest) (*ListAuthStrategiesResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	AuthCallback(context.Context, *AuthCallbackRequest) (*AuthCallbackResponse, error)
	AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenResponse, error)
	AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error)
	// MetaSchemas
	ListMetaSchemas(context.Context, *ListMetaSchemasRequest) (*ListMetaSchemasResponse, error)
	CreateMetaSchema(context.Context, *CreateMetaSchemaRequest) (*CreateMetaSchemaResponse, error)
	GetMetaSchema(context.Context, *GetMetaSchemaRequest) (*GetMetaSchemaResponse, error)
	UpdateMetaSchema(context.Context, *UpdateMetaSchemaRequest) (*UpdateMetaSchemaResponse, error)
	DeleteMetaSchema(context.Context, *DeleteMetaSchemaRequest) (*DeleteMetaSchemaResponse, error)
	// Audit logs
	ListOrganizationAuditLogs(context.Context, *ListOrganizationAuditLogsRequest) (*ListOrganizationAuditLogsResponse, error)
	CreateOrganizationAuditLogs(context.Context, *CreateOrganizationAuditLogsRequest) (*CreateOrganizationAuditLogsResponse, error)
	GetOrganizationAuditLog(context.Context, *GetOrganizationAuditLogRequest) (*GetOrganizationAuditLogResponse, error)
	// DescribePreferences list down all the supported preferences of entities
	DescribePreferences(context.Context, *DescribePreferencesRequest) (*DescribePreferencesResponse, error)
	CreateOrganizationPreferences(context.Context, *CreateOrganizationPreferencesRequest) (*CreateOrganizationPreferencesResponse, error)
	ListOrganizationPreferences(context.Context, *ListOrganizationPreferencesRequest) (*ListOrganizationPreferencesResponse, error)
	CreateProjectPreferences(context.Context, *CreateProjectPreferencesRequest) (*CreateProjectPreferencesResponse, error)
	ListProjectPreferences(context.Context, *ListProjectPreferencesRequest) (*ListProjectPreferencesResponse, error)
	CreateGroupPreferences(context.Context, *CreateGroupPreferencesRequest) (*CreateGroupPreferencesResponse, error)
	ListGroupPreferences(context.Context, *ListGroupPreferencesRequest) (*ListGroupPreferencesResponse, error)
	CreateUserPreferences(context.Context, *CreateUserPreferencesRequest) (*CreateUserPreferencesResponse, error)
	ListUserPreferences(context.Context, *ListUserPreferencesRequest) (*ListUserPreferencesResponse, error)
	CreateCurrentUserPreferences(context.Context, *CreateCurrentUserPreferencesRequest) (*CreateCurrentUserPreferencesResponse, error)
	ListCurrentUserPreferences(context.Context, *ListCurrentUserPreferencesRequest) (*ListCurrentUserPreferencesResponse, error)
	// Billing account
	CreateBillingAccount(context.Context, *CreateBillingAccountRequest) (*CreateBillingAccountResponse, error)
	GetBillingAccount(context.Context, *GetBillingAccountRequest) (*GetBillingAccountResponse, error)
	UpdateBillingAccount(context.Context, *UpdateBillingAccountRequest) (*UpdateBillingAccountResponse, error)
	RegisterBillingAccount(context.Context, *RegisterBillingAccountRequest) (*RegisterBillingAccountResponse, error)
	ListBillingAccounts(context.Context, *ListBillingAccountsRequest) (*ListBillingAccountsResponse, error)
	DeleteBillingAccount(context.Context, *DeleteBillingAccountRequest) (*DeleteBillingAccountResponse, error)
	EnableBillingAccount(context.Context, *EnableBillingAccountRequest) (*EnableBillingAccountResponse, error)
	DisableBillingAccount(context.Context, *DisableBillingAccountRequest) (*DisableBillingAccountResponse, error)
	GetBillingBalance(context.Context, *GetBillingBalanceRequest) (*GetBillingBalanceResponse, error)
	HasTrialed(context.Context, *HasTrialedRequest) (*HasTrialedResponse, error)
	// Subscriptions
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	ChangeSubscription(context.Context, *ChangeSubscriptionRequest) (*ChangeSubscriptionResponse, error)
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error)
	// Billing Product
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	CreateFeature(context.Context, *CreateFeatureRequest) (*CreateFeatureResponse, error)
	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	UpdateFeature(context.Context, *UpdateFeatureRequest) (*UpdateFeatureResponse, error)
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error)
	// Plans
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error)
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	// Checkout
	CreateCheckout(context.Context, *CreateCheckoutRequest) (*CreateCheckoutResponse, error)
	ListCheckouts(context.Context, *ListCheckoutsRequest) (*ListCheckoutsResponse, error)
	GetCheckout(context.Context, *GetCheckoutRequest) (*GetCheckoutResponse, error)
	// Billing Entitlements
	CheckFeatureEntitlement(context.Context, *CheckFeatureEntitlementRequest) (*CheckFeatureEntitlementResponse, error)
	// Transactions
	CreateBillingUsage(context.Context, *CreateBillingUsageRequest) (*CreateBillingUsageResponse, error)
	ListBillingTransactions(context.Context, *ListBillingTransactionsRequest) (*ListBillingTransactionsResponse, error)
	// Invoice
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	GetUpcomingInvoice(context.Context, *GetUpcomingInvoiceRequest) (*GetUpcomingInvoiceResponse, error)
	// Incoming Webhooks
	BillingWebhookCallback(context.Context, *BillingWebhookCallbackRequest) (*BillingWebhookCallbackResponse, error)
	mustEmbedUnimplementedFrontierServiceServer()
}

// UnimplementedFrontierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontierServiceServer struct {
}

func (UnimplementedFrontierServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedFrontierServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFrontierServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedFrontierServiceServer) ListCurrentUserGroups(context.Context, *ListCurrentUserGroupsRequest) (*ListCurrentUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentUserGroups not implemented")
}
func (UnimplementedFrontierServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*UpdateCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentUser not implemented")
}
func (UnimplementedFrontierServiceServer) EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedFrontierServiceServer) DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationsByUser(context.Context, *ListOrganizationsByUserRequest) (*ListOrganizationsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsByUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationsByCurrentUser(context.Context, *ListOrganizationsByCurrentUserRequest) (*ListOrganizationsByCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsByCurrentUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectsByUser(context.Context, *ListProjectsByUserRequest) (*ListProjectsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsByUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectsByCurrentUser(context.Context, *ListProjectsByCurrentUserRequest) (*ListProjectsByCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsByCurrentUser not implemented")
}
func (UnimplementedFrontierServiceServer) ListUserInvitations(context.Context, *ListUserInvitationsRequest) (*ListUserInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserInvitations not implemented")
}
func (UnimplementedFrontierServiceServer) ListCurrentUserInvitations(context.Context, *ListCurrentUserInvitationsRequest) (*ListCurrentUserInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentUserInvitations not implemented")
}
func (UnimplementedFrontierServiceServer) ListServiceUsers(context.Context, *ListServiceUsersRequest) (*ListServiceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUsers not implemented")
}
func (UnimplementedFrontierServiceServer) CreateServiceUser(context.Context, *CreateServiceUserRequest) (*CreateServiceUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceUser not implemented")
}
func (UnimplementedFrontierServiceServer) GetServiceUser(context.Context, *GetServiceUserRequest) (*GetServiceUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceUser not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteServiceUser(context.Context, *DeleteServiceUserRequest) (*DeleteServiceUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceUser not implemented")
}
func (UnimplementedFrontierServiceServer) CreateServiceUserJWK(context.Context, *CreateServiceUserJWKRequest) (*CreateServiceUserJWKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceUserJWK not implemented")
}
func (UnimplementedFrontierServiceServer) ListServiceUserJWKs(context.Context, *ListServiceUserJWKsRequest) (*ListServiceUserJWKsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUserJWKs not implemented")
}
func (UnimplementedFrontierServiceServer) GetServiceUserJWK(context.Context, *GetServiceUserJWKRequest) (*GetServiceUserJWKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceUserJWK not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteServiceUserJWK(context.Context, *DeleteServiceUserJWKRequest) (*DeleteServiceUserJWKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceUserJWK not implemented")
}
func (UnimplementedFrontierServiceServer) CreateServiceUserCredential(context.Context, *CreateServiceUserCredentialRequest) (*CreateServiceUserCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceUserCredential not implemented")
}
func (UnimplementedFrontierServiceServer) ListServiceUserCredentials(context.Context, *ListServiceUserCredentialsRequest) (*ListServiceUserCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUserCredentials not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteServiceUserCredential(context.Context, *DeleteServiceUserCredentialRequest) (*DeleteServiceUserCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceUserCredential not implemented")
}
func (UnimplementedFrontierServiceServer) CreateServiceUserToken(context.Context, *CreateServiceUserTokenRequest) (*CreateServiceUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceUserToken not implemented")
}
func (UnimplementedFrontierServiceServer) ListServiceUserTokens(context.Context, *ListServiceUserTokensRequest) (*ListServiceUserTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUserTokens not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteServiceUserToken(context.Context, *DeleteServiceUserTokenRequest) (*DeleteServiceUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceUserToken not implemented")
}
func (UnimplementedFrontierServiceServer) ListServiceUserProjects(context.Context, *ListServiceUserProjectsRequest) (*ListServiceUserProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUserProjects not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationGroups(context.Context, *ListOrganizationGroupsRequest) (*ListOrganizationGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationGroups not implemented")
}
func (UnimplementedFrontierServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedFrontierServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedFrontierServiceServer) ListGroupUsers(context.Context, *ListGroupUsersRequest) (*ListGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupUsers not implemented")
}
func (UnimplementedFrontierServiceServer) AddGroupUsers(context.Context, *AddGroupUsersRequest) (*AddGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupUsers not implemented")
}
func (UnimplementedFrontierServiceServer) RemoveGroupUser(context.Context, *RemoveGroupUserRequest) (*RemoveGroupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupUser not implemented")
}
func (UnimplementedFrontierServiceServer) EnableGroup(context.Context, *EnableGroupRequest) (*EnableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGroup not implemented")
}
func (UnimplementedFrontierServiceServer) DisableGroup(context.Context, *DisableGroupRequest) (*DisableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableGroup not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedFrontierServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationRoles not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationRole not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationRole not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationRole not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationRole not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationProjects(context.Context, *ListOrganizationProjectsRequest) (*ListOrganizationProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationProjects not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationAdmins(context.Context, *ListOrganizationAdminsRequest) (*ListOrganizationAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationAdmins not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationUsers(context.Context, *ListOrganizationUsersRequest) (*ListOrganizationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationUsers not implemented")
}
func (UnimplementedFrontierServiceServer) AddOrganizationUsers(context.Context, *AddOrganizationUsersRequest) (*AddOrganizationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationUsers not implemented")
}
func (UnimplementedFrontierServiceServer) RemoveOrganizationUser(context.Context, *RemoveOrganizationUserRequest) (*RemoveOrganizationUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationUser not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganizationKyc(context.Context, *GetOrganizationKycRequest) (*GetOrganizationKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationKyc not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationServiceUsers(context.Context, *ListOrganizationServiceUsersRequest) (*ListOrganizationServiceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationServiceUsers not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationInvitations(context.Context, *ListOrganizationInvitationsRequest) (*ListOrganizationInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationInvitations not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganizationInvitation(context.Context, *CreateOrganizationInvitationRequest) (*CreateOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvitation not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganizationInvitation(context.Context, *GetOrganizationInvitationRequest) (*GetOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInvitation not implemented")
}
func (UnimplementedFrontierServiceServer) AcceptOrganizationInvitation(context.Context, *AcceptOrganizationInvitationRequest) (*AcceptOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrganizationInvitation not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteOrganizationInvitation(context.Context, *DeleteOrganizationInvitationRequest) (*DeleteOrganizationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationInvitation not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationDomains(context.Context, *ListOrganizationDomainsRequest) (*ListOrganizationDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationDomains not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganizationDomain(context.Context, *CreateOrganizationDomainRequest) (*CreateOrganizationDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationDomain not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteOrganizationDomain(context.Context, *DeleteOrganizationDomainRequest) (*DeleteOrganizationDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationDomain not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganizationDomain(context.Context, *GetOrganizationDomainRequest) (*GetOrganizationDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDomain not implemented")
}
func (UnimplementedFrontierServiceServer) VerifyOrganizationDomain(context.Context, *VerifyOrganizationDomainRequest) (*VerifyOrganizationDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOrganizationDomain not implemented")
}
func (UnimplementedFrontierServiceServer) JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) EnableOrganization(context.Context, *EnableOrganizationRequest) (*EnableOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) DisableOrganization(context.Context, *DisableOrganizationRequest) (*DisableOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedFrontierServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedFrontierServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectAdmins(context.Context, *ListProjectAdminsRequest) (*ListProjectAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectAdmins not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectUsers(context.Context, *ListProjectUsersRequest) (*ListProjectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectUsers not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectServiceUsers(context.Context, *ListProjectServiceUsersRequest) (*ListProjectServiceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectServiceUsers not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectGroups(context.Context, *ListProjectGroupsRequest) (*ListProjectGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGroups not implemented")
}
func (UnimplementedFrontierServiceServer) EnableProject(context.Context, *EnableProjectRequest) (*EnableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProject not implemented")
}
func (UnimplementedFrontierServiceServer) DisableProject(context.Context, *DisableProjectRequest) (*DisableProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProject not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedFrontierServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedFrontierServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedFrontierServiceServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedFrontierServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedFrontierServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedFrontierServiceServer) CreatePolicyForProject(context.Context, *CreatePolicyForProjectRequest) (*CreatePolicyForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicyForProject not implemented")
}
func (UnimplementedFrontierServiceServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedFrontierServiceServer) GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedFrontierServiceServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedFrontierServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedFrontierServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedFrontierServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectResources(context.Context, *ListProjectResourcesRequest) (*ListProjectResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectResources not implemented")
}
func (UnimplementedFrontierServiceServer) CreateProjectResource(context.Context, *CreateProjectResourceRequest) (*CreateProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectResource not implemented")
}
func (UnimplementedFrontierServiceServer) GetProjectResource(context.Context, *GetProjectResourceRequest) (*GetProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectResource not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateProjectResource(context.Context, *UpdateProjectResourceRequest) (*UpdateProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectResource not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteProjectResource(context.Context, *DeleteProjectResourceRequest) (*DeleteProjectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectResource not implemented")
}
func (UnimplementedFrontierServiceServer) CheckResourcePermission(context.Context, *CheckResourcePermissionRequest) (*CheckResourcePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResourcePermission not implemented")
}
func (UnimplementedFrontierServiceServer) BatchCheckPermission(context.Context, *BatchCheckPermissionRequest) (*BatchCheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckPermission not implemented")
}
func (UnimplementedFrontierServiceServer) GetJWKs(context.Context, *GetJWKsRequest) (*GetJWKsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJWKs not implemented")
}
func (UnimplementedFrontierServiceServer) ListAuthStrategies(context.Context, *ListAuthStrategiesRequest) (*ListAuthStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthStrategies not implemented")
}
func (UnimplementedFrontierServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedFrontierServiceServer) AuthCallback(context.Context, *AuthCallbackRequest) (*AuthCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCallback not implemented")
}
func (UnimplementedFrontierServiceServer) AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (UnimplementedFrontierServiceServer) AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogout not implemented")
}
func (UnimplementedFrontierServiceServer) ListMetaSchemas(context.Context, *ListMetaSchemasRequest) (*ListMetaSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetaSchemas not implemented")
}
func (UnimplementedFrontierServiceServer) CreateMetaSchema(context.Context, *CreateMetaSchemaRequest) (*CreateMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetaSchema not implemented")
}
func (UnimplementedFrontierServiceServer) GetMetaSchema(context.Context, *GetMetaSchemaRequest) (*GetMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaSchema not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateMetaSchema(context.Context, *UpdateMetaSchemaRequest) (*UpdateMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetaSchema not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteMetaSchema(context.Context, *DeleteMetaSchemaRequest) (*DeleteMetaSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaSchema not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationAuditLogs(context.Context, *ListOrganizationAuditLogsRequest) (*ListOrganizationAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationAuditLogs not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganizationAuditLogs(context.Context, *CreateOrganizationAuditLogsRequest) (*CreateOrganizationAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationAuditLogs not implemented")
}
func (UnimplementedFrontierServiceServer) GetOrganizationAuditLog(context.Context, *GetOrganizationAuditLogRequest) (*GetOrganizationAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationAuditLog not implemented")
}
func (UnimplementedFrontierServiceServer) DescribePreferences(context.Context, *DescribePreferencesRequest) (*DescribePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateOrganizationPreferences(context.Context, *CreateOrganizationPreferencesRequest) (*CreateOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) ListOrganizationPreferences(context.Context, *ListOrganizationPreferencesRequest) (*ListOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateProjectPreferences(context.Context, *CreateProjectPreferencesRequest) (*CreateProjectPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) ListProjectPreferences(context.Context, *ListProjectPreferencesRequest) (*ListProjectPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateGroupPreferences(context.Context, *CreateGroupPreferencesRequest) (*CreateGroupPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) ListGroupPreferences(context.Context, *ListGroupPreferencesRequest) (*ListGroupPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateUserPreferences(context.Context, *CreateUserPreferencesRequest) (*CreateUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) ListUserPreferences(context.Context, *ListUserPreferencesRequest) (*ListUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateCurrentUserPreferences(context.Context, *CreateCurrentUserPreferencesRequest) (*CreateCurrentUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrentUserPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) ListCurrentUserPreferences(context.Context, *ListCurrentUserPreferencesRequest) (*ListCurrentUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentUserPreferences not implemented")
}
func (UnimplementedFrontierServiceServer) CreateBillingAccount(context.Context, *CreateBillingAccountRequest) (*CreateBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) GetBillingAccount(context.Context, *GetBillingAccountRequest) (*GetBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateBillingAccount(context.Context, *UpdateBillingAccountRequest) (*UpdateBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) RegisterBillingAccount(context.Context, *RegisterBillingAccountRequest) (*RegisterBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) ListBillingAccounts(context.Context, *ListBillingAccountsRequest) (*ListBillingAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingAccounts not implemented")
}
func (UnimplementedFrontierServiceServer) DeleteBillingAccount(context.Context, *DeleteBillingAccountRequest) (*DeleteBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) EnableBillingAccount(context.Context, *EnableBillingAccountRequest) (*EnableBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) DisableBillingAccount(context.Context, *DisableBillingAccountRequest) (*DisableBillingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBillingAccount not implemented")
}
func (UnimplementedFrontierServiceServer) GetBillingBalance(context.Context, *GetBillingBalanceRequest) (*GetBillingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingBalance not implemented")
}
func (UnimplementedFrontierServiceServer) HasTrialed(context.Context, *HasTrialedRequest) (*HasTrialedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasTrialed not implemented")
}
func (UnimplementedFrontierServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedFrontierServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedFrontierServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedFrontierServiceServer) ChangeSubscription(context.Context, *ChangeSubscriptionRequest) (*ChangeSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubscription not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*UpdateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedFrontierServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedFrontierServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedFrontierServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedFrontierServiceServer) CreateFeature(context.Context, *CreateFeatureRequest) (*CreateFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeature not implemented")
}
func (UnimplementedFrontierServiceServer) GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedFrontierServiceServer) UpdateFeature(context.Context, *UpdateFeatureRequest) (*UpdateFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeature not implemented")
}
func (UnimplementedFrontierServiceServer) ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedFrontierServiceServer) CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedFrontierServiceServer) ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedFrontierServiceServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedFrontierServiceServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedFrontierServiceServer) CreateCheckout(context.Context, *CreateCheckoutRequest) (*CreateCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckout not implemented")
}
func (UnimplementedFrontierServiceServer) ListCheckouts(context.Context, *ListCheckoutsRequest) (*ListCheckoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckouts not implemented")
}
func (UnimplementedFrontierServiceServer) GetCheckout(context.Context, *GetCheckoutRequest) (*GetCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckout not implemented")
}
func (UnimplementedFrontierServiceServer) CheckFeatureEntitlement(context.Context, *CheckFeatureEntitlementRequest) (*CheckFeatureEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFeatureEntitlement not implemented")
}
func (UnimplementedFrontierServiceServer) CreateBillingUsage(context.Context, *CreateBillingUsageRequest) (*CreateBillingUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingUsage not implemented")
}
func (UnimplementedFrontierServiceServer) ListBillingTransactions(context.Context, *ListBillingTransactionsRequest) (*ListBillingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingTransactions not implemented")
}
func (UnimplementedFrontierServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedFrontierServiceServer) GetUpcomingInvoice(context.Context, *GetUpcomingInvoiceRequest) (*GetUpcomingInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingInvoice not implemented")
}
func (UnimplementedFrontierServiceServer) BillingWebhookCallback(context.Context, *BillingWebhookCallbackRequest) (*BillingWebhookCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillingWebhookCallback not implemented")
}
func (UnimplementedFrontierServiceServer) mustEmbedUnimplementedFrontierServiceServer() {}

// UnsafeFrontierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontierServiceServer will
// result in compilation errors.
type UnsafeFrontierServiceServer interface {
	mustEmbedUnimplementedFrontierServiceServer()
}

func RegisterFrontierServiceServer(s grpc.ServiceRegistrar, srv FrontierServiceServer) {
	s.RegisterService(&FrontierService_ServiceDesc, srv)
}

func _FrontierService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListUserGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListCurrentUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListCurrentUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListCurrentUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListCurrentUserGroups(ctx, req.(*ListCurrentUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_EnableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).EnableUser(ctx, req.(*EnableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DisableUser(ctx, req.(*DisableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationsByUser(ctx, req.(*ListOrganizationsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationsByCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsByCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationsByCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationsByCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationsByCurrentUser(ctx, req.(*ListOrganizationsByCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectsByUser(ctx, req.(*ListProjectsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectsByCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsByCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectsByCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectsByCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectsByCurrentUser(ctx, req.(*ListProjectsByCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListUserInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListUserInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListUserInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListUserInvitations(ctx, req.(*ListUserInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListCurrentUserInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentUserInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListCurrentUserInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListCurrentUserInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListCurrentUserInvitations(ctx, req.(*ListCurrentUserInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListServiceUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListServiceUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListServiceUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListServiceUsers(ctx, req.(*ListServiceUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateServiceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateServiceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateServiceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateServiceUser(ctx, req.(*CreateServiceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetServiceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetServiceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetServiceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetServiceUser(ctx, req.(*GetServiceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteServiceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteServiceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteServiceUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteServiceUser(ctx, req.(*DeleteServiceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateServiceUserJWK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceUserJWKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateServiceUserJWK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateServiceUserJWK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateServiceUserJWK(ctx, req.(*CreateServiceUserJWKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListServiceUserJWKs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUserJWKsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListServiceUserJWKs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListServiceUserJWKs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListServiceUserJWKs(ctx, req.(*ListServiceUserJWKsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetServiceUserJWK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceUserJWKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetServiceUserJWK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetServiceUserJWK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetServiceUserJWK(ctx, req.(*GetServiceUserJWKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteServiceUserJWK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceUserJWKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteServiceUserJWK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteServiceUserJWK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteServiceUserJWK(ctx, req.(*DeleteServiceUserJWKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateServiceUserCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceUserCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateServiceUserCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateServiceUserCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateServiceUserCredential(ctx, req.(*CreateServiceUserCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListServiceUserCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListServiceUserCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListServiceUserCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListServiceUserCredentials(ctx, req.(*ListServiceUserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteServiceUserCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceUserCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteServiceUserCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteServiceUserCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteServiceUserCredential(ctx, req.(*DeleteServiceUserCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateServiceUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateServiceUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateServiceUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateServiceUserToken(ctx, req.(*CreateServiceUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListServiceUserTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUserTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListServiceUserTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListServiceUserTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListServiceUserTokens(ctx, req.(*ListServiceUserTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteServiceUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteServiceUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteServiceUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteServiceUserToken(ctx, req.(*DeleteServiceUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListServiceUserProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUserProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListServiceUserProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListServiceUserProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListServiceUserProjects(ctx, req.(*ListServiceUserProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationGroups(ctx, req.(*ListOrganizationGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListGroupUsers(ctx, req.(*ListGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AddGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AddGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AddGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AddGroupUsers(ctx, req.(*AddGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_RemoveGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).RemoveGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_RemoveGroupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).RemoveGroupUser(ctx, req.(*RemoveGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_EnableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).EnableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_EnableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).EnableGroup(ctx, req.(*EnableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DisableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DisableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DisableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DisableGroup(ctx, req.(*DisableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationRoles(ctx, req.(*ListOrganizationRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganizationRole(ctx, req.(*CreateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganizationRole(ctx, req.(*GetOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateOrganizationRole(ctx, req.(*UpdateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteOrganizationRole(ctx, req.(*DeleteOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationProjects(ctx, req.(*ListOrganizationProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationAdmins(ctx, req.(*ListOrganizationAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationUsers(ctx, req.(*ListOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AddOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AddOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AddOrganizationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AddOrganizationUsers(ctx, req.(*AddOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_RemoveOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).RemoveOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_RemoveOrganizationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).RemoveOrganizationUser(ctx, req.(*RemoveOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganizationKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganizationKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganizationKyc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganizationKyc(ctx, req.(*GetOrganizationKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationServiceUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationServiceUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationServiceUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationServiceUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationServiceUsers(ctx, req.(*ListOrganizationServiceUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationInvitations(ctx, req.(*ListOrganizationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganizationInvitation(ctx, req.(*CreateOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganizationInvitation(ctx, req.(*GetOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AcceptOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AcceptOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AcceptOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AcceptOrganizationInvitation(ctx, req.(*AcceptOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteOrganizationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteOrganizationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteOrganizationInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteOrganizationInvitation(ctx, req.(*DeleteOrganizationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationDomains(ctx, req.(*ListOrganizationDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganizationDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganizationDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganizationDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganizationDomain(ctx, req.(*CreateOrganizationDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteOrganizationDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteOrganizationDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteOrganizationDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteOrganizationDomain(ctx, req.(*DeleteOrganizationDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganizationDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganizationDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganizationDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganizationDomain(ctx, req.(*GetOrganizationDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_VerifyOrganizationDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOrganizationDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).VerifyOrganizationDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_VerifyOrganizationDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).VerifyOrganizationDomain(ctx, req.(*VerifyOrganizationDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_JoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).JoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_JoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).JoinOrganization(ctx, req.(*JoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_EnableOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).EnableOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_EnableOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).EnableOrganization(ctx, req.(*EnableOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DisableOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DisableOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DisableOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DisableOrganization(ctx, req.(*DisableOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectAdmins(ctx, req.(*ListProjectAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectUsers(ctx, req.(*ListProjectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectServiceUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectServiceUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectServiceUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectServiceUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectServiceUsers(ctx, req.(*ListProjectServiceUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectGroups(ctx, req.(*ListProjectGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_EnableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).EnableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_EnableProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).EnableProject(ctx, req.(*EnableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DisableProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DisableProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DisableProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DisableProject(ctx, req.(*DisableProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreatePolicyForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreatePolicyForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreatePolicyForProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreatePolicyForProject(ctx, req.(*CreatePolicyForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetRelation(ctx, req.(*GetRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectResources(ctx, req.(*ListProjectResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateProjectResource(ctx, req.(*CreateProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetProjectResource(ctx, req.(*GetProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateProjectResource(ctx, req.(*UpdateProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteProjectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteProjectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteProjectResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteProjectResource(ctx, req.(*DeleteProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CheckResourcePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResourcePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CheckResourcePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CheckResourcePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CheckResourcePermission(ctx, req.(*CheckResourcePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_BatchCheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).BatchCheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_BatchCheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).BatchCheckPermission(ctx, req.(*BatchCheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetJWKs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJWKsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetJWKs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetJWKs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetJWKs(ctx, req.(*GetJWKsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListAuthStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListAuthStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListAuthStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListAuthStrategies(ctx, req.(*ListAuthStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AuthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AuthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AuthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AuthCallback(ctx, req.(*AuthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AuthToken(ctx, req.(*AuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_AuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).AuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_AuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).AuthLogout(ctx, req.(*AuthLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListMetaSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetaSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListMetaSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListMetaSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListMetaSchemas(ctx, req.(*ListMetaSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateMetaSchema(ctx, req.(*CreateMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetMetaSchema(ctx, req.(*GetMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateMetaSchema(ctx, req.(*UpdateMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteMetaSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteMetaSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteMetaSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteMetaSchema(ctx, req.(*DeleteMetaSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationAuditLogs(ctx, req.(*ListOrganizationAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganizationAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganizationAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganizationAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganizationAuditLogs(ctx, req.(*CreateOrganizationAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetOrganizationAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetOrganizationAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetOrganizationAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetOrganizationAuditLog(ctx, req.(*GetOrganizationAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DescribePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DescribePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DescribePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DescribePreferences(ctx, req.(*DescribePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateOrganizationPreferences(ctx, req.(*CreateOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListOrganizationPreferences(ctx, req.(*ListOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateProjectPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateProjectPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateProjectPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateProjectPreferences(ctx, req.(*CreateProjectPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProjectPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProjectPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProjectPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProjectPreferences(ctx, req.(*ListProjectPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateGroupPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateGroupPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateGroupPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateGroupPreferences(ctx, req.(*CreateGroupPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListGroupPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListGroupPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListGroupPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListGroupPreferences(ctx, req.(*ListGroupPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateUserPreferences(ctx, req.(*CreateUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListUserPreferences(ctx, req.(*ListUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateCurrentUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrentUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateCurrentUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateCurrentUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateCurrentUserPreferences(ctx, req.(*CreateCurrentUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListCurrentUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListCurrentUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListCurrentUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListCurrentUserPreferences(ctx, req.(*ListCurrentUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateBillingAccount(ctx, req.(*CreateBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetBillingAccount(ctx, req.(*GetBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateBillingAccount(ctx, req.(*UpdateBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_RegisterBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).RegisterBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_RegisterBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).RegisterBillingAccount(ctx, req.(*RegisterBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListBillingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListBillingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListBillingAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListBillingAccounts(ctx, req.(*ListBillingAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DeleteBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DeleteBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DeleteBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DeleteBillingAccount(ctx, req.(*DeleteBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_EnableBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).EnableBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_EnableBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).EnableBillingAccount(ctx, req.(*EnableBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_DisableBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableBillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).DisableBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_DisableBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).DisableBillingAccount(ctx, req.(*DisableBillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetBillingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetBillingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetBillingBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetBillingBalance(ctx, req.(*GetBillingBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_HasTrialed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasTrialedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).HasTrialed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_HasTrialed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).HasTrialed(ctx, req.(*HasTrialedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ChangeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ChangeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ChangeSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ChangeSubscription(ctx, req.(*ChangeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateFeature(ctx, req.(*CreateFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdateFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdateFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdateFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdateFeature(ctx, req.(*UpdateFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListFeatures(ctx, req.(*ListFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateCheckout(ctx, req.(*CreateCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListCheckouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCheckoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListCheckouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListCheckouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListCheckouts(ctx, req.(*ListCheckoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetCheckout(ctx, req.(*GetCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CheckFeatureEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFeatureEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CheckFeatureEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CheckFeatureEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CheckFeatureEntitlement(ctx, req.(*CheckFeatureEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_CreateBillingUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).CreateBillingUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_CreateBillingUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).CreateBillingUsage(ctx, req.(*CreateBillingUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListBillingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListBillingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListBillingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListBillingTransactions(ctx, req.(*ListBillingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_GetUpcomingInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).GetUpcomingInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_GetUpcomingInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).GetUpcomingInvoice(ctx, req.(*GetUpcomingInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontierService_BillingWebhookCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingWebhookCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServiceServer).BillingWebhookCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontierService_BillingWebhookCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServiceServer).BillingWebhookCallback(ctx, req.(*BillingWebhookCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontierService_ServiceDesc is the grpc.ServiceDesc for FrontierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raystack.frontier.v1beta1.FrontierService",
	HandlerType: (*FrontierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _FrontierService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _FrontierService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _FrontierService_GetUser_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _FrontierService_ListUserGroups_Handler,
		},
		{
			MethodName: "ListCurrentUserGroups",
			Handler:    _FrontierService_ListCurrentUserGroups_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _FrontierService_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _FrontierService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateCurrentUser",
			Handler:    _FrontierService_UpdateCurrentUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _FrontierService_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _FrontierService_DisableUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _FrontierService_DeleteUser_Handler,
		},
		{
			MethodName: "ListOrganizationsByUser",
			Handler:    _FrontierService_ListOrganizationsByUser_Handler,
		},
		{
			MethodName: "ListOrganizationsByCurrentUser",
			Handler:    _FrontierService_ListOrganizationsByCurrentUser_Handler,
		},
		{
			MethodName: "ListProjectsByUser",
			Handler:    _FrontierService_ListProjectsByUser_Handler,
		},
		{
			MethodName: "ListProjectsByCurrentUser",
			Handler:    _FrontierService_ListProjectsByCurrentUser_Handler,
		},
		{
			MethodName: "ListUserInvitations",
			Handler:    _FrontierService_ListUserInvitations_Handler,
		},
		{
			MethodName: "ListCurrentUserInvitations",
			Handler:    _FrontierService_ListCurrentUserInvitations_Handler,
		},
		{
			MethodName: "ListServiceUsers",
			Handler:    _FrontierService_ListServiceUsers_Handler,
		},
		{
			MethodName: "CreateServiceUser",
			Handler:    _FrontierService_CreateServiceUser_Handler,
		},
		{
			MethodName: "GetServiceUser",
			Handler:    _FrontierService_GetServiceUser_Handler,
		},
		{
			MethodName: "DeleteServiceUser",
			Handler:    _FrontierService_DeleteServiceUser_Handler,
		},
		{
			MethodName: "CreateServiceUserJWK",
			Handler:    _FrontierService_CreateServiceUserJWK_Handler,
		},
		{
			MethodName: "ListServiceUserJWKs",
			Handler:    _FrontierService_ListServiceUserJWKs_Handler,
		},
		{
			MethodName: "GetServiceUserJWK",
			Handler:    _FrontierService_GetServiceUserJWK_Handler,
		},
		{
			MethodName: "DeleteServiceUserJWK",
			Handler:    _FrontierService_DeleteServiceUserJWK_Handler,
		},
		{
			MethodName: "CreateServiceUserCredential",
			Handler:    _FrontierService_CreateServiceUserCredential_Handler,
		},
		{
			MethodName: "ListServiceUserCredentials",
			Handler:    _FrontierService_ListServiceUserCredentials_Handler,
		},
		{
			MethodName: "DeleteServiceUserCredential",
			Handler:    _FrontierService_DeleteServiceUserCredential_Handler,
		},
		{
			MethodName: "CreateServiceUserToken",
			Handler:    _FrontierService_CreateServiceUserToken_Handler,
		},
		{
			MethodName: "ListServiceUserTokens",
			Handler:    _FrontierService_ListServiceUserTokens_Handler,
		},
		{
			MethodName: "DeleteServiceUserToken",
			Handler:    _FrontierService_DeleteServiceUserToken_Handler,
		},
		{
			MethodName: "ListServiceUserProjects",
			Handler:    _FrontierService_ListServiceUserProjects_Handler,
		},
		{
			MethodName: "ListOrganizationGroups",
			Handler:    _FrontierService_ListOrganizationGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _FrontierService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _FrontierService_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _FrontierService_UpdateGroup_Handler,
		},
		{
			MethodName: "ListGroupUsers",
			Handler:    _FrontierService_ListGroupUsers_Handler,
		},
		{
			MethodName: "AddGroupUsers",
			Handler:    _FrontierService_AddGroupUsers_Handler,
		},
		{
			MethodName: "RemoveGroupUser",
			Handler:    _FrontierService_RemoveGroupUser_Handler,
		},
		{
			MethodName: "EnableGroup",
			Handler:    _FrontierService_EnableGroup_Handler,
		},
		{
			MethodName: "DisableGroup",
			Handler:    _FrontierService_DisableGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _FrontierService_DeleteGroup_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _FrontierService_ListRoles_Handler,
		},
		{
			MethodName: "ListOrganizationRoles",
			Handler:    _FrontierService_ListOrganizationRoles_Handler,
		},
		{
			MethodName: "CreateOrganizationRole",
			Handler:    _FrontierService_CreateOrganizationRole_Handler,
		},
		{
			MethodName: "GetOrganizationRole",
			Handler:    _FrontierService_GetOrganizationRole_Handler,
		},
		{
			MethodName: "UpdateOrganizationRole",
			Handler:    _FrontierService_UpdateOrganizationRole_Handler,
		},
		{
			MethodName: "DeleteOrganizationRole",
			Handler:    _FrontierService_DeleteOrganizationRole_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _FrontierService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _FrontierService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _FrontierService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _FrontierService_UpdateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationProjects",
			Handler:    _FrontierService_ListOrganizationProjects_Handler,
		},
		{
			MethodName: "ListOrganizationAdmins",
			Handler:    _FrontierService_ListOrganizationAdmins_Handler,
		},
		{
			MethodName: "ListOrganizationUsers",
			Handler:    _FrontierService_ListOrganizationUsers_Handler,
		},
		{
			MethodName: "AddOrganizationUsers",
			Handler:    _FrontierService_AddOrganizationUsers_Handler,
		},
		{
			MethodName: "RemoveOrganizationUser",
			Handler:    _FrontierService_RemoveOrganizationUser_Handler,
		},
		{
			MethodName: "GetOrganizationKyc",
			Handler:    _FrontierService_GetOrganizationKyc_Handler,
		},
		{
			MethodName: "ListOrganizationServiceUsers",
			Handler:    _FrontierService_ListOrganizationServiceUsers_Handler,
		},
		{
			MethodName: "ListOrganizationInvitations",
			Handler:    _FrontierService_ListOrganizationInvitations_Handler,
		},
		{
			MethodName: "CreateOrganizationInvitation",
			Handler:    _FrontierService_CreateOrganizationInvitation_Handler,
		},
		{
			MethodName: "GetOrganizationInvitation",
			Handler:    _FrontierService_GetOrganizationInvitation_Handler,
		},
		{
			MethodName: "AcceptOrganizationInvitation",
			Handler:    _FrontierService_AcceptOrganizationInvitation_Handler,
		},
		{
			MethodName: "DeleteOrganizationInvitation",
			Handler:    _FrontierService_DeleteOrganizationInvitation_Handler,
		},
		{
			MethodName: "ListOrganizationDomains",
			Handler:    _FrontierService_ListOrganizationDomains_Handler,
		},
		{
			MethodName: "CreateOrganizationDomain",
			Handler:    _FrontierService_CreateOrganizationDomain_Handler,
		},
		{
			MethodName: "DeleteOrganizationDomain",
			Handler:    _FrontierService_DeleteOrganizationDomain_Handler,
		},
		{
			MethodName: "GetOrganizationDomain",
			Handler:    _FrontierService_GetOrganizationDomain_Handler,
		},
		{
			MethodName: "VerifyOrganizationDomain",
			Handler:    _FrontierService_VerifyOrganizationDomain_Handler,
		},
		{
			MethodName: "JoinOrganization",
			Handler:    _FrontierService_JoinOrganization_Handler,
		},
		{
			MethodName: "EnableOrganization",
			Handler:    _FrontierService_EnableOrganization_Handler,
		},
		{
			MethodName: "DisableOrganization",
			Handler:    _FrontierService_DisableOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _FrontierService_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _FrontierService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _FrontierService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _FrontierService_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjectAdmins",
			Handler:    _FrontierService_ListProjectAdmins_Handler,
		},
		{
			MethodName: "ListProjectUsers",
			Handler:    _FrontierService_ListProjectUsers_Handler,
		},
		{
			MethodName: "ListProjectServiceUsers",
			Handler:    _FrontierService_ListProjectServiceUsers_Handler,
		},
		{
			MethodName: "ListProjectGroups",
			Handler:    _FrontierService_ListProjectGroups_Handler,
		},
		{
			MethodName: "EnableProject",
			Handler:    _FrontierService_EnableProject_Handler,
		},
		{
			MethodName: "DisableProject",
			Handler:    _FrontierService_DisableProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _FrontierService_DeleteProject_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _FrontierService_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _FrontierService_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _FrontierService_ListPolicies_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _FrontierService_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _FrontierService_DeletePolicy_Handler,
		},
		{
			MethodName: "CreatePolicyForProject",
			Handler:    _FrontierService_CreatePolicyForProject_Handler,
		},
		{
			MethodName: "CreateRelation",
			Handler:    _FrontierService_CreateRelation_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _FrontierService_GetRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _FrontierService_DeleteRelation_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _FrontierService_ListPermissions_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _FrontierService_GetPermission_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _FrontierService_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _FrontierService_GetNamespace_Handler,
		},
		{
			MethodName: "ListProjectResources",
			Handler:    _FrontierService_ListProjectResources_Handler,
		},
		{
			MethodName: "CreateProjectResource",
			Handler:    _FrontierService_CreateProjectResource_Handler,
		},
		{
			MethodName: "GetProjectResource",
			Handler:    _FrontierService_GetProjectResource_Handler,
		},
		{
			MethodName: "UpdateProjectResource",
			Handler:    _FrontierService_UpdateProjectResource_Handler,
		},
		{
			MethodName: "DeleteProjectResource",
			Handler:    _FrontierService_DeleteProjectResource_Handler,
		},
		{
			MethodName: "CheckResourcePermission",
			Handler:    _FrontierService_CheckResourcePermission_Handler,
		},
		{
			MethodName: "BatchCheckPermission",
			Handler:    _FrontierService_BatchCheckPermission_Handler,
		},
		{
			MethodName: "GetJWKs",
			Handler:    _FrontierService_GetJWKs_Handler,
		},
		{
			MethodName: "ListAuthStrategies",
			Handler:    _FrontierService_ListAuthStrategies_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _FrontierService_Authenticate_Handler,
		},
		{
			MethodName: "AuthCallback",
			Handler:    _FrontierService_AuthCallback_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _FrontierService_AuthToken_Handler,
		},
		{
			MethodName: "AuthLogout",
			Handler:    _FrontierService_AuthLogout_Handler,
		},
		{
			MethodName: "ListMetaSchemas",
			Handler:    _FrontierService_ListMetaSchemas_Handler,
		},
		{
			MethodName: "CreateMetaSchema",
			Handler:    _FrontierService_CreateMetaSchema_Handler,
		},
		{
			MethodName: "GetMetaSchema",
			Handler:    _FrontierService_GetMetaSchema_Handler,
		},
		{
			MethodName: "UpdateMetaSchema",
			Handler:    _FrontierService_UpdateMetaSchema_Handler,
		},
		{
			MethodName: "DeleteMetaSchema",
			Handler:    _FrontierService_DeleteMetaSchema_Handler,
		},
		{
			MethodName: "ListOrganizationAuditLogs",
			Handler:    _FrontierService_ListOrganizationAuditLogs_Handler,
		},
		{
			MethodName: "CreateOrganizationAuditLogs",
			Handler:    _FrontierService_CreateOrganizationAuditLogs_Handler,
		},
		{
			MethodName: "GetOrganizationAuditLog",
			Handler:    _FrontierService_GetOrganizationAuditLog_Handler,
		},
		{
			MethodName: "DescribePreferences",
			Handler:    _FrontierService_DescribePreferences_Handler,
		},
		{
			MethodName: "CreateOrganizationPreferences",
			Handler:    _FrontierService_CreateOrganizationPreferences_Handler,
		},
		{
			MethodName: "ListOrganizationPreferences",
			Handler:    _FrontierService_ListOrganizationPreferences_Handler,
		},
		{
			MethodName: "CreateProjectPreferences",
			Handler:    _FrontierService_CreateProjectPreferences_Handler,
		},
		{
			MethodName: "ListProjectPreferences",
			Handler:    _FrontierService_ListProjectPreferences_Handler,
		},
		{
			MethodName: "CreateGroupPreferences",
			Handler:    _FrontierService_CreateGroupPreferences_Handler,
		},
		{
			MethodName: "ListGroupPreferences",
			Handler:    _FrontierService_ListGroupPreferences_Handler,
		},
		{
			MethodName: "CreateUserPreferences",
			Handler:    _FrontierService_CreateUserPreferences_Handler,
		},
		{
			MethodName: "ListUserPreferences",
			Handler:    _FrontierService_ListUserPreferences_Handler,
		},
		{
			MethodName: "CreateCurrentUserPreferences",
			Handler:    _FrontierService_CreateCurrentUserPreferences_Handler,
		},
		{
			MethodName: "ListCurrentUserPreferences",
			Handler:    _FrontierService_ListCurrentUserPreferences_Handler,
		},
		{
			MethodName: "CreateBillingAccount",
			Handler:    _FrontierService_CreateBillingAccount_Handler,
		},
		{
			MethodName: "GetBillingAccount",
			Handler:    _FrontierService_GetBillingAccount_Handler,
		},
		{
			MethodName: "UpdateBillingAccount",
			Handler:    _FrontierService_UpdateBillingAccount_Handler,
		},
		{
			MethodName: "RegisterBillingAccount",
			Handler:    _FrontierService_RegisterBillingAccount_Handler,
		},
		{
			MethodName: "ListBillingAccounts",
			Handler:    _FrontierService_ListBillingAccounts_Handler,
		},
		{
			MethodName: "DeleteBillingAccount",
			Handler:    _FrontierService_DeleteBillingAccount_Handler,
		},
		{
			MethodName: "EnableBillingAccount",
			Handler:    _FrontierService_EnableBillingAccount_Handler,
		},
		{
			MethodName: "DisableBillingAccount",
			Handler:    _FrontierService_DisableBillingAccount_Handler,
		},
		{
			MethodName: "GetBillingBalance",
			Handler:    _FrontierService_GetBillingBalance_Handler,
		},
		{
			MethodName: "HasTrialed",
			Handler:    _FrontierService_HasTrialed_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _FrontierService_GetSubscription_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _FrontierService_CancelSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _FrontierService_ListSubscriptions_Handler,
		},
		{
			MethodName: "ChangeSubscription",
			Handler:    _FrontierService_ChangeSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _FrontierService_UpdateSubscription_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _FrontierService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _FrontierService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _FrontierService_ListProducts_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _FrontierService_UpdateProduct_Handler,
		},
		{
			MethodName: "CreateFeature",
			Handler:    _FrontierService_CreateFeature_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _FrontierService_GetFeature_Handler,
		},
		{
			MethodName: "UpdateFeature",
			Handler:    _FrontierService_UpdateFeature_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _FrontierService_ListFeatures_Handler,
		},
		{
			MethodName: "CreatePlan",
			Handler:    _FrontierService_CreatePlan_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _FrontierService_ListPlans_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _FrontierService_GetPlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _FrontierService_UpdatePlan_Handler,
		},
		{
			MethodName: "CreateCheckout",
			Handler:    _FrontierService_CreateCheckout_Handler,
		},
		{
			MethodName: "ListCheckouts",
			Handler:    _FrontierService_ListCheckouts_Handler,
		},
		{
			MethodName: "GetCheckout",
			Handler:    _FrontierService_GetCheckout_Handler,
		},
		{
			MethodName: "CheckFeatureEntitlement",
			Handler:    _FrontierService_CheckFeatureEntitlement_Handler,
		},
		{
			MethodName: "CreateBillingUsage",
			Handler:    _FrontierService_CreateBillingUsage_Handler,
		},
		{
			MethodName: "ListBillingTransactions",
			Handler:    _FrontierService_ListBillingTransactions_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _FrontierService_ListInvoices_Handler,
		},
		{
			MethodName: "GetUpcomingInvoice",
			Handler:    _FrontierService_GetUpcomingInvoice_Handler,
		},
		{
			MethodName: "BillingWebhookCallback",
			Handler:    _FrontierService_BillingWebhookCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raystack/frontier/v1beta1/frontier.proto",
}
