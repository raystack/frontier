// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EntitlementService is an autogenerated mock type for the EntitlementService type
type EntitlementService struct {
	mock.Mock
}

type EntitlementService_Expecter struct {
	mock *mock.Mock
}

func (_m *EntitlementService) EXPECT() *EntitlementService_Expecter {
	return &EntitlementService_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, customerID, featureID
func (_m *EntitlementService) Check(ctx context.Context, customerID string, featureID string) (bool, error) {
	ret := _m.Called(ctx, customerID, featureID)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, customerID, featureID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, customerID, featureID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, featureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntitlementService_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type EntitlementService_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
//   - featureID string
func (_e *EntitlementService_Expecter) Check(ctx interface{}, customerID interface{}, featureID interface{}) *EntitlementService_Check_Call {
	return &EntitlementService_Check_Call{Call: _e.mock.On("Check", ctx, customerID, featureID)}
}

func (_c *EntitlementService_Check_Call) Run(run func(ctx context.Context, customerID string, featureID string)) *EntitlementService_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *EntitlementService_Check_Call) Return(_a0 bool, _a1 error) *EntitlementService_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EntitlementService_Check_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *EntitlementService_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPlanEligibility provides a mock function with given fields: ctx, customerID
func (_m *EntitlementService) CheckPlanEligibility(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for CheckPlanEligibility")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntitlementService_CheckPlanEligibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPlanEligibility'
type EntitlementService_CheckPlanEligibility_Call struct {
	*mock.Call
}

// CheckPlanEligibility is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
func (_e *EntitlementService_Expecter) CheckPlanEligibility(ctx interface{}, customerID interface{}) *EntitlementService_CheckPlanEligibility_Call {
	return &EntitlementService_CheckPlanEligibility_Call{Call: _e.mock.On("CheckPlanEligibility", ctx, customerID)}
}

func (_c *EntitlementService_CheckPlanEligibility_Call) Run(run func(ctx context.Context, customerID string)) *EntitlementService_CheckPlanEligibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EntitlementService_CheckPlanEligibility_Call) Return(_a0 error) *EntitlementService_CheckPlanEligibility_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntitlementService_CheckPlanEligibility_Call) RunAndReturn(run func(context.Context, string) error) *EntitlementService_CheckPlanEligibility_Call {
	_c.Call.Return(run)
	return _c
}

// NewEntitlementService creates a new instance of EntitlementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntitlementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntitlementService {
	mock := &EntitlementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
