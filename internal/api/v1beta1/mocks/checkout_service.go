// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	checkout "github.com/raystack/frontier/billing/checkout"

	mock "github.com/stretchr/testify/mock"

	product "github.com/raystack/frontier/billing/product"

	subscription "github.com/raystack/frontier/billing/subscription"
)

// CheckoutService is an autogenerated mock type for the CheckoutService type
type CheckoutService struct {
	mock.Mock
}

type CheckoutService_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckoutService) EXPECT() *CheckoutService_Expecter {
	return &CheckoutService_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, ch
func (_m *CheckoutService) Apply(ctx context.Context, ch checkout.Checkout) (*subscription.Subscription, *product.Product, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *subscription.Subscription
	var r1 *product.Product
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) (*subscription.Subscription, *product.Product, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) *subscription.Subscription); ok {
		r0 = rf(ctx, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, checkout.Checkout) *product.Product); ok {
		r1 = rf(ctx, ch)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*product.Product)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, checkout.Checkout) error); ok {
		r2 = rf(ctx, ch)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckoutService_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type CheckoutService_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - ch checkout.Checkout
func (_e *CheckoutService_Expecter) Apply(ctx interface{}, ch interface{}) *CheckoutService_Apply_Call {
	return &CheckoutService_Apply_Call{Call: _e.mock.On("Apply", ctx, ch)}
}

func (_c *CheckoutService_Apply_Call) Run(run func(ctx context.Context, ch checkout.Checkout)) *CheckoutService_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkout.Checkout))
	})
	return _c
}

func (_c *CheckoutService_Apply_Call) Return(_a0 *subscription.Subscription, _a1 *product.Product, _a2 error) *CheckoutService_Apply_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CheckoutService_Apply_Call) RunAndReturn(run func(context.Context, checkout.Checkout) (*subscription.Subscription, *product.Product, error)) *CheckoutService_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, ch
func (_m *CheckoutService) Create(ctx context.Context, ch checkout.Checkout) (checkout.Checkout, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 checkout.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) (checkout.Checkout, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) checkout.Checkout); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(checkout.Checkout)
	}

	if rf, ok := ret.Get(1).(func(context.Context, checkout.Checkout) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CheckoutService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - ch checkout.Checkout
func (_e *CheckoutService_Expecter) Create(ctx interface{}, ch interface{}) *CheckoutService_Create_Call {
	return &CheckoutService_Create_Call{Call: _e.mock.On("Create", ctx, ch)}
}

func (_c *CheckoutService_Create_Call) Run(run func(ctx context.Context, ch checkout.Checkout)) *CheckoutService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkout.Checkout))
	})
	return _c
}

func (_c *CheckoutService_Create_Call) Return(_a0 checkout.Checkout, _a1 error) *CheckoutService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutService_Create_Call) RunAndReturn(run func(context.Context, checkout.Checkout) (checkout.Checkout, error)) *CheckoutService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSessionForCustomerPortal provides a mock function with given fields: ctx, ch
func (_m *CheckoutService) CreateSessionForCustomerPortal(ctx context.Context, ch checkout.Checkout) (checkout.Checkout, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for CreateSessionForCustomerPortal")
	}

	var r0 checkout.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) (checkout.Checkout, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) checkout.Checkout); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(checkout.Checkout)
	}

	if rf, ok := ret.Get(1).(func(context.Context, checkout.Checkout) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutService_CreateSessionForCustomerPortal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSessionForCustomerPortal'
type CheckoutService_CreateSessionForCustomerPortal_Call struct {
	*mock.Call
}

// CreateSessionForCustomerPortal is a helper method to define mock.On call
//   - ctx context.Context
//   - ch checkout.Checkout
func (_e *CheckoutService_Expecter) CreateSessionForCustomerPortal(ctx interface{}, ch interface{}) *CheckoutService_CreateSessionForCustomerPortal_Call {
	return &CheckoutService_CreateSessionForCustomerPortal_Call{Call: _e.mock.On("CreateSessionForCustomerPortal", ctx, ch)}
}

func (_c *CheckoutService_CreateSessionForCustomerPortal_Call) Run(run func(ctx context.Context, ch checkout.Checkout)) *CheckoutService_CreateSessionForCustomerPortal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkout.Checkout))
	})
	return _c
}

func (_c *CheckoutService_CreateSessionForCustomerPortal_Call) Return(_a0 checkout.Checkout, _a1 error) *CheckoutService_CreateSessionForCustomerPortal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutService_CreateSessionForCustomerPortal_Call) RunAndReturn(run func(context.Context, checkout.Checkout) (checkout.Checkout, error)) *CheckoutService_CreateSessionForCustomerPortal_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSessionForPaymentMethod provides a mock function with given fields: ctx, ch
func (_m *CheckoutService) CreateSessionForPaymentMethod(ctx context.Context, ch checkout.Checkout) (checkout.Checkout, error) {
	ret := _m.Called(ctx, ch)

	if len(ret) == 0 {
		panic("no return value specified for CreateSessionForPaymentMethod")
	}

	var r0 checkout.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) (checkout.Checkout, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Checkout) checkout.Checkout); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(checkout.Checkout)
	}

	if rf, ok := ret.Get(1).(func(context.Context, checkout.Checkout) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutService_CreateSessionForPaymentMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSessionForPaymentMethod'
type CheckoutService_CreateSessionForPaymentMethod_Call struct {
	*mock.Call
}

// CreateSessionForPaymentMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - ch checkout.Checkout
func (_e *CheckoutService_Expecter) CreateSessionForPaymentMethod(ctx interface{}, ch interface{}) *CheckoutService_CreateSessionForPaymentMethod_Call {
	return &CheckoutService_CreateSessionForPaymentMethod_Call{Call: _e.mock.On("CreateSessionForPaymentMethod", ctx, ch)}
}

func (_c *CheckoutService_CreateSessionForPaymentMethod_Call) Run(run func(ctx context.Context, ch checkout.Checkout)) *CheckoutService_CreateSessionForPaymentMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkout.Checkout))
	})
	return _c
}

func (_c *CheckoutService_CreateSessionForPaymentMethod_Call) Return(_a0 checkout.Checkout, _a1 error) *CheckoutService_CreateSessionForPaymentMethod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutService_CreateSessionForPaymentMethod_Call) RunAndReturn(run func(context.Context, checkout.Checkout) (checkout.Checkout, error)) *CheckoutService_CreateSessionForPaymentMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CheckoutService) GetByID(ctx context.Context, id string) (checkout.Checkout, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 checkout.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (checkout.Checkout, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) checkout.Checkout); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(checkout.Checkout)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type CheckoutService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CheckoutService_Expecter) GetByID(ctx interface{}, id interface{}) *CheckoutService_GetByID_Call {
	return &CheckoutService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *CheckoutService_GetByID_Call) Run(run func(ctx context.Context, id string)) *CheckoutService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CheckoutService_GetByID_Call) Return(_a0 checkout.Checkout, _a1 error) *CheckoutService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutService_GetByID_Call) RunAndReturn(run func(context.Context, string) (checkout.Checkout, error)) *CheckoutService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *CheckoutService) List(ctx context.Context, filter checkout.Filter) ([]checkout.Checkout, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []checkout.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Filter) ([]checkout.Checkout, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, checkout.Filter) []checkout.Checkout); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]checkout.Checkout)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, checkout.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CheckoutService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter checkout.Filter
func (_e *CheckoutService_Expecter) List(ctx interface{}, filter interface{}) *CheckoutService_List_Call {
	return &CheckoutService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *CheckoutService_List_Call) Run(run func(ctx context.Context, filter checkout.Filter)) *CheckoutService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(checkout.Filter))
	})
	return _c
}

func (_c *CheckoutService_List_Call) Return(_a0 []checkout.Checkout, _a1 error) *CheckoutService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutService_List_Call) RunAndReturn(run func(context.Context, checkout.Filter) ([]checkout.Checkout, error)) *CheckoutService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewCheckoutService creates a new instance of CheckoutService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCheckoutService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CheckoutService {
	mock := &CheckoutService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
