// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/raystack/frontier/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// DomainService is an autogenerated mock type for the DomainService type
type DomainService struct {
	mock.Mock
}

type DomainService_Expecter struct {
	mock *mock.Mock
}

func (_m *DomainService) EXPECT() *DomainService_Expecter {
	return &DomainService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, toCreate
func (_m *DomainService) Create(ctx context.Context, toCreate domain.Domain) (domain.Domain, error) {
	ret := _m.Called(ctx, toCreate)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Domain) (domain.Domain, error)); ok {
		return rf(ctx, toCreate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Domain) domain.Domain); ok {
		r0 = rf(ctx, toCreate)
	} else {
		r0 = ret.Get(0).(domain.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Domain) error); ok {
		r1 = rf(ctx, toCreate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DomainService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - toCreate domain.Domain
func (_e *DomainService_Expecter) Create(ctx interface{}, toCreate interface{}) *DomainService_Create_Call {
	return &DomainService_Create_Call{Call: _e.mock.On("Create", ctx, toCreate)}
}

func (_c *DomainService_Create_Call) Run(run func(ctx context.Context, toCreate domain.Domain)) *DomainService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Domain))
	})
	return _c
}

func (_c *DomainService_Create_Call) Return(_a0 domain.Domain, _a1 error) *DomainService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DomainService_Create_Call) RunAndReturn(run func(context.Context, domain.Domain) (domain.Domain, error)) *DomainService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DomainService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DomainService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DomainService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DomainService_Expecter) Delete(ctx interface{}, id interface{}) *DomainService_Delete_Call {
	return &DomainService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *DomainService_Delete_Call) Run(run func(ctx context.Context, id string)) *DomainService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainService_Delete_Call) Return(_a0 error) *DomainService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DomainService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *DomainService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *DomainService) Get(ctx context.Context, id string) (domain.Domain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Domain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DomainService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DomainService_Expecter) Get(ctx interface{}, id interface{}) *DomainService_Get_Call {
	return &DomainService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *DomainService_Get_Call) Run(run func(ctx context.Context, id string)) *DomainService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainService_Get_Call) Return(_a0 domain.Domain, _a1 error) *DomainService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DomainService_Get_Call) RunAndReturn(run func(context.Context, string) (domain.Domain, error)) *DomainService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, orgID, userID
func (_m *DomainService) Join(ctx context.Context, orgID string, userID string) error {
	ret := _m.Called(ctx, orgID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, orgID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DomainService_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type DomainService_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - userID string
func (_e *DomainService_Expecter) Join(ctx interface{}, orgID interface{}, userID interface{}) *DomainService_Join_Call {
	return &DomainService_Join_Call{Call: _e.mock.On("Join", ctx, orgID, userID)}
}

func (_c *DomainService_Join_Call) Run(run func(ctx context.Context, orgID string, userID string)) *DomainService_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DomainService_Join_Call) Return(_a0 error) *DomainService_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DomainService_Join_Call) RunAndReturn(run func(context.Context, string, string) error) *DomainService_Join_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *DomainService) List(ctx context.Context, flt domain.Filter) ([]domain.Domain, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Filter) ([]domain.Domain, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Filter) []domain.Domain); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DomainService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt domain.Filter
func (_e *DomainService_Expecter) List(ctx interface{}, flt interface{}) *DomainService_List_Call {
	return &DomainService_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *DomainService_List_Call) Run(run func(ctx context.Context, flt domain.Filter)) *DomainService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Filter))
	})
	return _c
}

func (_c *DomainService_List_Call) Return(_a0 []domain.Domain, _a1 error) *DomainService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DomainService_List_Call) RunAndReturn(run func(context.Context, domain.Filter) ([]domain.Domain, error)) *DomainService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListJoinableOrgsByDomain provides a mock function with given fields: ctx, email
func (_m *DomainService) ListJoinableOrgsByDomain(ctx context.Context, email string) ([]string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListJoinableOrgsByDomain")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainService_ListJoinableOrgsByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJoinableOrgsByDomain'
type DomainService_ListJoinableOrgsByDomain_Call struct {
	*mock.Call
}

// ListJoinableOrgsByDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *DomainService_Expecter) ListJoinableOrgsByDomain(ctx interface{}, email interface{}) *DomainService_ListJoinableOrgsByDomain_Call {
	return &DomainService_ListJoinableOrgsByDomain_Call{Call: _e.mock.On("ListJoinableOrgsByDomain", ctx, email)}
}

func (_c *DomainService_ListJoinableOrgsByDomain_Call) Run(run func(ctx context.Context, email string)) *DomainService_ListJoinableOrgsByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainService_ListJoinableOrgsByDomain_Call) Return(_a0 []string, _a1 error) *DomainService_ListJoinableOrgsByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DomainService_ListJoinableOrgsByDomain_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *DomainService_ListJoinableOrgsByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyDomain provides a mock function with given fields: ctx, id
func (_m *DomainService) VerifyDomain(ctx context.Context, id string) (domain.Domain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyDomain")
	}

	var r0 domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Domain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DomainService_VerifyDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyDomain'
type DomainService_VerifyDomain_Call struct {
	*mock.Call
}

// VerifyDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DomainService_Expecter) VerifyDomain(ctx interface{}, id interface{}) *DomainService_VerifyDomain_Call {
	return &DomainService_VerifyDomain_Call{Call: _e.mock.On("VerifyDomain", ctx, id)}
}

func (_c *DomainService_VerifyDomain_Call) Run(run func(ctx context.Context, id string)) *DomainService_VerifyDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DomainService_VerifyDomain_Call) Return(_a0 domain.Domain, _a1 error) *DomainService_VerifyDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DomainService_VerifyDomain_Call) RunAndReturn(run func(context.Context, string) (domain.Domain, error)) *DomainService_VerifyDomain_Call {
	_c.Call.Return(run)
	return _c
}

// NewDomainService creates a new instance of DomainService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomainService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DomainService {
	mock := &DomainService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
