// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	orgserviceuser "github.com/raystack/frontier/core/aggregates/orgserviceuser"
	mock "github.com/stretchr/testify/mock"

	rql "github.com/raystack/salt/rql"
)

// OrgServiceUserService is an autogenerated mock type for the OrgServiceUserService type
type OrgServiceUserService struct {
	mock.Mock
}

type OrgServiceUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrgServiceUserService) EXPECT() *OrgServiceUserService_Expecter {
	return &OrgServiceUserService_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, orgID, query
func (_m *OrgServiceUserService) Search(ctx context.Context, orgID string, query *rql.Query) (orgserviceuser.OrganizationServiceUsers, error) {
	ret := _m.Called(ctx, orgID, query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 orgserviceuser.OrganizationServiceUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *rql.Query) (orgserviceuser.OrganizationServiceUsers, error)); ok {
		return rf(ctx, orgID, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *rql.Query) orgserviceuser.OrganizationServiceUsers); ok {
		r0 = rf(ctx, orgID, query)
	} else {
		r0 = ret.Get(0).(orgserviceuser.OrganizationServiceUsers)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *rql.Query) error); ok {
		r1 = rf(ctx, orgID, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgServiceUserService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type OrgServiceUserService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - query *rql.Query
func (_e *OrgServiceUserService_Expecter) Search(ctx interface{}, orgID interface{}, query interface{}) *OrgServiceUserService_Search_Call {
	return &OrgServiceUserService_Search_Call{Call: _e.mock.On("Search", ctx, orgID, query)}
}

func (_c *OrgServiceUserService_Search_Call) Run(run func(ctx context.Context, orgID string, query *rql.Query)) *OrgServiceUserService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*rql.Query))
	})
	return _c
}

func (_c *OrgServiceUserService_Search_Call) Return(_a0 orgserviceuser.OrganizationServiceUsers, _a1 error) *OrgServiceUserService_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgServiceUserService_Search_Call) RunAndReturn(run func(context.Context, string, *rql.Query) (orgserviceuser.OrganizationServiceUsers, error)) *OrgServiceUserService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrgServiceUserService creates a new instance of OrgServiceUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgServiceUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgServiceUserService {
	mock := &OrgServiceUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
