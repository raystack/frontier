// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/raystack/frontier/core/authenticate/session"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

type SessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionService) EXPECT() *SessionService_Expecter {
	return &SessionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, userID, metadata
func (_m *SessionService) Create(ctx context.Context, userID string, metadata session.SessionMetadata) (*session.Session, error) {
	ret := _m.Called(ctx, userID, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, session.SessionMetadata) (*session.Session, error)); ok {
		return rf(ctx, userID, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, session.SessionMetadata) *session.Session); ok {
		r0 = rf(ctx, userID, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, session.SessionMetadata) error); ok {
		r1 = rf(ctx, userID, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - metadata session.SessionMetadata
func (_e *SessionService_Expecter) Create(ctx interface{}, userID interface{}, metadata interface{}) *SessionService_Create_Call {
	return &SessionService_Create_Call{Call: _e.mock.On("Create", ctx, userID, metadata)}
}

func (_c *SessionService_Create_Call) Run(run func(ctx context.Context, userID string, metadata session.SessionMetadata)) *SessionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(session.SessionMetadata))
	})
	return _c
}

func (_c *SessionService_Create_Call) Return(_a0 *session.Session, _a1 error) *SessionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_Create_Call) RunAndReturn(run func(context.Context, string, session.SessionMetadata) (*session.Session, error)) *SessionService_Create_Call {
	_c.Call.Return(run)
	return _c
}


// SessionService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *SessionService_Expecter) Delete(ctx interface{}, sessionID interface{}) *SessionService_Delete_Call {
	return &SessionService_Delete_Call{Call: _e.mock.On("Delete", ctx, sessionID)}
}

func (_c *SessionService_Delete_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionService_Delete_Call) Return(_a0 error) *SessionService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SessionService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractFromContext provides a mock function with given fields: ctx
func (_m *SessionService) ExtractFromContext(ctx context.Context) (*session.Session, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExtractFromContext")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*session.Session, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *session.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_ExtractFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractFromContext'
type SessionService_ExtractFromContext_Call struct {
	*mock.Call
}

// ExtractFromContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SessionService_Expecter) ExtractFromContext(ctx interface{}) *SessionService_ExtractFromContext_Call {
	return &SessionService_ExtractFromContext_Call{Call: _e.mock.On("ExtractFromContext", ctx)}
}

func (_c *SessionService_ExtractFromContext_Call) Run(run func(ctx context.Context)) *SessionService_ExtractFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SessionService_ExtractFromContext_Call) Return(_a0 *session.Session, _a1 error) *SessionService_ExtractFromContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_ExtractFromContext_Call) RunAndReturn(run func(context.Context) (*session.Session, error)) *SessionService_ExtractFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSessions provides a mock function with given fields: ctx, userID
func (_m *SessionService) ListSessions(ctx context.Context, userID string) ([]*session.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 []*session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*session.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*session.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_ListSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSessions'
type SessionService_ListSessions_Call struct {
	*mock.Call
}

// ListSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *SessionService_Expecter) ListSessions(ctx interface{}, userID interface{}) *SessionService_ListSessions_Call {
	return &SessionService_ListSessions_Call{Call: _e.mock.On("ListSessions", ctx, userID)}
}

func (_c *SessionService_ListSessions_Call) Run(run func(ctx context.Context, userID string)) *SessionService_ListSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionService_ListSessions_Call) Return(_a0 []*session.Session, _a1 error) *SessionService_ListSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_ListSessions_Call) RunAndReturn(run func(context.Context, string) ([]*session.Session, error)) *SessionService_ListSessions_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, sessionID
func (_m *SessionService) Refresh(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type SessionService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *SessionService_Expecter) Refresh(ctx interface{}, sessionID interface{}) *SessionService_Refresh_Call {
	return &SessionService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, sessionID)}
}

func (_c *SessionService_Refresh_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionService_Refresh_Call) Return(_a0 error) *SessionService_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_Refresh_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SessionService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, sessionID
func (_m *SessionService) Delete(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: ctx, sessionID
func (_m *SessionService) GetSession(ctx context.Context, sessionID uuid.UUID) (*session.Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*session.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *session.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type SessionService_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *SessionService_Expecter) GetSession(ctx interface{}, sessionID interface{}) *SessionService_GetSession_Call {
	return &SessionService_GetSession_Call{Call: _e.mock.On("GetSession", ctx, sessionID)}
}

func (_c *SessionService_GetSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionService_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionService_GetSession_Call) Return(_a0 *session.Session, _a1 error) *SessionService_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_GetSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*session.Session, error)) *SessionService_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// PingSession provides a mock function with given fields: ctx, sessionID, metadata
func (_m *SessionService) PingSession(ctx context.Context, sessionID uuid.UUID, metadata session.SessionMetadata) error {
	ret := _m.Called(ctx, sessionID, metadata)

	if len(ret) == 0 {
		panic("no return value specified for PingSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, session.SessionMetadata) error); ok {
		r0 = rf(ctx, sessionID, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionService_PingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingSession'
type SessionService_PingSession_Call struct {
	*mock.Call
}

// PingSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - metadata session.SessionMetadata
func (_e *SessionService_Expecter) PingSession(ctx interface{}, sessionID interface{}, metadata interface{}) *SessionService_PingSession_Call {
	return &SessionService_PingSession_Call{Call: _e.mock.On("PingSession", ctx, sessionID, metadata)}
}

func (_c *SessionService_PingSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, metadata session.SessionMetadata)) *SessionService_PingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(session.SessionMetadata))
	})
	return _c
}

func (_c *SessionService_PingSession_Call) Return(_a0 error) *SessionService_PingSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_PingSession_Call) RunAndReturn(run func(context.Context, uuid.UUID, session.SessionMetadata) error) *SessionService_PingSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
