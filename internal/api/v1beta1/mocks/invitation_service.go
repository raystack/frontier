// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	invitation "github.com/raystack/frontier/core/invitation"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// InvitationService is an autogenerated mock type for the InvitationService type
type InvitationService struct {
	mock.Mock
}

type InvitationService_Expecter struct {
	mock *mock.Mock
}

func (_m *InvitationService) EXPECT() *InvitationService_Expecter {
	return &InvitationService_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: ctx, id
func (_m *InvitationService) Accept(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvitationService_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type InvitationService_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *InvitationService_Expecter) Accept(ctx interface{}, id interface{}) *InvitationService_Accept_Call {
	return &InvitationService_Accept_Call{Call: _e.mock.On("Accept", ctx, id)}
}

func (_c *InvitationService_Accept_Call) Run(run func(ctx context.Context, id uuid.UUID)) *InvitationService_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *InvitationService_Accept_Call) Return(_a0 error) *InvitationService_Accept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvitationService_Accept_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *InvitationService_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, inv
func (_m *InvitationService) Create(ctx context.Context, inv invitation.Invitation) (invitation.Invitation, error) {
	ret := _m.Called(ctx, inv)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Invitation) (invitation.Invitation, error)); ok {
		return rf(ctx, inv)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Invitation) invitation.Invitation); ok {
		r0 = rf(ctx, inv)
	} else {
		r0 = ret.Get(0).(invitation.Invitation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, invitation.Invitation) error); ok {
		r1 = rf(ctx, inv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvitationService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type InvitationService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - inv invitation.Invitation
func (_e *InvitationService_Expecter) Create(ctx interface{}, inv interface{}) *InvitationService_Create_Call {
	return &InvitationService_Create_Call{Call: _e.mock.On("Create", ctx, inv)}
}

func (_c *InvitationService_Create_Call) Run(run func(ctx context.Context, inv invitation.Invitation)) *InvitationService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invitation.Invitation))
	})
	return _c
}

func (_c *InvitationService_Create_Call) Return(_a0 invitation.Invitation, _a1 error) *InvitationService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvitationService_Create_Call) RunAndReturn(run func(context.Context, invitation.Invitation) (invitation.Invitation, error)) *InvitationService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *InvitationService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvitationService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type InvitationService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *InvitationService_Expecter) Delete(ctx interface{}, id interface{}) *InvitationService_Delete_Call {
	return &InvitationService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *InvitationService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *InvitationService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *InvitationService_Delete_Call) Return(_a0 error) *InvitationService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvitationService_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *InvitationService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *InvitationService) Get(ctx context.Context, id uuid.UUID) (invitation.Invitation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (invitation.Invitation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) invitation.Invitation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(invitation.Invitation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvitationService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type InvitationService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *InvitationService_Expecter) Get(ctx interface{}, id interface{}) *InvitationService_Get_Call {
	return &InvitationService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *InvitationService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *InvitationService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *InvitationService_Get_Call) Return(_a0 invitation.Invitation, _a1 error) *InvitationService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvitationService_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (invitation.Invitation, error)) *InvitationService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *InvitationService) List(ctx context.Context, filter invitation.Filter) ([]invitation.Invitation, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Filter) ([]invitation.Invitation, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invitation.Filter) []invitation.Invitation); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invitation.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, invitation.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvitationService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InvitationService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter invitation.Filter
func (_e *InvitationService_Expecter) List(ctx interface{}, filter interface{}) *InvitationService_List_Call {
	return &InvitationService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *InvitationService_List_Call) Run(run func(ctx context.Context, filter invitation.Filter)) *InvitationService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invitation.Filter))
	})
	return _c
}

func (_c *InvitationService_List_Call) Return(_a0 []invitation.Invitation, _a1 error) *InvitationService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvitationService_List_Call) RunAndReturn(run func(context.Context, invitation.Filter) ([]invitation.Invitation, error)) *InvitationService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, userID
func (_m *InvitationService) ListByUser(ctx context.Context, userID string) ([]invitation.Invitation, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []invitation.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]invitation.Invitation, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []invitation.Invitation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invitation.Invitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvitationService_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type InvitationService_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *InvitationService_Expecter) ListByUser(ctx interface{}, userID interface{}) *InvitationService_ListByUser_Call {
	return &InvitationService_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID)}
}

func (_c *InvitationService_ListByUser_Call) Run(run func(ctx context.Context, userID string)) *InvitationService_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InvitationService_ListByUser_Call) Return(_a0 []invitation.Invitation, _a1 error) *InvitationService_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvitationService_ListByUser_Call) RunAndReturn(run func(context.Context, string) ([]invitation.Invitation, error)) *InvitationService_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvitationService creates a new instance of InvitationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvitationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvitationService {
	mock := &InvitationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
