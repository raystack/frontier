// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metaschema "github.com/raystack/frontier/core/metaschema"
	metadata "github.com/raystack/frontier/pkg/metadata"

	mock "github.com/stretchr/testify/mock"
)

// MetaSchemaService is an autogenerated mock type for the MetaSchemaService type
type MetaSchemaService struct {
	mock.Mock
}

type MetaSchemaService_Expecter struct {
	mock *mock.Mock
}

func (_m *MetaSchemaService) EXPECT() *MetaSchemaService_Expecter {
	return &MetaSchemaService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, toCreate
func (_m *MetaSchemaService) Create(ctx context.Context, toCreate metaschema.MetaSchema) (metaschema.MetaSchema, error) {
	ret := _m.Called(ctx, toCreate)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 metaschema.MetaSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metaschema.MetaSchema) (metaschema.MetaSchema, error)); ok {
		return rf(ctx, toCreate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metaschema.MetaSchema) metaschema.MetaSchema); ok {
		r0 = rf(ctx, toCreate)
	} else {
		r0 = ret.Get(0).(metaschema.MetaSchema)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metaschema.MetaSchema) error); ok {
		r1 = rf(ctx, toCreate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaSchemaService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MetaSchemaService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - toCreate metaschema.MetaSchema
func (_e *MetaSchemaService_Expecter) Create(ctx interface{}, toCreate interface{}) *MetaSchemaService_Create_Call {
	return &MetaSchemaService_Create_Call{Call: _e.mock.On("Create", ctx, toCreate)}
}

func (_c *MetaSchemaService_Create_Call) Run(run func(ctx context.Context, toCreate metaschema.MetaSchema)) *MetaSchemaService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metaschema.MetaSchema))
	})
	return _c
}

func (_c *MetaSchemaService_Create_Call) Return(_a0 metaschema.MetaSchema, _a1 error) *MetaSchemaService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaSchemaService_Create_Call) RunAndReturn(run func(context.Context, metaschema.MetaSchema) (metaschema.MetaSchema, error)) *MetaSchemaService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MetaSchemaService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetaSchemaService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MetaSchemaService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MetaSchemaService_Expecter) Delete(ctx interface{}, id interface{}) *MetaSchemaService_Delete_Call {
	return &MetaSchemaService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MetaSchemaService_Delete_Call) Run(run func(ctx context.Context, id string)) *MetaSchemaService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetaSchemaService_Delete_Call) Return(_a0 error) *MetaSchemaService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaSchemaService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MetaSchemaService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MetaSchemaService) Get(ctx context.Context, id string) (metaschema.MetaSchema, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 metaschema.MetaSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (metaschema.MetaSchema, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) metaschema.MetaSchema); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(metaschema.MetaSchema)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaSchemaService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MetaSchemaService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MetaSchemaService_Expecter) Get(ctx interface{}, id interface{}) *MetaSchemaService_Get_Call {
	return &MetaSchemaService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MetaSchemaService_Get_Call) Run(run func(ctx context.Context, id string)) *MetaSchemaService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetaSchemaService_Get_Call) Return(_a0 metaschema.MetaSchema, _a1 error) *MetaSchemaService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaSchemaService_Get_Call) RunAndReturn(run func(context.Context, string) (metaschema.MetaSchema, error)) *MetaSchemaService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MetaSchemaService) List(ctx context.Context) ([]metaschema.MetaSchema, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []metaschema.MetaSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]metaschema.MetaSchema, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []metaschema.MetaSchema); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]metaschema.MetaSchema)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaSchemaService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MetaSchemaService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetaSchemaService_Expecter) List(ctx interface{}) *MetaSchemaService_List_Call {
	return &MetaSchemaService_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MetaSchemaService_List_Call) Run(run func(ctx context.Context)) *MetaSchemaService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetaSchemaService_List_Call) Return(_a0 []metaschema.MetaSchema, _a1 error) *MetaSchemaService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaSchemaService_List_Call) RunAndReturn(run func(context.Context) ([]metaschema.MetaSchema, error)) *MetaSchemaService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, toUpdate
func (_m *MetaSchemaService) Update(ctx context.Context, id string, toUpdate metaschema.MetaSchema) (metaschema.MetaSchema, error) {
	ret := _m.Called(ctx, id, toUpdate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 metaschema.MetaSchema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metaschema.MetaSchema) (metaschema.MetaSchema, error)); ok {
		return rf(ctx, id, toUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metaschema.MetaSchema) metaschema.MetaSchema); ok {
		r0 = rf(ctx, id, toUpdate)
	} else {
		r0 = ret.Get(0).(metaschema.MetaSchema)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metaschema.MetaSchema) error); ok {
		r1 = rf(ctx, id, toUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaSchemaService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MetaSchemaService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - toUpdate metaschema.MetaSchema
func (_e *MetaSchemaService_Expecter) Update(ctx interface{}, id interface{}, toUpdate interface{}) *MetaSchemaService_Update_Call {
	return &MetaSchemaService_Update_Call{Call: _e.mock.On("Update", ctx, id, toUpdate)}
}

func (_c *MetaSchemaService_Update_Call) Run(run func(ctx context.Context, id string, toUpdate metaschema.MetaSchema)) *MetaSchemaService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metaschema.MetaSchema))
	})
	return _c
}

func (_c *MetaSchemaService_Update_Call) Return(_a0 metaschema.MetaSchema, _a1 error) *MetaSchemaService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaSchemaService_Update_Call) RunAndReturn(run func(context.Context, string, metaschema.MetaSchema) (metaschema.MetaSchema, error)) *MetaSchemaService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: schema, data
func (_m *MetaSchemaService) Validate(schema metadata.Metadata, data string) error {
	ret := _m.Called(schema, data)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.Metadata, string) error); ok {
		r0 = rf(schema, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetaSchemaService_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MetaSchemaService_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - schema metadata.Metadata
//   - data string
func (_e *MetaSchemaService_Expecter) Validate(schema interface{}, data interface{}) *MetaSchemaService_Validate_Call {
	return &MetaSchemaService_Validate_Call{Call: _e.mock.On("Validate", schema, data)}
}

func (_c *MetaSchemaService_Validate_Call) Run(run func(schema metadata.Metadata, data string)) *MetaSchemaService_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metadata.Metadata), args[1].(string))
	})
	return _c
}

func (_c *MetaSchemaService_Validate_Call) Return(_a0 error) *MetaSchemaService_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaSchemaService_Validate_Call) RunAndReturn(run func(metadata.Metadata, string) error) *MetaSchemaService_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetaSchemaService creates a new instance of MetaSchemaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaSchemaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaSchemaService {
	mock := &MetaSchemaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
