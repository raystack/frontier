// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	group "github.com/raystack/frontier/core/group"
	mock "github.com/stretchr/testify/mock"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

type GroupService_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupService) EXPECT() *GroupService_Expecter {
	return &GroupService_Expecter{mock: &_m.Mock}
}

// AddUsers provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupService) AddUsers(ctx context.Context, groupID string, userID []string) error {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_AddUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUsers'
type GroupService_AddUsers_Call struct {
	*mock.Call
}

// AddUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - userID []string
func (_e *GroupService_Expecter) AddUsers(ctx interface{}, groupID interface{}, userID interface{}) *GroupService_AddUsers_Call {
	return &GroupService_AddUsers_Call{Call: _e.mock.On("AddUsers", ctx, groupID, userID)}
}

func (_c *GroupService_AddUsers_Call) Run(run func(ctx context.Context, groupID string, userID []string)) *GroupService_AddUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *GroupService_AddUsers_Call) Return(_a0 error) *GroupService_AddUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_AddUsers_Call) RunAndReturn(run func(context.Context, string, []string) error) *GroupService_AddUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, grp
func (_m *GroupService) Create(ctx context.Context, grp group.Group) (group.Group, error) {
	ret := _m.Called(ctx, grp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) (group.Group, error)); ok {
		return rf(ctx, grp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GroupService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - grp group.Group
func (_e *GroupService_Expecter) Create(ctx interface{}, grp interface{}) *GroupService_Create_Call {
	return &GroupService_Create_Call{Call: _e.mock.On("Create", ctx, grp)}
}

func (_c *GroupService_Create_Call) Run(run func(ctx context.Context, grp group.Group)) *GroupService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *GroupService_Create_Call) Return(_a0 group.Group, _a1 error) *GroupService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_Create_Call) RunAndReturn(run func(context.Context, group.Group) (group.Group, error)) *GroupService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *GroupService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GroupService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *GroupService_Expecter) Delete(ctx interface{}, id interface{}) *GroupService_Delete_Call {
	return &GroupService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *GroupService_Delete_Call) Run(run func(ctx context.Context, id string)) *GroupService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_Delete_Call) Return(_a0 error) *GroupService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *GroupService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function with given fields: ctx, id
func (_m *GroupService) Disable(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type GroupService_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *GroupService_Expecter) Disable(ctx interface{}, id interface{}) *GroupService_Disable_Call {
	return &GroupService_Disable_Call{Call: _e.mock.On("Disable", ctx, id)}
}

func (_c *GroupService_Disable_Call) Run(run func(ctx context.Context, id string)) *GroupService_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_Disable_Call) Return(_a0 error) *GroupService_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_Disable_Call) RunAndReturn(run func(context.Context, string) error) *GroupService_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function with given fields: ctx, id
func (_m *GroupService) Enable(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type GroupService_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *GroupService_Expecter) Enable(ctx interface{}, id interface{}) *GroupService_Enable_Call {
	return &GroupService_Enable_Call{Call: _e.mock.On("Enable", ctx, id)}
}

func (_c *GroupService_Enable_Call) Run(run func(ctx context.Context, id string)) *GroupService_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_Enable_Call) Return(_a0 error) *GroupService_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_Enable_Call) RunAndReturn(run func(context.Context, string) error) *GroupService_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *GroupService) Get(ctx context.Context, id string) (group.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (group.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) group.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GroupService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *GroupService_Expecter) Get(ctx interface{}, id interface{}) *GroupService_Get_Call {
	return &GroupService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *GroupService_Get_Call) Run(run func(ctx context.Context, id string)) *GroupService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupService_Get_Call) Return(_a0 group.Group, _a1 error) *GroupService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_Get_Call) RunAndReturn(run func(context.Context, string) (group.Group, error)) *GroupService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *GroupService) List(ctx context.Context, flt group.Filter) ([]group.Group, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Filter) ([]group.Group, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Filter) []group.Group); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type GroupService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt group.Filter
func (_e *GroupService_Expecter) List(ctx interface{}, flt interface{}) *GroupService_List_Call {
	return &GroupService_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *GroupService_List_Call) Run(run func(ctx context.Context, flt group.Filter)) *GroupService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Filter))
	})
	return _c
}

func (_c *GroupService_List_Call) Return(_a0 []group.Group, _a1 error) *GroupService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_List_Call) RunAndReturn(run func(context.Context, group.Filter) ([]group.Group, error)) *GroupService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, principalId, principalType, flt
func (_m *GroupService) ListByUser(ctx context.Context, principalId string, principalType string, flt group.Filter) ([]group.Group, error) {
	ret := _m.Called(ctx, principalId, principalType, flt)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, group.Filter) ([]group.Group, error)); ok {
		return rf(ctx, principalId, principalType, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, group.Filter) []group.Group); ok {
		r0 = rf(ctx, principalId, principalType, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, group.Filter) error); ok {
		r1 = rf(ctx, principalId, principalType, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type GroupService_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - principalId string
//   - principalType string
//   - flt group.Filter
func (_e *GroupService_Expecter) ListByUser(ctx interface{}, principalId interface{}, principalType interface{}, flt interface{}) *GroupService_ListByUser_Call {
	return &GroupService_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, principalId, principalType, flt)}
}

func (_c *GroupService_ListByUser_Call) Run(run func(ctx context.Context, principalId string, principalType string, flt group.Filter)) *GroupService_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(group.Filter))
	})
	return _c
}

func (_c *GroupService_ListByUser_Call) Return(_a0 []group.Group, _a1 error) *GroupService_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_ListByUser_Call) RunAndReturn(run func(context.Context, string, string, group.Filter) ([]group.Group, error)) *GroupService_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUsers provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupService) RemoveUsers(ctx context.Context, groupID string, userID []string) error {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupService_RemoveUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUsers'
type GroupService_RemoveUsers_Call struct {
	*mock.Call
}

// RemoveUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - userID []string
func (_e *GroupService_Expecter) RemoveUsers(ctx interface{}, groupID interface{}, userID interface{}) *GroupService_RemoveUsers_Call {
	return &GroupService_RemoveUsers_Call{Call: _e.mock.On("RemoveUsers", ctx, groupID, userID)}
}

func (_c *GroupService_RemoveUsers_Call) Run(run func(ctx context.Context, groupID string, userID []string)) *GroupService_RemoveUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *GroupService_RemoveUsers_Call) Return(_a0 error) *GroupService_RemoveUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GroupService_RemoveUsers_Call) RunAndReturn(run func(context.Context, string, []string) error) *GroupService_RemoveUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, grp
func (_m *GroupService) Update(ctx context.Context, grp group.Group) (group.Group, error) {
	ret := _m.Called(ctx, grp)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) (group.Group, error)); ok {
		return rf(ctx, grp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.Group) group.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type GroupService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - grp group.Group
func (_e *GroupService_Expecter) Update(ctx interface{}, grp interface{}) *GroupService_Update_Call {
	return &GroupService_Update_Call{Call: _e.mock.On("Update", ctx, grp)}
}

func (_c *GroupService_Update_Call) Run(run func(ctx context.Context, grp group.Group)) *GroupService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(group.Group))
	})
	return _c
}

func (_c *GroupService_Update_Call) Return(_a0 group.Group, _a1 error) *GroupService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupService_Update_Call) RunAndReturn(run func(context.Context, group.Group) (group.Group, error)) *GroupService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
