// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	invoice "github.com/raystack/frontier/billing/invoice"
	mock "github.com/stretchr/testify/mock"
)

// InvoiceService is an autogenerated mock type for the InvoiceService type
type InvoiceService struct {
	mock.Mock
}

type InvoiceService_Expecter struct {
	mock *mock.Mock
}

func (_m *InvoiceService) EXPECT() *InvoiceService_Expecter {
	return &InvoiceService_Expecter{mock: &_m.Mock}
}

// GetUpcoming provides a mock function with given fields: ctx, customerID
func (_m *InvoiceService) GetUpcoming(ctx context.Context, customerID string) (invoice.Invoice, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcoming")
	}

	var r0 invoice.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (invoice.Invoice, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) invoice.Invoice); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(invoice.Invoice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvoiceService_GetUpcoming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpcoming'
type InvoiceService_GetUpcoming_Call struct {
	*mock.Call
}

// GetUpcoming is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
func (_e *InvoiceService_Expecter) GetUpcoming(ctx interface{}, customerID interface{}) *InvoiceService_GetUpcoming_Call {
	return &InvoiceService_GetUpcoming_Call{Call: _e.mock.On("GetUpcoming", ctx, customerID)}
}

func (_c *InvoiceService_GetUpcoming_Call) Run(run func(ctx context.Context, customerID string)) *InvoiceService_GetUpcoming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InvoiceService_GetUpcoming_Call) Return(_a0 invoice.Invoice, _a1 error) *InvoiceService_GetUpcoming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvoiceService_GetUpcoming_Call) RunAndReturn(run func(context.Context, string) (invoice.Invoice, error)) *InvoiceService_GetUpcoming_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *InvoiceService) List(ctx context.Context, filter invoice.Filter) ([]invoice.Invoice, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []invoice.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invoice.Filter) ([]invoice.Invoice, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invoice.Filter) []invoice.Invoice); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoice.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, invoice.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvoiceService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InvoiceService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter invoice.Filter
func (_e *InvoiceService_Expecter) List(ctx interface{}, filter interface{}) *InvoiceService_List_Call {
	return &InvoiceService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *InvoiceService_List_Call) Run(run func(ctx context.Context, filter invoice.Filter)) *InvoiceService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invoice.Filter))
	})
	return _c
}

func (_c *InvoiceService_List_Call) Return(_a0 []invoice.Invoice, _a1 error) *InvoiceService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvoiceService_List_Call) RunAndReturn(run func(context.Context, invoice.Filter) ([]invoice.Invoice, error)) *InvoiceService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, filter
func (_m *InvoiceService) ListAll(ctx context.Context, filter invoice.Filter) ([]invoice.Invoice, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []invoice.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, invoice.Filter) ([]invoice.Invoice, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, invoice.Filter) []invoice.Invoice); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoice.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, invoice.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvoiceService_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type InvoiceService_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter invoice.Filter
func (_e *InvoiceService_Expecter) ListAll(ctx interface{}, filter interface{}) *InvoiceService_ListAll_Call {
	return &InvoiceService_ListAll_Call{Call: _e.mock.On("ListAll", ctx, filter)}
}

func (_c *InvoiceService_ListAll_Call) Run(run func(ctx context.Context, filter invoice.Filter)) *InvoiceService_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(invoice.Filter))
	})
	return _c
}

func (_c *InvoiceService_ListAll_Call) Return(_a0 []invoice.Invoice, _a1 error) *InvoiceService_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InvoiceService_ListAll_Call) RunAndReturn(run func(context.Context, invoice.Filter) ([]invoice.Invoice, error)) *InvoiceService_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerCreditOverdraftInvoices provides a mock function with given fields: ctx
func (_m *InvoiceService) TriggerCreditOverdraftInvoices(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TriggerCreditOverdraftInvoices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvoiceService_TriggerCreditOverdraftInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerCreditOverdraftInvoices'
type InvoiceService_TriggerCreditOverdraftInvoices_Call struct {
	*mock.Call
}

// TriggerCreditOverdraftInvoices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *InvoiceService_Expecter) TriggerCreditOverdraftInvoices(ctx interface{}) *InvoiceService_TriggerCreditOverdraftInvoices_Call {
	return &InvoiceService_TriggerCreditOverdraftInvoices_Call{Call: _e.mock.On("TriggerCreditOverdraftInvoices", ctx)}
}

func (_c *InvoiceService_TriggerCreditOverdraftInvoices_Call) Run(run func(ctx context.Context)) *InvoiceService_TriggerCreditOverdraftInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *InvoiceService_TriggerCreditOverdraftInvoices_Call) Return(_a0 error) *InvoiceService_TriggerCreditOverdraftInvoices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvoiceService_TriggerCreditOverdraftInvoices_Call) RunAndReturn(run func(context.Context) error) *InvoiceService_TriggerCreditOverdraftInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvoiceService creates a new instance of InvoiceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoiceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvoiceService {
	mock := &InvoiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
