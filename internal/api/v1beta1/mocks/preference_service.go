// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	preference "github.com/raystack/frontier/core/preference"
	mock "github.com/stretchr/testify/mock"
)

// PreferenceService is an autogenerated mock type for the PreferenceService type
type PreferenceService struct {
	mock.Mock
}

type PreferenceService_Expecter struct {
	mock *mock.Mock
}

func (_m *PreferenceService) EXPECT() *PreferenceService_Expecter {
	return &PreferenceService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *PreferenceService) Create(ctx context.Context, _a1 preference.Preference) (preference.Preference, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 preference.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, preference.Preference) (preference.Preference, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, preference.Preference) preference.Preference); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(preference.Preference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, preference.Preference) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreferenceService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PreferenceService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 preference.Preference
func (_e *PreferenceService_Expecter) Create(ctx interface{}, _a1 interface{}) *PreferenceService_Create_Call {
	return &PreferenceService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *PreferenceService_Create_Call) Run(run func(ctx context.Context, _a1 preference.Preference)) *PreferenceService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(preference.Preference))
	})
	return _c
}

func (_c *PreferenceService_Create_Call) Return(_a0 preference.Preference, _a1 error) *PreferenceService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PreferenceService_Create_Call) RunAndReturn(run func(context.Context, preference.Preference) (preference.Preference, error)) *PreferenceService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Describe provides a mock function with given fields: ctx
func (_m *PreferenceService) Describe(ctx context.Context) []preference.Trait {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Describe")
	}

	var r0 []preference.Trait
	if rf, ok := ret.Get(0).(func(context.Context) []preference.Trait); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]preference.Trait)
		}
	}

	return r0
}

// PreferenceService_Describe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Describe'
type PreferenceService_Describe_Call struct {
	*mock.Call
}

// Describe is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PreferenceService_Expecter) Describe(ctx interface{}) *PreferenceService_Describe_Call {
	return &PreferenceService_Describe_Call{Call: _e.mock.On("Describe", ctx)}
}

func (_c *PreferenceService_Describe_Call) Run(run func(ctx context.Context)) *PreferenceService_Describe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PreferenceService_Describe_Call) Return(_a0 []preference.Trait) *PreferenceService_Describe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PreferenceService_Describe_Call) RunAndReturn(run func(context.Context) []preference.Trait) *PreferenceService_Describe_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *PreferenceService) List(ctx context.Context, filter preference.Filter) ([]preference.Preference, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []preference.Preference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, preference.Filter) ([]preference.Preference, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, preference.Filter) []preference.Preference); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]preference.Preference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, preference.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreferenceService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PreferenceService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter preference.Filter
func (_e *PreferenceService_Expecter) List(ctx interface{}, filter interface{}) *PreferenceService_List_Call {
	return &PreferenceService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *PreferenceService_List_Call) Run(run func(ctx context.Context, filter preference.Filter)) *PreferenceService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(preference.Filter))
	})
	return _c
}

func (_c *PreferenceService_List_Call) Return(_a0 []preference.Preference, _a1 error) *PreferenceService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PreferenceService_List_Call) RunAndReturn(run func(context.Context, preference.Filter) ([]preference.Preference, error)) *PreferenceService_List_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPlatformPreferences provides a mock function with given fields: ctx
func (_m *PreferenceService) LoadPlatformPreferences(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadPlatformPreferences")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreferenceService_LoadPlatformPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPlatformPreferences'
type PreferenceService_LoadPlatformPreferences_Call struct {
	*mock.Call
}

// LoadPlatformPreferences is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PreferenceService_Expecter) LoadPlatformPreferences(ctx interface{}) *PreferenceService_LoadPlatformPreferences_Call {
	return &PreferenceService_LoadPlatformPreferences_Call{Call: _e.mock.On("LoadPlatformPreferences", ctx)}
}

func (_c *PreferenceService_LoadPlatformPreferences_Call) Run(run func(ctx context.Context)) *PreferenceService_LoadPlatformPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PreferenceService_LoadPlatformPreferences_Call) Return(_a0 map[string]string, _a1 error) *PreferenceService_LoadPlatformPreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PreferenceService_LoadPlatformPreferences_Call) RunAndReturn(run func(context.Context) (map[string]string, error)) *PreferenceService_LoadPlatformPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// NewPreferenceService creates a new instance of PreferenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPreferenceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PreferenceService {
	mock := &PreferenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
