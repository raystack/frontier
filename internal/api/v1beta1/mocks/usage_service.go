// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	usage "github.com/raystack/frontier/billing/usage"
	mock "github.com/stretchr/testify/mock"
)

// UsageService is an autogenerated mock type for the UsageService type
type UsageService struct {
	mock.Mock
}

type UsageService_Expecter struct {
	mock *mock.Mock
}

func (_m *UsageService) EXPECT() *UsageService_Expecter {
	return &UsageService_Expecter{mock: &_m.Mock}
}

// Report provides a mock function with given fields: ctx, usages
func (_m *UsageService) Report(ctx context.Context, usages []usage.Usage) error {
	ret := _m.Called(ctx, usages)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []usage.Usage) error); ok {
		r0 = rf(ctx, usages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsageService_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type UsageService_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - ctx context.Context
//   - usages []usage.Usage
func (_e *UsageService_Expecter) Report(ctx interface{}, usages interface{}) *UsageService_Report_Call {
	return &UsageService_Report_Call{Call: _e.mock.On("Report", ctx, usages)}
}

func (_c *UsageService_Report_Call) Run(run func(ctx context.Context, usages []usage.Usage)) *UsageService_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]usage.Usage))
	})
	return _c
}

func (_c *UsageService_Report_Call) Return(_a0 error) *UsageService_Report_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsageService_Report_Call) RunAndReturn(run func(context.Context, []usage.Usage) error) *UsageService_Report_Call {
	_c.Call.Return(run)
	return _c
}

// Revert provides a mock function with given fields: ctx, accountID, usageID, amount
func (_m *UsageService) Revert(ctx context.Context, accountID string, usageID string, amount int64) error {
	ret := _m.Called(ctx, accountID, usageID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Revert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, accountID, usageID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsageService_Revert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revert'
type UsageService_Revert_Call struct {
	*mock.Call
}

// Revert is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
//   - usageID string
//   - amount int64
func (_e *UsageService_Expecter) Revert(ctx interface{}, accountID interface{}, usageID interface{}, amount interface{}) *UsageService_Revert_Call {
	return &UsageService_Revert_Call{Call: _e.mock.On("Revert", ctx, accountID, usageID, amount)}
}

func (_c *UsageService_Revert_Call) Run(run func(ctx context.Context, accountID string, usageID string, amount int64)) *UsageService_Revert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *UsageService_Revert_Call) Return(_a0 error) *UsageService_Revert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsageService_Revert_Call) RunAndReturn(run func(context.Context, string, string, int64) error) *UsageService_Revert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsageService creates a new instance of UsageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsageService {
	mock := &UsageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
