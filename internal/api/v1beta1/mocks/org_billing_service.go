// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	orgbilling "github.com/raystack/frontier/core/aggregates/orgbilling"
	mock "github.com/stretchr/testify/mock"

	rql "github.com/raystack/salt/rql"
)

// OrgBillingService is an autogenerated mock type for the OrgBillingService type
type OrgBillingService struct {
	mock.Mock
}

type OrgBillingService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrgBillingService) EXPECT() *OrgBillingService_Expecter {
	return &OrgBillingService_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: ctx
func (_m *OrgBillingService) Export(ctx context.Context) ([]byte, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OrgBillingService_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type OrgBillingService_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrgBillingService_Expecter) Export(ctx interface{}) *OrgBillingService_Export_Call {
	return &OrgBillingService_Export_Call{Call: _e.mock.On("Export", ctx)}
}

func (_c *OrgBillingService_Export_Call) Run(run func(ctx context.Context)) *OrgBillingService_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OrgBillingService_Export_Call) Return(_a0 []byte, _a1 string, _a2 error) *OrgBillingService_Export_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OrgBillingService_Export_Call) RunAndReturn(run func(context.Context) ([]byte, string, error)) *OrgBillingService_Export_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query
func (_m *OrgBillingService) Search(ctx context.Context, query *rql.Query) (orgbilling.OrgBilling, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 orgbilling.OrgBilling
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) (orgbilling.OrgBilling, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) orgbilling.OrgBilling); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(orgbilling.OrgBilling)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rql.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgBillingService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type OrgBillingService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query *rql.Query
func (_e *OrgBillingService_Expecter) Search(ctx interface{}, query interface{}) *OrgBillingService_Search_Call {
	return &OrgBillingService_Search_Call{Call: _e.mock.On("Search", ctx, query)}
}

func (_c *OrgBillingService_Search_Call) Run(run func(ctx context.Context, query *rql.Query)) *OrgBillingService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rql.Query))
	})
	return _c
}

func (_c *OrgBillingService_Search_Call) Return(_a0 orgbilling.OrgBilling, _a1 error) *OrgBillingService_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgBillingService_Search_Call) RunAndReturn(run func(context.Context, *rql.Query) (orgbilling.OrgBilling, error)) *OrgBillingService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrgBillingService creates a new instance of OrgBillingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgBillingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgBillingService {
	mock := &OrgBillingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
