// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	relation "github.com/raystack/frontier/core/relation"
	mock "github.com/stretchr/testify/mock"

	resource "github.com/raystack/frontier/core/resource"
)

// ResourceService is an autogenerated mock type for the ResourceService type
type ResourceService struct {
	mock.Mock
}

type ResourceService_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceService) EXPECT() *ResourceService_Expecter {
	return &ResourceService_Expecter{mock: &_m.Mock}
}

// BatchCheck provides a mock function with given fields: ctx, checks
func (_m *ResourceService) BatchCheck(ctx context.Context, checks []resource.Check) ([]relation.CheckPair, error) {
	ret := _m.Called(ctx, checks)

	if len(ret) == 0 {
		panic("no return value specified for BatchCheck")
	}

	var r0 []relation.CheckPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []resource.Check) ([]relation.CheckPair, error)); ok {
		return rf(ctx, checks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []resource.Check) []relation.CheckPair); ok {
		r0 = rf(ctx, checks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relation.CheckPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []resource.Check) error); ok {
		r1 = rf(ctx, checks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_BatchCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCheck'
type ResourceService_BatchCheck_Call struct {
	*mock.Call
}

// BatchCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - checks []resource.Check
func (_e *ResourceService_Expecter) BatchCheck(ctx interface{}, checks interface{}) *ResourceService_BatchCheck_Call {
	return &ResourceService_BatchCheck_Call{Call: _e.mock.On("BatchCheck", ctx, checks)}
}

func (_c *ResourceService_BatchCheck_Call) Run(run func(ctx context.Context, checks []resource.Check)) *ResourceService_BatchCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]resource.Check))
	})
	return _c
}

func (_c *ResourceService_BatchCheck_Call) Return(_a0 []relation.CheckPair, _a1 error) *ResourceService_BatchCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_BatchCheck_Call) RunAndReturn(run func(context.Context, []resource.Check) ([]relation.CheckPair, error)) *ResourceService_BatchCheck_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAuthz provides a mock function with given fields: ctx, check
func (_m *ResourceService) CheckAuthz(ctx context.Context, check resource.Check) (bool, error) {
	ret := _m.Called(ctx, check)

	if len(ret) == 0 {
		panic("no return value specified for CheckAuthz")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Check) (bool, error)); ok {
		return rf(ctx, check)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Check) bool); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Check) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_CheckAuthz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAuthz'
type ResourceService_CheckAuthz_Call struct {
	*mock.Call
}

// CheckAuthz is a helper method to define mock.On call
//   - ctx context.Context
//   - check resource.Check
func (_e *ResourceService_Expecter) CheckAuthz(ctx interface{}, check interface{}) *ResourceService_CheckAuthz_Call {
	return &ResourceService_CheckAuthz_Call{Call: _e.mock.On("CheckAuthz", ctx, check)}
}

func (_c *ResourceService_CheckAuthz_Call) Run(run func(ctx context.Context, check resource.Check)) *ResourceService_CheckAuthz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Check))
	})
	return _c
}

func (_c *ResourceService_CheckAuthz_Call) Return(_a0 bool, _a1 error) *ResourceService_CheckAuthz_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_CheckAuthz_Call) RunAndReturn(run func(context.Context, resource.Check) (bool, error)) *ResourceService_CheckAuthz_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *ResourceService) Create(ctx context.Context, _a1 resource.Resource) (resource.Resource, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) (resource.Resource, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) resource.Resource); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(resource.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Resource) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResourceService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 resource.Resource
func (_e *ResourceService_Expecter) Create(ctx interface{}, _a1 interface{}) *ResourceService_Create_Call {
	return &ResourceService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *ResourceService_Create_Call) Run(run func(ctx context.Context, _a1 resource.Resource)) *ResourceService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Resource))
	})
	return _c
}

func (_c *ResourceService_Create_Call) Return(_a0 resource.Resource, _a1 error) *ResourceService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_Create_Call) RunAndReturn(run func(context.Context, resource.Resource) (resource.Resource, error)) *ResourceService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, id
func (_m *ResourceService) Delete(ctx context.Context, namespace string, id string) error {
	ret := _m.Called(ctx, namespace, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - id string
func (_e *ResourceService_Expecter) Delete(ctx interface{}, namespace interface{}, id interface{}) *ResourceService_Delete_Call {
	return &ResourceService_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, id)}
}

func (_c *ResourceService_Delete_Call) Run(run func(ctx context.Context, namespace string, id string)) *ResourceService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourceService_Delete_Call) Return(_a0 error) *ResourceService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceService_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *ResourceService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *ResourceService) Get(ctx context.Context, id string) (resource.Resource, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (resource.Resource, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) resource.Resource); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(resource.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ResourceService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ResourceService_Expecter) Get(ctx interface{}, id interface{}) *ResourceService_Get_Call {
	return &ResourceService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ResourceService_Get_Call) Run(run func(ctx context.Context, id string)) *ResourceService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourceService_Get_Call) Return(_a0 resource.Resource, _a1 error) *ResourceService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_Get_Call) RunAndReturn(run func(context.Context, string) (resource.Resource, error)) *ResourceService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *ResourceService) List(ctx context.Context, flt resource.Filter) ([]resource.Resource, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Filter) ([]resource.Resource, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Filter) []resource.Resource); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resource.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt resource.Filter
func (_e *ResourceService_Expecter) List(ctx interface{}, flt interface{}) *ResourceService_List_Call {
	return &ResourceService_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *ResourceService_List_Call) Run(run func(ctx context.Context, flt resource.Filter)) *ResourceService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Filter))
	})
	return _c
}

func (_c *ResourceService_List_Call) Return(_a0 []resource.Resource, _a1 error) *ResourceService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_List_Call) RunAndReturn(run func(context.Context, resource.Filter) ([]resource.Resource, error)) *ResourceService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *ResourceService) Update(ctx context.Context, _a1 resource.Resource) (resource.Resource, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) (resource.Resource, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) resource.Resource); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(resource.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Resource) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ResourceService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 resource.Resource
func (_e *ResourceService_Expecter) Update(ctx interface{}, _a1 interface{}) *ResourceService_Update_Call {
	return &ResourceService_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *ResourceService_Update_Call) Run(run func(ctx context.Context, _a1 resource.Resource)) *ResourceService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Resource))
	})
	return _c
}

func (_c *ResourceService_Update_Call) Return(_a0 resource.Resource, _a1 error) *ResourceService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_Update_Call) RunAndReturn(run func(context.Context, resource.Resource) (resource.Resource, error)) *ResourceService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceService creates a new instance of ResourceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceService {
	mock := &ResourceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
