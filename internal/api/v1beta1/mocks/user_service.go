// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	rql "github.com/raystack/salt/rql"
	mock "github.com/stretchr/testify/mock"

	user "github.com/raystack/frontier/core/user"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *UserService) Create(ctx context.Context, _a1 user.User) (user.User, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) (user.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.User) user.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 user.User
func (_e *UserService_Expecter) Create(ctx interface{}, _a1 interface{}) *UserService_Create_Call {
	return &UserService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *UserService_Create_Call) Run(run func(ctx context.Context, _a1 user.User)) *UserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.User))
	})
	return _c
}

func (_c *UserService_Create_Call) Return(_a0 user.User, _a1 error) *UserService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Create_Call) RunAndReturn(run func(context.Context, user.User) (user.User, error)) *UserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function with given fields: ctx, id
func (_m *UserService) Disable(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type UserService_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) Disable(ctx interface{}, id interface{}) *UserService_Disable_Call {
	return &UserService_Disable_Call{Call: _e.mock.On("Disable", ctx, id)}
}

func (_c *UserService_Disable_Call) Run(run func(ctx context.Context, id string)) *UserService_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_Disable_Call) Return(_a0 error) *UserService_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Disable_Call) RunAndReturn(run func(context.Context, string) error) *UserService_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function with given fields: ctx, id
func (_m *UserService) Enable(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type UserService_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) Enable(ctx interface{}, id interface{}) *UserService_Enable_Call {
	return &UserService_Enable_Call{Call: _e.mock.On("Enable", ctx, id)}
}

func (_c *UserService_Enable_Call) Run(run func(ctx context.Context, id string)) *UserService_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_Enable_Call) Return(_a0 error) *UserService_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Enable_Call) RunAndReturn(run func(context.Context, string) error) *UserService_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// Export provides a mock function with given fields: ctx
func (_m *UserService) Export(ctx context.Context) ([]byte, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserService_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type UserService_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserService_Expecter) Export(ctx interface{}) *UserService_Export_Call {
	return &UserService_Export_Call{Call: _e.mock.On("Export", ctx)}
}

func (_c *UserService_Export_Call) Run(run func(ctx context.Context)) *UserService_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_Export_Call) Return(_a0 []byte, _a1 string, _a2 error) *UserService_Export_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserService_Export_Call) RunAndReturn(run func(context.Context) ([]byte, string, error)) *UserService_Export_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetByEmail(ctx context.Context, email string) (user.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserService_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserService_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserService_GetByEmail_Call {
	return &UserService_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserService_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserService_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetByEmail_Call) Return(_a0 user.User, _a1 error) *UserService_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (user.User, error)) *UserService_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserService) GetByID(ctx context.Context, id string) (user.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) GetByID(ctx interface{}, id interface{}) *UserService_GetByID_Call {
	return &UserService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UserService_GetByID_Call) Run(run func(ctx context.Context, id string)) *UserService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetByID_Call) Return(_a0 user.User, _a1 error) *UserService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByID_Call) RunAndReturn(run func(context.Context, string) (user.User, error)) *UserService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: ctx, userIDs
func (_m *UserService) GetByIDs(ctx context.Context, userIDs []string) ([]user.User, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]user.User, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []user.User); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type UserService_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userIDs []string
func (_e *UserService_Expecter) GetByIDs(ctx interface{}, userIDs interface{}) *UserService_GetByIDs_Call {
	return &UserService_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, userIDs)}
}

func (_c *UserService_GetByIDs_Call) Run(run func(ctx context.Context, userIDs []string)) *UserService_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *UserService_GetByIDs_Call) Return(_a0 []user.User, _a1 error) *UserService_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByIDs_Call) RunAndReturn(run func(context.Context, []string) ([]user.User, error)) *UserService_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// IsSudo provides a mock function with given fields: ctx, id, permissionName
func (_m *UserService) IsSudo(ctx context.Context, id string, permissionName string) (bool, error) {
	ret := _m.Called(ctx, id, permissionName)

	if len(ret) == 0 {
		panic("no return value specified for IsSudo")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, id, permissionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, id, permissionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, permissionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_IsSudo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSudo'
type UserService_IsSudo_Call struct {
	*mock.Call
}

// IsSudo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - permissionName string
func (_e *UserService_Expecter) IsSudo(ctx interface{}, id interface{}, permissionName interface{}) *UserService_IsSudo_Call {
	return &UserService_IsSudo_Call{Call: _e.mock.On("IsSudo", ctx, id, permissionName)}
}

func (_c *UserService_IsSudo_Call) Run(run func(ctx context.Context, id string, permissionName string)) *UserService_IsSudo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_IsSudo_Call) Return(_a0 bool, _a1 error) *UserService_IsSudo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_IsSudo_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *UserService_IsSudo_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, flt
func (_m *UserService) List(ctx context.Context, flt user.Filter) ([]user.User, error) {
	ret := _m.Called(ctx, flt)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Filter) ([]user.User, error)); ok {
		return rf(ctx, flt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.Filter) []user.User); ok {
		r0 = rf(ctx, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.Filter) error); ok {
		r1 = rf(ctx, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type UserService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - flt user.Filter
func (_e *UserService_Expecter) List(ctx interface{}, flt interface{}) *UserService_List_Call {
	return &UserService_List_Call{Call: _e.mock.On("List", ctx, flt)}
}

func (_c *UserService_List_Call) Run(run func(ctx context.Context, flt user.Filter)) *UserService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.Filter))
	})
	return _c
}

func (_c *UserService_List_Call) Return(_a0 []user.User, _a1 error) *UserService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_List_Call) RunAndReturn(run func(context.Context, user.Filter) ([]user.User, error)) *UserService_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByGroup provides a mock function with given fields: ctx, groupID, roleFilter
func (_m *UserService) ListByGroup(ctx context.Context, groupID string, roleFilter string) ([]user.User, error) {
	ret := _m.Called(ctx, groupID, roleFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListByGroup")
	}

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]user.User, error)); ok {
		return rf(ctx, groupID, roleFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []user.User); ok {
		r0 = rf(ctx, groupID, roleFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, roleFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListByGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByGroup'
type UserService_ListByGroup_Call struct {
	*mock.Call
}

// ListByGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - roleFilter string
func (_e *UserService_Expecter) ListByGroup(ctx interface{}, groupID interface{}, roleFilter interface{}) *UserService_ListByGroup_Call {
	return &UserService_ListByGroup_Call{Call: _e.mock.On("ListByGroup", ctx, groupID, roleFilter)}
}

func (_c *UserService_ListByGroup_Call) Run(run func(ctx context.Context, groupID string, roleFilter string)) *UserService_ListByGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_ListByGroup_Call) Return(_a0 []user.User, _a1 error) *UserService_ListByGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ListByGroup_Call) RunAndReturn(run func(context.Context, string, string) ([]user.User, error)) *UserService_ListByGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOrg provides a mock function with given fields: ctx, orgID, roleFilter
func (_m *UserService) ListByOrg(ctx context.Context, orgID string, roleFilter string) ([]user.User, error) {
	ret := _m.Called(ctx, orgID, roleFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListByOrg")
	}

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]user.User, error)); ok {
		return rf(ctx, orgID, roleFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []user.User); ok {
		r0 = rf(ctx, orgID, roleFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgID, roleFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListByOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOrg'
type UserService_ListByOrg_Call struct {
	*mock.Call
}

// ListByOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - roleFilter string
func (_e *UserService_Expecter) ListByOrg(ctx interface{}, orgID interface{}, roleFilter interface{}) *UserService_ListByOrg_Call {
	return &UserService_ListByOrg_Call{Call: _e.mock.On("ListByOrg", ctx, orgID, roleFilter)}
}

func (_c *UserService_ListByOrg_Call) Run(run func(ctx context.Context, orgID string, roleFilter string)) *UserService_ListByOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_ListByOrg_Call) Return(_a0 []user.User, _a1 error) *UserService_ListByOrg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ListByOrg_Call) RunAndReturn(run func(context.Context, string, string) ([]user.User, error)) *UserService_ListByOrg_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, _a1
func (_m *UserService) Search(ctx context.Context, _a1 *rql.Query) (user.SearchUserResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 user.SearchUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) (user.SearchUserResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) user.SearchUserResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(user.SearchUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rql.Query) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type UserService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *rql.Query
func (_e *UserService_Expecter) Search(ctx interface{}, _a1 interface{}) *UserService_Search_Call {
	return &UserService_Search_Call{Call: _e.mock.On("Search", ctx, _a1)}
}

func (_c *UserService_Search_Call) Run(run func(ctx context.Context, _a1 *rql.Query)) *UserService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rql.Query))
	})
	return _c
}

func (_c *UserService_Search_Call) Return(_a0 user.SearchUserResponse, _a1 error) *UserService_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Search_Call) RunAndReturn(run func(context.Context, *rql.Query) (user.SearchUserResponse, error)) *UserService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Sudo provides a mock function with given fields: ctx, id, relationName
func (_m *UserService) Sudo(ctx context.Context, id string, relationName string) error {
	ret := _m.Called(ctx, id, relationName)

	if len(ret) == 0 {
		panic("no return value specified for Sudo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, relationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Sudo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sudo'
type UserService_Sudo_Call struct {
	*mock.Call
}

// Sudo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - relationName string
func (_e *UserService_Expecter) Sudo(ctx interface{}, id interface{}, relationName interface{}) *UserService_Sudo_Call {
	return &UserService_Sudo_Call{Call: _e.mock.On("Sudo", ctx, id, relationName)}
}

func (_c *UserService_Sudo_Call) Run(run func(ctx context.Context, id string, relationName string)) *UserService_Sudo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_Sudo_Call) Return(_a0 error) *UserService_Sudo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Sudo_Call) RunAndReturn(run func(context.Context, string, string) error) *UserService_Sudo_Call {
	_c.Call.Return(run)
	return _c
}

// UnSudo provides a mock function with given fields: ctx, id
func (_m *UserService) UnSudo(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnSudo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UnSudo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnSudo'
type UserService_UnSudo_Call struct {
	*mock.Call
}

// UnSudo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) UnSudo(ctx interface{}, id interface{}) *UserService_UnSudo_Call {
	return &UserService_UnSudo_Call{Call: _e.mock.On("UnSudo", ctx, id)}
}

func (_c *UserService_UnSudo_Call) Run(run func(ctx context.Context, id string)) *UserService_UnSudo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_UnSudo_Call) Return(_a0 error) *UserService_UnSudo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UnSudo_Call) RunAndReturn(run func(context.Context, string) error) *UserService_UnSudo_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, toUpdate
func (_m *UserService) Update(ctx context.Context, toUpdate user.User) (user.User, error) {
	ret := _m.Called(ctx, toUpdate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) (user.User, error)); ok {
		return rf(ctx, toUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.User) user.User); ok {
		r0 = rf(ctx, toUpdate)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.User) error); ok {
		r1 = rf(ctx, toUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - toUpdate user.User
func (_e *UserService_Expecter) Update(ctx interface{}, toUpdate interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", ctx, toUpdate)}
}

func (_c *UserService_Update_Call) Run(run func(ctx context.Context, toUpdate user.User)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.User))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 user.User, _a1 error) *UserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(context.Context, user.User) (user.User, error)) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
