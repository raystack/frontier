// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CascadeDeleter is an autogenerated mock type for the CascadeDeleter type
type CascadeDeleter struct {
	mock.Mock
}

type CascadeDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *CascadeDeleter) EXPECT() *CascadeDeleter_Expecter {
	return &CascadeDeleter_Expecter{mock: &_m.Mock}
}

// DeleteOrganization provides a mock function with given fields: ctx, id
func (_m *CascadeDeleter) DeleteOrganization(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CascadeDeleter_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type CascadeDeleter_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CascadeDeleter_Expecter) DeleteOrganization(ctx interface{}, id interface{}) *CascadeDeleter_DeleteOrganization_Call {
	return &CascadeDeleter_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", ctx, id)}
}

func (_c *CascadeDeleter_DeleteOrganization_Call) Run(run func(ctx context.Context, id string)) *CascadeDeleter_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CascadeDeleter_DeleteOrganization_Call) Return(_a0 error) *CascadeDeleter_DeleteOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CascadeDeleter_DeleteOrganization_Call) RunAndReturn(run func(context.Context, string) error) *CascadeDeleter_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, id
func (_m *CascadeDeleter) DeleteProject(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CascadeDeleter_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type CascadeDeleter_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CascadeDeleter_Expecter) DeleteProject(ctx interface{}, id interface{}) *CascadeDeleter_DeleteProject_Call {
	return &CascadeDeleter_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, id)}
}

func (_c *CascadeDeleter_DeleteProject_Call) Run(run func(ctx context.Context, id string)) *CascadeDeleter_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CascadeDeleter_DeleteProject_Call) Return(_a0 error) *CascadeDeleter_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CascadeDeleter_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *CascadeDeleter_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *CascadeDeleter) DeleteUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CascadeDeleter_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type CascadeDeleter_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *CascadeDeleter_Expecter) DeleteUser(ctx interface{}, userID interface{}) *CascadeDeleter_DeleteUser_Call {
	return &CascadeDeleter_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *CascadeDeleter_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *CascadeDeleter_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CascadeDeleter_DeleteUser_Call) Return(_a0 error) *CascadeDeleter_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CascadeDeleter_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *CascadeDeleter_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUsersFromOrg provides a mock function with given fields: ctx, orgID, userIDs
func (_m *CascadeDeleter) RemoveUsersFromOrg(ctx context.Context, orgID string, userIDs []string) error {
	ret := _m.Called(ctx, orgID, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUsersFromOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, orgID, userIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CascadeDeleter_RemoveUsersFromOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUsersFromOrg'
type CascadeDeleter_RemoveUsersFromOrg_Call struct {
	*mock.Call
}

// RemoveUsersFromOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - userIDs []string
func (_e *CascadeDeleter_Expecter) RemoveUsersFromOrg(ctx interface{}, orgID interface{}, userIDs interface{}) *CascadeDeleter_RemoveUsersFromOrg_Call {
	return &CascadeDeleter_RemoveUsersFromOrg_Call{Call: _e.mock.On("RemoveUsersFromOrg", ctx, orgID, userIDs)}
}

func (_c *CascadeDeleter_RemoveUsersFromOrg_Call) Run(run func(ctx context.Context, orgID string, userIDs []string)) *CascadeDeleter_RemoveUsersFromOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *CascadeDeleter_RemoveUsersFromOrg_Call) Return(_a0 error) *CascadeDeleter_RemoveUsersFromOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CascadeDeleter_RemoveUsersFromOrg_Call) RunAndReturn(run func(context.Context, string, []string) error) *CascadeDeleter_RemoveUsersFromOrg_Call {
	_c.Call.Return(run)
	return _c
}

// NewCascadeDeleter creates a new instance of CascadeDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCascadeDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CascadeDeleter {
	mock := &CascadeDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
