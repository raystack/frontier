// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	webhook "github.com/raystack/frontier/core/webhook"
)

// WebhookService is an autogenerated mock type for the WebhookService type
type WebhookService struct {
	mock.Mock
}

type WebhookService_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookService) EXPECT() *WebhookService_Expecter {
	return &WebhookService_Expecter{mock: &_m.Mock}
}

// CreateEndpoint provides a mock function with given fields: ctx, endpoint
func (_m *WebhookService) CreateEndpoint(ctx context.Context, endpoint webhook.Endpoint) (webhook.Endpoint, error) {
	ret := _m.Called(ctx, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpoint")
	}

	var r0 webhook.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Endpoint) (webhook.Endpoint, error)); ok {
		return rf(ctx, endpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Endpoint) webhook.Endpoint); ok {
		r0 = rf(ctx, endpoint)
	} else {
		r0 = ret.Get(0).(webhook.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webhook.Endpoint) error); ok {
		r1 = rf(ctx, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookService_CreateEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEndpoint'
type WebhookService_CreateEndpoint_Call struct {
	*mock.Call
}

// CreateEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint webhook.Endpoint
func (_e *WebhookService_Expecter) CreateEndpoint(ctx interface{}, endpoint interface{}) *WebhookService_CreateEndpoint_Call {
	return &WebhookService_CreateEndpoint_Call{Call: _e.mock.On("CreateEndpoint", ctx, endpoint)}
}

func (_c *WebhookService_CreateEndpoint_Call) Run(run func(ctx context.Context, endpoint webhook.Endpoint)) *WebhookService_CreateEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webhook.Endpoint))
	})
	return _c
}

func (_c *WebhookService_CreateEndpoint_Call) Return(_a0 webhook.Endpoint, _a1 error) *WebhookService_CreateEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookService_CreateEndpoint_Call) RunAndReturn(run func(context.Context, webhook.Endpoint) (webhook.Endpoint, error)) *WebhookService_CreateEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEndpoint provides a mock function with given fields: ctx, id
func (_m *WebhookService) DeleteEndpoint(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookService_DeleteEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEndpoint'
type WebhookService_DeleteEndpoint_Call struct {
	*mock.Call
}

// DeleteEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *WebhookService_Expecter) DeleteEndpoint(ctx interface{}, id interface{}) *WebhookService_DeleteEndpoint_Call {
	return &WebhookService_DeleteEndpoint_Call{Call: _e.mock.On("DeleteEndpoint", ctx, id)}
}

func (_c *WebhookService_DeleteEndpoint_Call) Run(run func(ctx context.Context, id string)) *WebhookService_DeleteEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WebhookService_DeleteEndpoint_Call) Return(_a0 error) *WebhookService_DeleteEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhookService_DeleteEndpoint_Call) RunAndReturn(run func(context.Context, string) error) *WebhookService_DeleteEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// ListEndpoints provides a mock function with given fields: ctx, filter
func (_m *WebhookService) ListEndpoints(ctx context.Context, filter webhook.EndpointFilter) ([]webhook.Endpoint, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpoints")
	}

	var r0 []webhook.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webhook.EndpointFilter) ([]webhook.Endpoint, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webhook.EndpointFilter) []webhook.Endpoint); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webhook.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webhook.EndpointFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookService_ListEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEndpoints'
type WebhookService_ListEndpoints_Call struct {
	*mock.Call
}

// ListEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - filter webhook.EndpointFilter
func (_e *WebhookService_Expecter) ListEndpoints(ctx interface{}, filter interface{}) *WebhookService_ListEndpoints_Call {
	return &WebhookService_ListEndpoints_Call{Call: _e.mock.On("ListEndpoints", ctx, filter)}
}

func (_c *WebhookService_ListEndpoints_Call) Run(run func(ctx context.Context, filter webhook.EndpointFilter)) *WebhookService_ListEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webhook.EndpointFilter))
	})
	return _c
}

func (_c *WebhookService_ListEndpoints_Call) Return(_a0 []webhook.Endpoint, _a1 error) *WebhookService_ListEndpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookService_ListEndpoints_Call) RunAndReturn(run func(context.Context, webhook.EndpointFilter) ([]webhook.Endpoint, error)) *WebhookService_ListEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEndpoint provides a mock function with given fields: ctx, endpoint
func (_m *WebhookService) UpdateEndpoint(ctx context.Context, endpoint webhook.Endpoint) (webhook.Endpoint, error) {
	ret := _m.Called(ctx, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpoint")
	}

	var r0 webhook.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Endpoint) (webhook.Endpoint, error)); ok {
		return rf(ctx, endpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Endpoint) webhook.Endpoint); ok {
		r0 = rf(ctx, endpoint)
	} else {
		r0 = ret.Get(0).(webhook.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webhook.Endpoint) error); ok {
		r1 = rf(ctx, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookService_UpdateEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEndpoint'
type WebhookService_UpdateEndpoint_Call struct {
	*mock.Call
}

// UpdateEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint webhook.Endpoint
func (_e *WebhookService_Expecter) UpdateEndpoint(ctx interface{}, endpoint interface{}) *WebhookService_UpdateEndpoint_Call {
	return &WebhookService_UpdateEndpoint_Call{Call: _e.mock.On("UpdateEndpoint", ctx, endpoint)}
}

func (_c *WebhookService_UpdateEndpoint_Call) Run(run func(ctx context.Context, endpoint webhook.Endpoint)) *WebhookService_UpdateEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webhook.Endpoint))
	})
	return _c
}

func (_c *WebhookService_UpdateEndpoint_Call) Return(_a0 webhook.Endpoint, _a1 error) *WebhookService_UpdateEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookService_UpdateEndpoint_Call) RunAndReturn(run func(context.Context, webhook.Endpoint) (webhook.Endpoint, error)) *WebhookService_UpdateEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhookService creates a new instance of WebhookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookService {
	mock := &WebhookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
