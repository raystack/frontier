// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	schema "github.com/raystack/frontier/internal/bootstrap/schema"
	mock "github.com/stretchr/testify/mock"
)

// BootstrapService is an autogenerated mock type for the BootstrapService type
type BootstrapService struct {
	mock.Mock
}

type BootstrapService_Expecter struct {
	mock *mock.Mock
}

func (_m *BootstrapService) EXPECT() *BootstrapService_Expecter {
	return &BootstrapService_Expecter{mock: &_m.Mock}
}

// AppendSchema provides a mock function with given fields: ctx, definition
func (_m *BootstrapService) AppendSchema(ctx context.Context, definition schema.ServiceDefinition) error {
	ret := _m.Called(ctx, definition)

	if len(ret) == 0 {
		panic("no return value specified for AppendSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.ServiceDefinition) error); ok {
		r0 = rf(ctx, definition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BootstrapService_AppendSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendSchema'
type BootstrapService_AppendSchema_Call struct {
	*mock.Call
}

// AppendSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - definition schema.ServiceDefinition
func (_e *BootstrapService_Expecter) AppendSchema(ctx interface{}, definition interface{}) *BootstrapService_AppendSchema_Call {
	return &BootstrapService_AppendSchema_Call{Call: _e.mock.On("AppendSchema", ctx, definition)}
}

func (_c *BootstrapService_AppendSchema_Call) Run(run func(ctx context.Context, definition schema.ServiceDefinition)) *BootstrapService_AppendSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(schema.ServiceDefinition))
	})
	return _c
}

func (_c *BootstrapService_AppendSchema_Call) Return(_a0 error) *BootstrapService_AppendSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BootstrapService_AppendSchema_Call) RunAndReturn(run func(context.Context, schema.ServiceDefinition) error) *BootstrapService_AppendSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewBootstrapService creates a new instance of BootstrapService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBootstrapService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BootstrapService {
	mock := &BootstrapService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
