// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	rql "github.com/raystack/salt/rql"
	mock "github.com/stretchr/testify/mock"

	userprojects "github.com/raystack/frontier/core/aggregates/userprojects"
)

// UserProjectsService is an autogenerated mock type for the UserProjectsService type
type UserProjectsService struct {
	mock.Mock
}

type UserProjectsService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProjectsService) EXPECT() *UserProjectsService_Expecter {
	return &UserProjectsService_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, userId, orgId, query
func (_m *UserProjectsService) Search(ctx context.Context, userId string, orgId string, query *rql.Query) (userprojects.UserProjects, error) {
	ret := _m.Called(ctx, userId, orgId, query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 userprojects.UserProjects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *rql.Query) (userprojects.UserProjects, error)); ok {
		return rf(ctx, userId, orgId, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *rql.Query) userprojects.UserProjects); ok {
		r0 = rf(ctx, userId, orgId, query)
	} else {
		r0 = ret.Get(0).(userprojects.UserProjects)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *rql.Query) error); ok {
		r1 = rf(ctx, userId, orgId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProjectsService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type UserProjectsService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - orgId string
//   - query *rql.Query
func (_e *UserProjectsService_Expecter) Search(ctx interface{}, userId interface{}, orgId interface{}, query interface{}) *UserProjectsService_Search_Call {
	return &UserProjectsService_Search_Call{Call: _e.mock.On("Search", ctx, userId, orgId, query)}
}

func (_c *UserProjectsService_Search_Call) Run(run func(ctx context.Context, userId string, orgId string, query *rql.Query)) *UserProjectsService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*rql.Query))
	})
	return _c
}

func (_c *UserProjectsService_Search_Call) Return(_a0 userprojects.UserProjects, _a1 error) *UserProjectsService_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProjectsService_Search_Call) RunAndReturn(run func(context.Context, string, string, *rql.Query) (userprojects.UserProjects, error)) *UserProjectsService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserProjectsService creates a new instance of UserProjectsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProjectsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProjectsService {
	mock := &UserProjectsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
