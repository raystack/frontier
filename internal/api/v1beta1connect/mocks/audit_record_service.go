// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	auditrecord "github.com/raystack/frontier/core/auditrecord"

	mock "github.com/stretchr/testify/mock"

	rql "github.com/raystack/salt/rql"
)

// AuditRecordService is an autogenerated mock type for the AuditRecordService type
type AuditRecordService struct {
	mock.Mock
}

type AuditRecordService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditRecordService) EXPECT() *AuditRecordService_Expecter {
	return &AuditRecordService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, record
func (_m *AuditRecordService) Create(ctx context.Context, record auditrecord.AuditRecord) (auditrecord.AuditRecord, bool, error) {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 auditrecord.AuditRecord
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, auditrecord.AuditRecord) (auditrecord.AuditRecord, bool, error)); ok {
		return rf(ctx, record)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auditrecord.AuditRecord) auditrecord.AuditRecord); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Get(0).(auditrecord.AuditRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auditrecord.AuditRecord) bool); ok {
		r1 = rf(ctx, record)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, auditrecord.AuditRecord) error); ok {
		r2 = rf(ctx, record)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuditRecordService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuditRecordService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - record auditrecord.AuditRecord
func (_e *AuditRecordService_Expecter) Create(ctx interface{}, record interface{}) *AuditRecordService_Create_Call {
	return &AuditRecordService_Create_Call{Call: _e.mock.On("Create", ctx, record)}
}

func (_c *AuditRecordService_Create_Call) Run(run func(ctx context.Context, record auditrecord.AuditRecord)) *AuditRecordService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auditrecord.AuditRecord))
	})
	return _c
}

func (_c *AuditRecordService_Create_Call) Return(_a0 auditrecord.AuditRecord, _a1 bool, _a2 error) *AuditRecordService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuditRecordService_Create_Call) RunAndReturn(run func(context.Context, auditrecord.AuditRecord) (auditrecord.AuditRecord, bool, error)) *AuditRecordService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, query
func (_m *AuditRecordService) List(ctx context.Context, query *rql.Query) (auditrecord.AuditRecordsList, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 auditrecord.AuditRecordsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) (auditrecord.AuditRecordsList, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rql.Query) auditrecord.AuditRecordsList); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(auditrecord.AuditRecordsList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rql.Query) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditRecordService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AuditRecordService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - query *rql.Query
func (_e *AuditRecordService_Expecter) List(ctx interface{}, query interface{}) *AuditRecordService_List_Call {
	return &AuditRecordService_List_Call{Call: _e.mock.On("List", ctx, query)}
}

func (_c *AuditRecordService_List_Call) Run(run func(ctx context.Context, query *rql.Query)) *AuditRecordService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rql.Query))
	})
	return _c
}

func (_c *AuditRecordService_List_Call) Return(_a0 auditrecord.AuditRecordsList, _a1 error) *AuditRecordService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditRecordService_List_Call) RunAndReturn(run func(context.Context, *rql.Query) (auditrecord.AuditRecordsList, error)) *AuditRecordService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditRecordService creates a new instance of AuditRecordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditRecordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditRecordService {
	mock := &AuditRecordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
