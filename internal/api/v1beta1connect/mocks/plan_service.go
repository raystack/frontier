// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	plan "github.com/raystack/frontier/billing/plan"
	mock "github.com/stretchr/testify/mock"
)

// PlanService is an autogenerated mock type for the PlanService type
type PlanService struct {
	mock.Mock
}

type PlanService_Expecter struct {
	mock *mock.Mock
}

func (_m *PlanService) EXPECT() *PlanService_Expecter {
	return &PlanService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *PlanService) Create(ctx context.Context, _a1 plan.Plan) (plan.Plan, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 plan.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, plan.Plan) (plan.Plan, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, plan.Plan) plan.Plan); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(plan.Plan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, plan.Plan) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlanService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PlanService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 plan.Plan
func (_e *PlanService_Expecter) Create(ctx interface{}, _a1 interface{}) *PlanService_Create_Call {
	return &PlanService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *PlanService_Create_Call) Run(run func(ctx context.Context, _a1 plan.Plan)) *PlanService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(plan.Plan))
	})
	return _c
}

func (_c *PlanService_Create_Call) Return(_a0 plan.Plan, _a1 error) *PlanService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlanService_Create_Call) RunAndReturn(run func(context.Context, plan.Plan) (plan.Plan, error)) *PlanService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PlanService) GetByID(ctx context.Context, id string) (plan.Plan, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 plan.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (plan.Plan, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) plan.Plan); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(plan.Plan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlanService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type PlanService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *PlanService_Expecter) GetByID(ctx interface{}, id interface{}) *PlanService_GetByID_Call {
	return &PlanService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *PlanService_GetByID_Call) Run(run func(ctx context.Context, id string)) *PlanService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PlanService_GetByID_Call) Return(_a0 plan.Plan, _a1 error) *PlanService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlanService_GetByID_Call) RunAndReturn(run func(context.Context, string) (plan.Plan, error)) *PlanService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *PlanService) List(ctx context.Context, filter plan.Filter) ([]plan.Plan, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []plan.Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, plan.Filter) ([]plan.Plan, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, plan.Filter) []plan.Plan); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plan.Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, plan.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlanService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PlanService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter plan.Filter
func (_e *PlanService_Expecter) List(ctx interface{}, filter interface{}) *PlanService_List_Call {
	return &PlanService_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *PlanService_List_Call) Run(run func(ctx context.Context, filter plan.Filter)) *PlanService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(plan.Filter))
	})
	return _c
}

func (_c *PlanService_List_Call) Return(_a0 []plan.Plan, _a1 error) *PlanService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlanService_List_Call) RunAndReturn(run func(context.Context, plan.Filter) ([]plan.Plan, error)) *PlanService_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPlans provides a mock function with given fields: ctx, planFile
func (_m *PlanService) UpsertPlans(ctx context.Context, planFile plan.File) error {
	ret := _m.Called(ctx, planFile)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPlans")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, plan.File) error); ok {
		r0 = rf(ctx, planFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlanService_UpsertPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPlans'
type PlanService_UpsertPlans_Call struct {
	*mock.Call
}

// UpsertPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - planFile plan.File
func (_e *PlanService_Expecter) UpsertPlans(ctx interface{}, planFile interface{}) *PlanService_UpsertPlans_Call {
	return &PlanService_UpsertPlans_Call{Call: _e.mock.On("UpsertPlans", ctx, planFile)}
}

func (_c *PlanService_UpsertPlans_Call) Run(run func(ctx context.Context, planFile plan.File)) *PlanService_UpsertPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(plan.File))
	})
	return _c
}

func (_c *PlanService_UpsertPlans_Call) Return(_a0 error) *PlanService_UpsertPlans_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlanService_UpsertPlans_Call) RunAndReturn(run func(context.Context, plan.File) error) *PlanService_UpsertPlans_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlanService creates a new instance of PlanService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlanService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlanService {
	mock := &PlanService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
