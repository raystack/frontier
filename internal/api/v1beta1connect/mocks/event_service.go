// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/raystack/frontier/core/event"
	mock "github.com/stretchr/testify/mock"
)

// EventService is an autogenerated mock type for the EventService type
type EventService struct {
	mock.Mock
}

type EventService_Expecter struct {
	mock *mock.Mock
}

func (_m *EventService) EXPECT() *EventService_Expecter {
	return &EventService_Expecter{mock: &_m.Mock}
}

// BillingWebhook provides a mock function with given fields: ctx, _a1
func (_m *EventService) BillingWebhook(ctx context.Context, _a1 event.ProviderWebhookEvent) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BillingWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.ProviderWebhookEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventService_BillingWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingWebhook'
type EventService_BillingWebhook_Call struct {
	*mock.Call
}

// BillingWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 event.ProviderWebhookEvent
func (_e *EventService_Expecter) BillingWebhook(ctx interface{}, _a1 interface{}) *EventService_BillingWebhook_Call {
	return &EventService_BillingWebhook_Call{Call: _e.mock.On("BillingWebhook", ctx, _a1)}
}

func (_c *EventService_BillingWebhook_Call) Run(run func(ctx context.Context, _a1 event.ProviderWebhookEvent)) *EventService_BillingWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.ProviderWebhookEvent))
	})
	return _c
}

func (_c *EventService_BillingWebhook_Call) Return(_a0 error) *EventService_BillingWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventService_BillingWebhook_Call) RunAndReturn(run func(context.Context, event.ProviderWebhookEvent) error) *EventService_BillingWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventService creates a new instance of EventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventService {
	mock := &EventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
