// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authenticate "github.com/raystack/frontier/core/authenticate"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// FlowRepository is an autogenerated mock type for the FlowRepository type
type FlowRepository struct {
	mock.Mock
}

type FlowRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowRepository) EXPECT() *FlowRepository_Expecter {
	return &FlowRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *FlowRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FlowRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FlowRepository_Expecter) Delete(ctx interface{}, id interface{}) *FlowRepository_Delete_Call {
	return &FlowRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *FlowRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FlowRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FlowRepository_Delete_Call) Return(_a0 error) *FlowRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *FlowRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredFlows provides a mock function with given fields: ctx
func (_m *FlowRepository) DeleteExpiredFlows(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredFlows")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowRepository_DeleteExpiredFlows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredFlows'
type FlowRepository_DeleteExpiredFlows_Call struct {
	*mock.Call
}

// DeleteExpiredFlows is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FlowRepository_Expecter) DeleteExpiredFlows(ctx interface{}) *FlowRepository_DeleteExpiredFlows_Call {
	return &FlowRepository_DeleteExpiredFlows_Call{Call: _e.mock.On("DeleteExpiredFlows", ctx)}
}

func (_c *FlowRepository_DeleteExpiredFlows_Call) Run(run func(ctx context.Context)) *FlowRepository_DeleteExpiredFlows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FlowRepository_DeleteExpiredFlows_Call) Return(_a0 error) *FlowRepository_DeleteExpiredFlows_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowRepository_DeleteExpiredFlows_Call) RunAndReturn(run func(context.Context) error) *FlowRepository_DeleteExpiredFlows_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *FlowRepository) Get(ctx context.Context, id uuid.UUID) (*authenticate.Flow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *authenticate.Flow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*authenticate.Flow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *authenticate.Flow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authenticate.Flow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FlowRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FlowRepository_Expecter) Get(ctx interface{}, id interface{}) *FlowRepository_Get_Call {
	return &FlowRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *FlowRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FlowRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FlowRepository_Get_Call) Return(_a0 *authenticate.Flow, _a1 error) *FlowRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*authenticate.Flow, error)) *FlowRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, flow
func (_m *FlowRepository) Set(ctx context.Context, flow *authenticate.Flow) error {
	ret := _m.Called(ctx, flow)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *authenticate.Flow) error); ok {
		r0 = rf(ctx, flow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type FlowRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - flow *authenticate.Flow
func (_e *FlowRepository_Expecter) Set(ctx interface{}, flow interface{}) *FlowRepository_Set_Call {
	return &FlowRepository_Set_Call{Call: _e.mock.On("Set", ctx, flow)}
}

func (_c *FlowRepository_Set_Call) Run(run func(ctx context.Context, flow *authenticate.Flow)) *FlowRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*authenticate.Flow))
	})
	return _c
}

func (_c *FlowRepository_Set_Call) Return(_a0 error) *FlowRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlowRepository_Set_Call) RunAndReturn(run func(context.Context, *authenticate.Flow) error) *FlowRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlowRepository creates a new instance of FlowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowRepository {
	mock := &FlowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
