// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	jwk "github.com/lestrrat-go/jwx/v2/jwk"
	mock "github.com/stretchr/testify/mock"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

type TokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenService) EXPECT() *TokenService_Expecter {
	return &TokenService_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: subjectID, metadata
func (_m *TokenService) Build(subjectID string, metadata map[string]string) ([]byte, error) {
	ret := _m.Called(subjectID, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) ([]byte, error)); ok {
		return rf(subjectID, metadata)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string) []byte); ok {
		r0 = rf(subjectID, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(subjectID, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type TokenService_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - subjectID string
//   - metadata map[string]string
func (_e *TokenService_Expecter) Build(subjectID interface{}, metadata interface{}) *TokenService_Build_Call {
	return &TokenService_Build_Call{Call: _e.mock.On("Build", subjectID, metadata)}
}

func (_c *TokenService_Build_Call) Run(run func(subjectID string, metadata map[string]string)) *TokenService_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *TokenService_Build_Call) Return(_a0 []byte, _a1 error) *TokenService_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_Build_Call) RunAndReturn(run func(string, map[string]string) ([]byte, error)) *TokenService_Build_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicKeySet provides a mock function with given fields:
func (_m *TokenService) GetPublicKeySet() jwk.Set {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKeySet")
	}

	var r0 jwk.Set
	if rf, ok := ret.Get(0).(func() jwk.Set); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwk.Set)
		}
	}

	return r0
}

// TokenService_GetPublicKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKeySet'
type TokenService_GetPublicKeySet_Call struct {
	*mock.Call
}

// GetPublicKeySet is a helper method to define mock.On call
func (_e *TokenService_Expecter) GetPublicKeySet() *TokenService_GetPublicKeySet_Call {
	return &TokenService_GetPublicKeySet_Call{Call: _e.mock.On("GetPublicKeySet")}
}

func (_c *TokenService_GetPublicKeySet_Call) Run(run func()) *TokenService_GetPublicKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenService_GetPublicKeySet_Call) Return(_a0 jwk.Set) *TokenService_GetPublicKeySet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenService_GetPublicKeySet_Call) RunAndReturn(run func() jwk.Set) *TokenService_GetPublicKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: ctx, userToken
func (_m *TokenService) Parse(ctx context.Context, userToken []byte) (string, map[string]interface{}, error) {
	ret := _m.Called(ctx, userToken)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 string
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (string, map[string]interface{}, error)); ok {
		return rf(ctx, userToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) string); ok {
		r0 = rf(ctx, userToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) map[string]interface{}); ok {
		r1 = rf(ctx, userToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte) error); ok {
		r2 = rf(ctx, userToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenService_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type TokenService_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - ctx context.Context
//   - userToken []byte
func (_e *TokenService_Expecter) Parse(ctx interface{}, userToken interface{}) *TokenService_Parse_Call {
	return &TokenService_Parse_Call{Call: _e.mock.On("Parse", ctx, userToken)}
}

func (_c *TokenService_Parse_Call) Run(run func(ctx context.Context, userToken []byte)) *TokenService_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *TokenService_Parse_Call) Return(_a0 string, _a1 map[string]interface{}, _a2 error) *TokenService_Parse_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TokenService_Parse_Call) RunAndReturn(run func(context.Context, []byte) (string, map[string]interface{}, error)) *TokenService_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
