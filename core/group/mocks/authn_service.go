// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authenticate "github.com/raystack/frontier/core/authenticate"

	mock "github.com/stretchr/testify/mock"
)

// AuthnService is an autogenerated mock type for the AuthnService type
type AuthnService struct {
	mock.Mock
}

type AuthnService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthnService) EXPECT() *AuthnService_Expecter {
	return &AuthnService_Expecter{mock: &_m.Mock}
}

// GetPrincipal provides a mock function with given fields: ctx, via
func (_m *AuthnService) GetPrincipal(ctx context.Context, via ...authenticate.ClientAssertion) (authenticate.Principal, error) {
	_va := make([]interface{}, len(via))
	for _i := range via {
		_va[_i] = via[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipal")
	}

	var r0 authenticate.Principal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...authenticate.ClientAssertion) (authenticate.Principal, error)); ok {
		return rf(ctx, via...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...authenticate.ClientAssertion) authenticate.Principal); ok {
		r0 = rf(ctx, via...)
	} else {
		r0 = ret.Get(0).(authenticate.Principal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...authenticate.ClientAssertion) error); ok {
		r1 = rf(ctx, via...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthnService_GetPrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrincipal'
type AuthnService_GetPrincipal_Call struct {
	*mock.Call
}

// GetPrincipal is a helper method to define mock.On call
//   - ctx context.Context
//   - via ...authenticate.ClientAssertion
func (_e *AuthnService_Expecter) GetPrincipal(ctx interface{}, via ...interface{}) *AuthnService_GetPrincipal_Call {
	return &AuthnService_GetPrincipal_Call{Call: _e.mock.On("GetPrincipal",
		append([]interface{}{ctx}, via...)...)}
}

func (_c *AuthnService_GetPrincipal_Call) Run(run func(ctx context.Context, via ...authenticate.ClientAssertion)) *AuthnService_GetPrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]authenticate.ClientAssertion, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(authenticate.ClientAssertion)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AuthnService_GetPrincipal_Call) Return(_a0 authenticate.Principal, _a1 error) *AuthnService_GetPrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthnService_GetPrincipal_Call) RunAndReturn(run func(context.Context, ...authenticate.ClientAssertion) (authenticate.Principal, error)) *AuthnService_GetPrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthnService creates a new instance of AuthnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthnService {
	mock := &AuthnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
